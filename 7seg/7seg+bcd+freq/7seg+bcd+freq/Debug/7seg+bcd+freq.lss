
7seg+bcd+freq.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000005f2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  00000646  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 000000b8  00000000  00000000  00000676  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000a94  00000000  00000000  0000072e  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000311  00000000  00000000  000011c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   0000041b  00000000  00000000  000014d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000128  00000000  00000000  000018f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000289  00000000  00000000  00001a18  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000010d0  00000000  00000000  00001ca1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000088  00000000  00000000  00002d71  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 ba 00 	jmp	0x174	; 0x174 <__ctors_end>
   4:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
   8:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
   c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
  10:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
  14:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
  18:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
  1c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
  20:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
  24:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
  28:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
  2c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
  30:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
  34:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
  38:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
  3c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
  40:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
  44:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
  48:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
  4c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
  50:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
  54:	88 01       	movw	r16, r16
  56:	a5 01       	movw	r20, r10
  58:	c2 01       	movw	r24, r4
  5a:	df 01       	movw	r26, r30
  5c:	fb 01       	movw	r30, r22
  5e:	fb 01       	movw	r30, r22
  60:	fb 01       	movw	r30, r22
  62:	fb 01       	movw	r30, r22
  64:	fb 01       	movw	r30, r22
  66:	fb 01       	movw	r30, r22
  68:	fb 01       	movw	r30, r22
  6a:	fb 01       	movw	r30, r22
  6c:	fb 01       	movw	r30, r22
  6e:	fb 01       	movw	r30, r22
  70:	fb 01       	movw	r30, r22
  72:	fb 01       	movw	r30, r22
  74:	fb 01       	movw	r30, r22
  76:	fb 01       	movw	r30, r22
  78:	fb 01       	movw	r30, r22
  7a:	fb 01       	movw	r30, r22
  7c:	fb 01       	movw	r30, r22
  7e:	fb 01       	movw	r30, r22
  80:	fb 01       	movw	r30, r22
  82:	fb 01       	movw	r30, r22
  84:	fb 01       	movw	r30, r22
  86:	fb 01       	movw	r30, r22
  88:	fb 01       	movw	r30, r22
  8a:	fb 01       	movw	r30, r22
  8c:	fb 01       	movw	r30, r22
  8e:	fb 01       	movw	r30, r22
  90:	fb 01       	movw	r30, r22
  92:	fb 01       	movw	r30, r22
  94:	88 01       	movw	r16, r16
  96:	a5 01       	movw	r20, r10
  98:	c2 01       	movw	r24, r4
  9a:	df 01       	movw	r26, r30
  9c:	08 02       	muls	r16, r24
  9e:	25 02       	muls	r18, r21
  a0:	42 02       	muls	r20, r18
  a2:	5f 02       	muls	r21, r31
  a4:	7b 02       	muls	r23, r27
  a6:	7b 02       	muls	r23, r27
  a8:	7b 02       	muls	r23, r27
  aa:	7b 02       	muls	r23, r27
  ac:	7b 02       	muls	r23, r27
  ae:	7b 02       	muls	r23, r27
  b0:	7b 02       	muls	r23, r27
  b2:	7b 02       	muls	r23, r27
  b4:	7b 02       	muls	r23, r27
  b6:	7b 02       	muls	r23, r27
  b8:	7b 02       	muls	r23, r27
  ba:	7b 02       	muls	r23, r27
  bc:	7b 02       	muls	r23, r27
  be:	7b 02       	muls	r23, r27
  c0:	7b 02       	muls	r23, r27
  c2:	7b 02       	muls	r23, r27
  c4:	7b 02       	muls	r23, r27
  c6:	7b 02       	muls	r23, r27
  c8:	7b 02       	muls	r23, r27
  ca:	7b 02       	muls	r23, r27
  cc:	7b 02       	muls	r23, r27
  ce:	7b 02       	muls	r23, r27
  d0:	7b 02       	muls	r23, r27
  d2:	7b 02       	muls	r23, r27
  d4:	7b 02       	muls	r23, r27
  d6:	7b 02       	muls	r23, r27
  d8:	7b 02       	muls	r23, r27
  da:	7b 02       	muls	r23, r27
  dc:	08 02       	muls	r16, r24
  de:	25 02       	muls	r18, r21
  e0:	42 02       	muls	r20, r18
  e2:	5f 02       	muls	r21, r31
  e4:	8b 02       	muls	r24, r27
  e6:	92 02       	muls	r25, r18
  e8:	99 02       	muls	r25, r25
  ea:	a0 02       	muls	r26, r16
  ec:	d1 02       	muls	r29, r17
  ee:	d1 02       	muls	r29, r17
  f0:	d1 02       	muls	r29, r17
  f2:	d1 02       	muls	r29, r17
  f4:	d1 02       	muls	r29, r17
  f6:	d1 02       	muls	r29, r17
  f8:	d1 02       	muls	r29, r17
  fa:	d1 02       	muls	r29, r17
  fc:	d1 02       	muls	r29, r17
  fe:	d1 02       	muls	r29, r17
 100:	d1 02       	muls	r29, r17
 102:	d1 02       	muls	r29, r17
 104:	d1 02       	muls	r29, r17
 106:	d1 02       	muls	r29, r17
 108:	d1 02       	muls	r29, r17
 10a:	d1 02       	muls	r29, r17
 10c:	d1 02       	muls	r29, r17
 10e:	d1 02       	muls	r29, r17
 110:	d1 02       	muls	r29, r17
 112:	d1 02       	muls	r29, r17
 114:	d1 02       	muls	r29, r17
 116:	d1 02       	muls	r29, r17
 118:	d1 02       	muls	r29, r17
 11a:	d1 02       	muls	r29, r17
 11c:	d1 02       	muls	r29, r17
 11e:	d1 02       	muls	r29, r17
 120:	d1 02       	muls	r29, r17
 122:	d1 02       	muls	r29, r17
 124:	8b 02       	muls	r24, r27
 126:	92 02       	muls	r25, r18
 128:	99 02       	muls	r25, r25
 12a:	a0 02       	muls	r26, r16
 12c:	b6 02       	muls	r27, r22
 12e:	bd 02       	muls	r27, r29
 130:	c4 02       	muls	r28, r20
 132:	cb 02       	muls	r28, r27
 134:	d1 02       	muls	r29, r17
 136:	d1 02       	muls	r29, r17
 138:	d1 02       	muls	r29, r17
 13a:	d1 02       	muls	r29, r17
 13c:	d1 02       	muls	r29, r17
 13e:	d1 02       	muls	r29, r17
 140:	d1 02       	muls	r29, r17
 142:	d1 02       	muls	r29, r17
 144:	d1 02       	muls	r29, r17
 146:	d1 02       	muls	r29, r17
 148:	d1 02       	muls	r29, r17
 14a:	d1 02       	muls	r29, r17
 14c:	d1 02       	muls	r29, r17
 14e:	d1 02       	muls	r29, r17
 150:	d1 02       	muls	r29, r17
 152:	d1 02       	muls	r29, r17
 154:	d1 02       	muls	r29, r17
 156:	d1 02       	muls	r29, r17
 158:	d1 02       	muls	r29, r17
 15a:	d1 02       	muls	r29, r17
 15c:	d1 02       	muls	r29, r17
 15e:	d1 02       	muls	r29, r17
 160:	d1 02       	muls	r29, r17
 162:	d1 02       	muls	r29, r17
 164:	d1 02       	muls	r29, r17
 166:	d1 02       	muls	r29, r17
 168:	d1 02       	muls	r29, r17
 16a:	d1 02       	muls	r29, r17
 16c:	b6 02       	muls	r27, r22
 16e:	bd 02       	muls	r27, r29
 170:	c4 02       	muls	r28, r20
 172:	cb 02       	muls	r28, r27

00000174 <__ctors_end>:
 174:	11 24       	eor	r1, r1
 176:	1f be       	out	0x3f, r1	; 63
 178:	cf e5       	ldi	r28, 0x5F	; 95
 17a:	d8 e0       	ldi	r29, 0x08	; 8
 17c:	de bf       	out	0x3e, r29	; 62
 17e:	cd bf       	out	0x3d, r28	; 61
 180:	0e 94 c6 00 	call	0x18c	; 0x18c <main>
 184:	0c 94 f7 02 	jmp	0x5ee	; 0x5ee <_exit>

00000188 <__bad_interrupt>:
 188:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000018c <main>:
#define seg2      5

int main(void)
{
	unsigned char count = 0;
    sevenSEG_init_bcd(seg_port, 0);
 18c:	60 e0       	ldi	r22, 0x00	; 0
 18e:	81 e4       	ldi	r24, 0x41	; 65
 190:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <sevenSEG_init_bcd>
	sevenSEG_init_bcd(seg_port, 4);
 194:	64 e0       	ldi	r22, 0x04	; 4
 196:	81 e4       	ldi	r24, 0x41	; 65
 198:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <sevenSEG_init_bcd>
#define seg1      4
#define seg2      5

int main(void)
{
	unsigned char count = 0;
 19c:	c0 e0       	ldi	r28, 0x00	; 0
			
			_delay_ms(20);
		}
		else
		{
			count = -1;
 19e:	df ef       	ldi	r29, 0xFF	; 255
		}
		else if ((count > 9) && (count <= 99))
		{
			DIO_write_pin(seg_port, seg1, 1);
			_delay_ms(5);
			sevenSEG_write_bcd(seg_port, (count%10), 0);
 1a0:	1d ec       	ldi	r17, 0xCD	; 205
	sevenSEG_init_bcd(seg_port, 4);
	//DIO_set_port_dir(seg_port, 0xff);
	
    while(1)
    {
        if (count <= 9)
 1a2:	ca 30       	cpi	r28, 0x0A	; 10
 1a4:	08 f0       	brcs	.+2      	; 0x1a8 <main+0x1c>
 1a6:	43 c0       	rjmp	.+134    	; 0x22e <main+0xa2>
		{
			DIO_write_pin(seg_port, seg1, 1);
 1a8:	41 e0       	ldi	r20, 0x01	; 1
 1aa:	64 e0       	ldi	r22, 0x04	; 4
 1ac:	81 e4       	ldi	r24, 0x41	; 65
 1ae:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <DIO_write_pin>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1b2:	8f e0       	ldi	r24, 0x0F	; 15
 1b4:	97 e2       	ldi	r25, 0x27	; 39
 1b6:	01 97       	sbiw	r24, 0x01	; 1
 1b8:	f1 f7       	brne	.-4      	; 0x1b6 <main+0x2a>
 1ba:	00 c0       	rjmp	.+0      	; 0x1bc <main+0x30>
 1bc:	00 00       	nop
			_delay_ms(5);
			sevenSEG_write_bcd(seg_port, count, 0);
 1be:	40 e0       	ldi	r20, 0x00	; 0
 1c0:	6c 2f       	mov	r22, r28
 1c2:	81 e4       	ldi	r24, 0x41	; 65
 1c4:	0e 94 ee 02 	call	0x5dc	; 0x5dc <sevenSEG_write_bcd>
 1c8:	8f e0       	ldi	r24, 0x0F	; 15
 1ca:	97 e2       	ldi	r25, 0x27	; 39
 1cc:	01 97       	sbiw	r24, 0x01	; 1
 1ce:	f1 f7       	brne	.-4      	; 0x1cc <main+0x40>
 1d0:	00 c0       	rjmp	.+0      	; 0x1d2 <main+0x46>
 1d2:	00 00       	nop
			_delay_ms(5);
			DIO_write_pin(seg_port, seg1, 0);
 1d4:	40 e0       	ldi	r20, 0x00	; 0
 1d6:	64 e0       	ldi	r22, 0x04	; 4
 1d8:	81 e4       	ldi	r24, 0x41	; 65
 1da:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <DIO_write_pin>
 1de:	8f e3       	ldi	r24, 0x3F	; 63
 1e0:	9c e9       	ldi	r25, 0x9C	; 156
 1e2:	01 97       	sbiw	r24, 0x01	; 1
 1e4:	f1 f7       	brne	.-4      	; 0x1e2 <main+0x56>
 1e6:	00 c0       	rjmp	.+0      	; 0x1e8 <main+0x5c>
 1e8:	00 00       	nop
			
			_delay_ms(20);
			
			DIO_write_pin(seg_port, seg1, 1);
 1ea:	41 e0       	ldi	r20, 0x01	; 1
 1ec:	64 e0       	ldi	r22, 0x04	; 4
 1ee:	81 e4       	ldi	r24, 0x41	; 65
 1f0:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <DIO_write_pin>
 1f4:	8f e0       	ldi	r24, 0x0F	; 15
 1f6:	97 e2       	ldi	r25, 0x27	; 39
 1f8:	01 97       	sbiw	r24, 0x01	; 1
 1fa:	f1 f7       	brne	.-4      	; 0x1f8 <main+0x6c>
 1fc:	00 c0       	rjmp	.+0      	; 0x1fe <main+0x72>
 1fe:	00 00       	nop
			_delay_ms(5);
			sevenSEG_write_bcd(seg_port, 0, 0);
 200:	40 e0       	ldi	r20, 0x00	; 0
 202:	60 e0       	ldi	r22, 0x00	; 0
 204:	81 e4       	ldi	r24, 0x41	; 65
 206:	0e 94 ee 02 	call	0x5dc	; 0x5dc <sevenSEG_write_bcd>
 20a:	8f e0       	ldi	r24, 0x0F	; 15
 20c:	97 e2       	ldi	r25, 0x27	; 39
 20e:	01 97       	sbiw	r24, 0x01	; 1
 210:	f1 f7       	brne	.-4      	; 0x20e <main+0x82>
 212:	00 c0       	rjmp	.+0      	; 0x214 <main+0x88>
 214:	00 00       	nop
			_delay_ms(5);
			DIO_write_pin(seg_port, seg2, 0);
 216:	40 e0       	ldi	r20, 0x00	; 0
 218:	65 e0       	ldi	r22, 0x05	; 5
 21a:	81 e4       	ldi	r24, 0x41	; 65
 21c:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <DIO_write_pin>
 220:	8f e3       	ldi	r24, 0x3F	; 63
 222:	9c e9       	ldi	r25, 0x9C	; 156
 224:	01 97       	sbiw	r24, 0x01	; 1
 226:	f1 f7       	brne	.-4      	; 0x224 <main+0x98>
 228:	00 c0       	rjmp	.+0      	; 0x22a <main+0x9e>
 22a:	00 00       	nop
 22c:	5a c0       	rjmp	.+180    	; 0x2e2 <main+0x156>
			
			_delay_ms(20);
		}
		else if ((count > 9) && (count <= 99))
 22e:	86 ef       	ldi	r24, 0xF6	; 246
 230:	8c 0f       	add	r24, r28
 232:	8a 35       	cpi	r24, 0x5A	; 90
 234:	08 f0       	brcs	.+2      	; 0x238 <main+0xac>
 236:	54 c0       	rjmp	.+168    	; 0x2e0 <main+0x154>
		{
			DIO_write_pin(seg_port, seg1, 1);
 238:	41 e0       	ldi	r20, 0x01	; 1
 23a:	64 e0       	ldi	r22, 0x04	; 4
 23c:	81 e4       	ldi	r24, 0x41	; 65
 23e:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <DIO_write_pin>
 242:	8f e0       	ldi	r24, 0x0F	; 15
 244:	97 e2       	ldi	r25, 0x27	; 39
 246:	01 97       	sbiw	r24, 0x01	; 1
 248:	f1 f7       	brne	.-4      	; 0x246 <main+0xba>
 24a:	00 c0       	rjmp	.+0      	; 0x24c <main+0xc0>
 24c:	00 00       	nop
			_delay_ms(5);
			sevenSEG_write_bcd(seg_port, (count%10), 0);
 24e:	c1 9f       	mul	r28, r17
 250:	81 2d       	mov	r24, r1
 252:	11 24       	eor	r1, r1
 254:	86 95       	lsr	r24
 256:	86 95       	lsr	r24
 258:	86 95       	lsr	r24
 25a:	88 0f       	add	r24, r24
 25c:	98 2f       	mov	r25, r24
 25e:	99 0f       	add	r25, r25
 260:	99 0f       	add	r25, r25
 262:	89 0f       	add	r24, r25
 264:	6c 2f       	mov	r22, r28
 266:	68 1b       	sub	r22, r24
 268:	40 e0       	ldi	r20, 0x00	; 0
 26a:	81 e4       	ldi	r24, 0x41	; 65
 26c:	0e 94 ee 02 	call	0x5dc	; 0x5dc <sevenSEG_write_bcd>
 270:	8f e0       	ldi	r24, 0x0F	; 15
 272:	97 e2       	ldi	r25, 0x27	; 39
 274:	01 97       	sbiw	r24, 0x01	; 1
 276:	f1 f7       	brne	.-4      	; 0x274 <main+0xe8>
 278:	00 c0       	rjmp	.+0      	; 0x27a <main+0xee>
 27a:	00 00       	nop
			_delay_ms(5);
			DIO_write_pin(seg_port, seg1, 0);
 27c:	40 e0       	ldi	r20, 0x00	; 0
 27e:	64 e0       	ldi	r22, 0x04	; 4
 280:	81 e4       	ldi	r24, 0x41	; 65
 282:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <DIO_write_pin>
 286:	8f e3       	ldi	r24, 0x3F	; 63
 288:	9c e9       	ldi	r25, 0x9C	; 156
 28a:	01 97       	sbiw	r24, 0x01	; 1
 28c:	f1 f7       	brne	.-4      	; 0x28a <main+0xfe>
 28e:	00 c0       	rjmp	.+0      	; 0x290 <main+0x104>
 290:	00 00       	nop
			
			_delay_ms(20);
			
			DIO_write_pin(seg_port, seg2, 1);
 292:	41 e0       	ldi	r20, 0x01	; 1
 294:	65 e0       	ldi	r22, 0x05	; 5
 296:	81 e4       	ldi	r24, 0x41	; 65
 298:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <DIO_write_pin>
 29c:	8f e0       	ldi	r24, 0x0F	; 15
 29e:	97 e2       	ldi	r25, 0x27	; 39
 2a0:	01 97       	sbiw	r24, 0x01	; 1
 2a2:	f1 f7       	brne	.-4      	; 0x2a0 <main+0x114>
 2a4:	00 c0       	rjmp	.+0      	; 0x2a6 <main+0x11a>
 2a6:	00 00       	nop
			_delay_ms(5);
			sevenSEG_write_bcd(seg_port, (count/10), 0);
 2a8:	c1 9f       	mul	r28, r17
 2aa:	61 2d       	mov	r22, r1
 2ac:	11 24       	eor	r1, r1
 2ae:	66 95       	lsr	r22
 2b0:	66 95       	lsr	r22
 2b2:	66 95       	lsr	r22
 2b4:	40 e0       	ldi	r20, 0x00	; 0
 2b6:	81 e4       	ldi	r24, 0x41	; 65
 2b8:	0e 94 ee 02 	call	0x5dc	; 0x5dc <sevenSEG_write_bcd>
 2bc:	8f e0       	ldi	r24, 0x0F	; 15
 2be:	97 e2       	ldi	r25, 0x27	; 39
 2c0:	01 97       	sbiw	r24, 0x01	; 1
 2c2:	f1 f7       	brne	.-4      	; 0x2c0 <main+0x134>
 2c4:	00 c0       	rjmp	.+0      	; 0x2c6 <main+0x13a>
 2c6:	00 00       	nop
			_delay_ms(5);
			DIO_write_pin(seg_port, seg2, 0);
 2c8:	40 e0       	ldi	r20, 0x00	; 0
 2ca:	65 e0       	ldi	r22, 0x05	; 5
 2cc:	81 e4       	ldi	r24, 0x41	; 65
 2ce:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <DIO_write_pin>
 2d2:	8f e3       	ldi	r24, 0x3F	; 63
 2d4:	9c e9       	ldi	r25, 0x9C	; 156
 2d6:	01 97       	sbiw	r24, 0x01	; 1
 2d8:	f1 f7       	brne	.-4      	; 0x2d6 <main+0x14a>
 2da:	00 c0       	rjmp	.+0      	; 0x2dc <main+0x150>
 2dc:	00 00       	nop
 2de:	01 c0       	rjmp	.+2      	; 0x2e2 <main+0x156>
			
			_delay_ms(20);
		}
		else
		{
			count = -1;
 2e0:	cd 2f       	mov	r28, r29
		}
		
		count ++;
 2e2:	cf 5f       	subi	r28, 0xFF	; 255
 2e4:	9f ef       	ldi	r25, 0xFF	; 255
 2e6:	29 e6       	ldi	r18, 0x69	; 105
 2e8:	88 e1       	ldi	r24, 0x18	; 24
 2ea:	91 50       	subi	r25, 0x01	; 1
 2ec:	20 40       	sbci	r18, 0x00	; 0
 2ee:	80 40       	sbci	r24, 0x00	; 0
 2f0:	e1 f7       	brne	.-8      	; 0x2ea <main+0x15e>
 2f2:	00 c0       	rjmp	.+0      	; 0x2f4 <main+0x168>
 2f4:	00 00       	nop
 2f6:	55 cf       	rjmp	.-342    	; 0x1a2 <main+0x16>

000002f8 <DIO_set_pin_dir>:
#include <avr/io.h> 
#include "my_macros.h"      //My standard  bit macros implementation.

void DIO_set_pin_dir(unsigned char port, unsigned char pin, unsigned char direction)    //Function to set a specific pin direction 'I/P'(@direction=0) or 'O/P'(@direction=1).
{
  switch (port)
 2f8:	90 e0       	ldi	r25, 0x00	; 0
 2fa:	fc 01       	movw	r30, r24
 2fc:	e1 54       	subi	r30, 0x41	; 65
 2fe:	f1 09       	sbc	r31, r1
 300:	e4 32       	cpi	r30, 0x24	; 36
 302:	f1 05       	cpc	r31, r1
 304:	08 f0       	brcs	.+2      	; 0x308 <DIO_set_pin_dir+0x10>
 306:	77 c0       	rjmp	.+238    	; 0x3f6 <DIO_set_pin_dir+0xfe>
 308:	e6 5d       	subi	r30, 0xD6	; 214
 30a:	ff 4f       	sbci	r31, 0xFF	; 255
 30c:	0c 94 f1 02 	jmp	0x5e2	; 0x5e2 <__tablejump2__>
  {
    case 'A':                     // @Port 'A'.
    case 'a':                     // @Port 'a'.
    if (1== direction)            // '1' is for 'O/P'.
 310:	41 30       	cpi	r20, 0x01	; 1
 312:	69 f4       	brne	.+26     	; 0x32e <DIO_set_pin_dir+0x36>
    {
      SET_BIT(DDRA, pin);         // Set the pin 'PIN' in port 'A' as 'O/P'.
 314:	2a b3       	in	r18, 0x1a	; 26
 316:	81 e0       	ldi	r24, 0x01	; 1
 318:	90 e0       	ldi	r25, 0x00	; 0
 31a:	ac 01       	movw	r20, r24
 31c:	02 c0       	rjmp	.+4      	; 0x322 <DIO_set_pin_dir+0x2a>
 31e:	44 0f       	add	r20, r20
 320:	55 1f       	adc	r21, r21
 322:	6a 95       	dec	r22
 324:	e2 f7       	brpl	.-8      	; 0x31e <DIO_set_pin_dir+0x26>
 326:	ba 01       	movw	r22, r20
 328:	62 2b       	or	r22, r18
 32a:	6a bb       	out	0x1a, r22	; 26
 32c:	08 95       	ret
    }
    else
    {
      CLR_BIT(DDRA, pin);        // Set the pin 'PIN' in port 'A' as 'I/P'.
 32e:	2a b3       	in	r18, 0x1a	; 26
 330:	81 e0       	ldi	r24, 0x01	; 1
 332:	90 e0       	ldi	r25, 0x00	; 0
 334:	ac 01       	movw	r20, r24
 336:	02 c0       	rjmp	.+4      	; 0x33c <DIO_set_pin_dir+0x44>
 338:	44 0f       	add	r20, r20
 33a:	55 1f       	adc	r21, r21
 33c:	6a 95       	dec	r22
 33e:	e2 f7       	brpl	.-8      	; 0x338 <DIO_set_pin_dir+0x40>
 340:	ba 01       	movw	r22, r20
 342:	60 95       	com	r22
 344:	62 23       	and	r22, r18
 346:	6a bb       	out	0x1a, r22	; 26
 348:	08 95       	ret
    } 
    break;

    case 'B':                    // @Port 'B'.
    case 'b':                    // @Port 'b'.
    if (1==direction)            // '1' is for 'O/P'.
 34a:	41 30       	cpi	r20, 0x01	; 1
 34c:	69 f4       	brne	.+26     	; 0x368 <DIO_set_pin_dir+0x70>
    {
      SET_BIT(DDRB, pin);        // Set the pin 'PIN' in port 'B' as 'O/P'.
 34e:	27 b3       	in	r18, 0x17	; 23
 350:	81 e0       	ldi	r24, 0x01	; 1
 352:	90 e0       	ldi	r25, 0x00	; 0
 354:	ac 01       	movw	r20, r24
 356:	02 c0       	rjmp	.+4      	; 0x35c <DIO_set_pin_dir+0x64>
 358:	44 0f       	add	r20, r20
 35a:	55 1f       	adc	r21, r21
 35c:	6a 95       	dec	r22
 35e:	e2 f7       	brpl	.-8      	; 0x358 <DIO_set_pin_dir+0x60>
 360:	ba 01       	movw	r22, r20
 362:	62 2b       	or	r22, r18
 364:	67 bb       	out	0x17, r22	; 23
 366:	08 95       	ret
    }
    else
    {
      CLR_BIT(DDRB, pin);        // Set the pin 'PIN' in port 'B' as 'I/P'.
 368:	27 b3       	in	r18, 0x17	; 23
 36a:	81 e0       	ldi	r24, 0x01	; 1
 36c:	90 e0       	ldi	r25, 0x00	; 0
 36e:	ac 01       	movw	r20, r24
 370:	02 c0       	rjmp	.+4      	; 0x376 <DIO_set_pin_dir+0x7e>
 372:	44 0f       	add	r20, r20
 374:	55 1f       	adc	r21, r21
 376:	6a 95       	dec	r22
 378:	e2 f7       	brpl	.-8      	; 0x372 <DIO_set_pin_dir+0x7a>
 37a:	ba 01       	movw	r22, r20
 37c:	60 95       	com	r22
 37e:	62 23       	and	r22, r18
 380:	67 bb       	out	0x17, r22	; 23
 382:	08 95       	ret
    }
    break;

    case 'C':                    // @Port 'C'.
    case 'c':                    // @Port 'c'. 
    if (1==direction)            // '1' is for 'O/P'.
 384:	41 30       	cpi	r20, 0x01	; 1
 386:	69 f4       	brne	.+26     	; 0x3a2 <DIO_set_pin_dir+0xaa>
    {
      SET_BIT(DDRC, pin);        // Set the pin 'PIN' in port 'C' as 'O/P'. 
 388:	24 b3       	in	r18, 0x14	; 20
 38a:	81 e0       	ldi	r24, 0x01	; 1
 38c:	90 e0       	ldi	r25, 0x00	; 0
 38e:	ac 01       	movw	r20, r24
 390:	02 c0       	rjmp	.+4      	; 0x396 <DIO_set_pin_dir+0x9e>
 392:	44 0f       	add	r20, r20
 394:	55 1f       	adc	r21, r21
 396:	6a 95       	dec	r22
 398:	e2 f7       	brpl	.-8      	; 0x392 <DIO_set_pin_dir+0x9a>
 39a:	ba 01       	movw	r22, r20
 39c:	62 2b       	or	r22, r18
 39e:	64 bb       	out	0x14, r22	; 20
 3a0:	08 95       	ret
    }
    else
    {
      CLR_BIT(DDRC, pin);        // Set the pin 'PIN' in port 'C' as 'I/P'. 
 3a2:	24 b3       	in	r18, 0x14	; 20
 3a4:	81 e0       	ldi	r24, 0x01	; 1
 3a6:	90 e0       	ldi	r25, 0x00	; 0
 3a8:	ac 01       	movw	r20, r24
 3aa:	02 c0       	rjmp	.+4      	; 0x3b0 <DIO_set_pin_dir+0xb8>
 3ac:	44 0f       	add	r20, r20
 3ae:	55 1f       	adc	r21, r21
 3b0:	6a 95       	dec	r22
 3b2:	e2 f7       	brpl	.-8      	; 0x3ac <DIO_set_pin_dir+0xb4>
 3b4:	ba 01       	movw	r22, r20
 3b6:	60 95       	com	r22
 3b8:	62 23       	and	r22, r18
 3ba:	64 bb       	out	0x14, r22	; 20
 3bc:	08 95       	ret
    }
    break;

    case 'D':                    // @Port 'D'.
    case 'd':                    // @Port 'd'. 
    if (1==direction)            // '1' is for 'O/P'.
 3be:	41 30       	cpi	r20, 0x01	; 1
 3c0:	69 f4       	brne	.+26     	; 0x3dc <DIO_set_pin_dir+0xe4>
    {
      SET_BIT(DDRD, pin);        // Set the pin 'PIN' in port 'D' as 'O/P'. 
 3c2:	21 b3       	in	r18, 0x11	; 17
 3c4:	81 e0       	ldi	r24, 0x01	; 1
 3c6:	90 e0       	ldi	r25, 0x00	; 0
 3c8:	ac 01       	movw	r20, r24
 3ca:	02 c0       	rjmp	.+4      	; 0x3d0 <DIO_set_pin_dir+0xd8>
 3cc:	44 0f       	add	r20, r20
 3ce:	55 1f       	adc	r21, r21
 3d0:	6a 95       	dec	r22
 3d2:	e2 f7       	brpl	.-8      	; 0x3cc <DIO_set_pin_dir+0xd4>
 3d4:	ba 01       	movw	r22, r20
 3d6:	62 2b       	or	r22, r18
 3d8:	61 bb       	out	0x11, r22	; 17
 3da:	08 95       	ret
    }
    else
    {
      CLR_BIT(DDRD, pin);        // Set the pin 'PIN' in port 'D' as 'I/P'.
 3dc:	21 b3       	in	r18, 0x11	; 17
 3de:	81 e0       	ldi	r24, 0x01	; 1
 3e0:	90 e0       	ldi	r25, 0x00	; 0
 3e2:	ac 01       	movw	r20, r24
 3e4:	02 c0       	rjmp	.+4      	; 0x3ea <DIO_set_pin_dir+0xf2>
 3e6:	44 0f       	add	r20, r20
 3e8:	55 1f       	adc	r21, r21
 3ea:	6a 95       	dec	r22
 3ec:	e2 f7       	brpl	.-8      	; 0x3e6 <DIO_set_pin_dir+0xee>
 3ee:	ba 01       	movw	r22, r20
 3f0:	60 95       	com	r22
 3f2:	62 23       	and	r22, r18
 3f4:	61 bb       	out	0x11, r22	; 17
 3f6:	08 95       	ret

000003f8 <DIO_write_pin>:
//..................................................................................


void DIO_write_pin(unsigned char port, unsigned char pin, unsigned char value)  //Set the 'O/P' pin as 'HIGH' or 'LOW'
{
  switch (port)
 3f8:	90 e0       	ldi	r25, 0x00	; 0
 3fa:	fc 01       	movw	r30, r24
 3fc:	e1 54       	subi	r30, 0x41	; 65
 3fe:	f1 09       	sbc	r31, r1
 400:	e4 32       	cpi	r30, 0x24	; 36
 402:	f1 05       	cpc	r31, r1
 404:	08 f0       	brcs	.+2      	; 0x408 <DIO_write_pin+0x10>
 406:	77 c0       	rjmp	.+238    	; 0x4f6 <DIO_write_pin+0xfe>
 408:	e2 5b       	subi	r30, 0xB2	; 178
 40a:	ff 4f       	sbci	r31, 0xFF	; 255
 40c:	0c 94 f1 02 	jmp	0x5e2	; 0x5e2 <__tablejump2__>
  {
    case 'A':                  // @Port 'A'.
    case 'a':                  // @Port 'a'.
    if (1==value)             
 410:	41 30       	cpi	r20, 0x01	; 1
 412:	69 f4       	brne	.+26     	; 0x42e <DIO_write_pin+0x36>
    {
      SET_BIT(PORTA, pin);     // Set pin 'PIN' in port 'A' as 'HIGH'.
 414:	2b b3       	in	r18, 0x1b	; 27
 416:	81 e0       	ldi	r24, 0x01	; 1
 418:	90 e0       	ldi	r25, 0x00	; 0
 41a:	ac 01       	movw	r20, r24
 41c:	02 c0       	rjmp	.+4      	; 0x422 <DIO_write_pin+0x2a>
 41e:	44 0f       	add	r20, r20
 420:	55 1f       	adc	r21, r21
 422:	6a 95       	dec	r22
 424:	e2 f7       	brpl	.-8      	; 0x41e <DIO_write_pin+0x26>
 426:	ba 01       	movw	r22, r20
 428:	62 2b       	or	r22, r18
 42a:	6b bb       	out	0x1b, r22	; 27
 42c:	08 95       	ret
    }
    else
    {
      CLR_BIT(PORTA, pin);     // Set pin 'PIN' in port 'A' as 'LOW'.
 42e:	2b b3       	in	r18, 0x1b	; 27
 430:	81 e0       	ldi	r24, 0x01	; 1
 432:	90 e0       	ldi	r25, 0x00	; 0
 434:	ac 01       	movw	r20, r24
 436:	02 c0       	rjmp	.+4      	; 0x43c <DIO_write_pin+0x44>
 438:	44 0f       	add	r20, r20
 43a:	55 1f       	adc	r21, r21
 43c:	6a 95       	dec	r22
 43e:	e2 f7       	brpl	.-8      	; 0x438 <DIO_write_pin+0x40>
 440:	ba 01       	movw	r22, r20
 442:	60 95       	com	r22
 444:	62 23       	and	r22, r18
 446:	6b bb       	out	0x1b, r22	; 27
 448:	08 95       	ret
    }
    break;
  
    case 'B':                  // @Port 'B'.
    case 'b':                  // @Port 'b'.
    if (1==value)             
 44a:	41 30       	cpi	r20, 0x01	; 1
 44c:	69 f4       	brne	.+26     	; 0x468 <DIO_write_pin+0x70>
    {
      SET_BIT(PORTB, pin);    // Set pin 'PIN' in port 'B' as 'HIGH'.
 44e:	28 b3       	in	r18, 0x18	; 24
 450:	81 e0       	ldi	r24, 0x01	; 1
 452:	90 e0       	ldi	r25, 0x00	; 0
 454:	ac 01       	movw	r20, r24
 456:	02 c0       	rjmp	.+4      	; 0x45c <DIO_write_pin+0x64>
 458:	44 0f       	add	r20, r20
 45a:	55 1f       	adc	r21, r21
 45c:	6a 95       	dec	r22
 45e:	e2 f7       	brpl	.-8      	; 0x458 <DIO_write_pin+0x60>
 460:	ba 01       	movw	r22, r20
 462:	62 2b       	or	r22, r18
 464:	68 bb       	out	0x18, r22	; 24
 466:	08 95       	ret
    }
    else
    {
      CLR_BIT(PORTB, pin);    // Set pin 'PIN' in port 'B' as 'LOW'.
 468:	28 b3       	in	r18, 0x18	; 24
 46a:	81 e0       	ldi	r24, 0x01	; 1
 46c:	90 e0       	ldi	r25, 0x00	; 0
 46e:	ac 01       	movw	r20, r24
 470:	02 c0       	rjmp	.+4      	; 0x476 <DIO_write_pin+0x7e>
 472:	44 0f       	add	r20, r20
 474:	55 1f       	adc	r21, r21
 476:	6a 95       	dec	r22
 478:	e2 f7       	brpl	.-8      	; 0x472 <DIO_write_pin+0x7a>
 47a:	ba 01       	movw	r22, r20
 47c:	60 95       	com	r22
 47e:	62 23       	and	r22, r18
 480:	68 bb       	out	0x18, r22	; 24
 482:	08 95       	ret
    }
    break;

    case 'C':                  // @Port 'C'.
    case 'c':                  // @Port 'c'.
    if (1==value)             
 484:	41 30       	cpi	r20, 0x01	; 1
 486:	69 f4       	brne	.+26     	; 0x4a2 <DIO_write_pin+0xaa>
    {
      SET_BIT(PORTC, pin);    // Set pin 'PIN' in port 'C' as 'HIGH'.
 488:	25 b3       	in	r18, 0x15	; 21
 48a:	81 e0       	ldi	r24, 0x01	; 1
 48c:	90 e0       	ldi	r25, 0x00	; 0
 48e:	ac 01       	movw	r20, r24
 490:	02 c0       	rjmp	.+4      	; 0x496 <DIO_write_pin+0x9e>
 492:	44 0f       	add	r20, r20
 494:	55 1f       	adc	r21, r21
 496:	6a 95       	dec	r22
 498:	e2 f7       	brpl	.-8      	; 0x492 <DIO_write_pin+0x9a>
 49a:	ba 01       	movw	r22, r20
 49c:	62 2b       	or	r22, r18
 49e:	65 bb       	out	0x15, r22	; 21
 4a0:	08 95       	ret
    }
    else
    {
      CLR_BIT(PORTC, pin);    // Set pin 'PIN' in port 'C' as 'LOW'.
 4a2:	25 b3       	in	r18, 0x15	; 21
 4a4:	81 e0       	ldi	r24, 0x01	; 1
 4a6:	90 e0       	ldi	r25, 0x00	; 0
 4a8:	ac 01       	movw	r20, r24
 4aa:	02 c0       	rjmp	.+4      	; 0x4b0 <DIO_write_pin+0xb8>
 4ac:	44 0f       	add	r20, r20
 4ae:	55 1f       	adc	r21, r21
 4b0:	6a 95       	dec	r22
 4b2:	e2 f7       	brpl	.-8      	; 0x4ac <DIO_write_pin+0xb4>
 4b4:	ba 01       	movw	r22, r20
 4b6:	60 95       	com	r22
 4b8:	62 23       	and	r22, r18
 4ba:	65 bb       	out	0x15, r22	; 21
 4bc:	08 95       	ret
    }
    break;
  
    case 'D':                // @Port 'D'.
    case 'd':                // @Port 'd'.
    if (1==value)             
 4be:	41 30       	cpi	r20, 0x01	; 1
 4c0:	69 f4       	brne	.+26     	; 0x4dc <DIO_write_pin+0xe4>
    {
      SET_BIT(PORTD, pin);   // Set pin 'PIN' in port 'D' as 'HIGH'.
 4c2:	22 b3       	in	r18, 0x12	; 18
 4c4:	81 e0       	ldi	r24, 0x01	; 1
 4c6:	90 e0       	ldi	r25, 0x00	; 0
 4c8:	ac 01       	movw	r20, r24
 4ca:	02 c0       	rjmp	.+4      	; 0x4d0 <DIO_write_pin+0xd8>
 4cc:	44 0f       	add	r20, r20
 4ce:	55 1f       	adc	r21, r21
 4d0:	6a 95       	dec	r22
 4d2:	e2 f7       	brpl	.-8      	; 0x4cc <DIO_write_pin+0xd4>
 4d4:	ba 01       	movw	r22, r20
 4d6:	62 2b       	or	r22, r18
 4d8:	62 bb       	out	0x12, r22	; 18
 4da:	08 95       	ret
    }
    else
    {
      CLR_BIT(PORTD, pin);   // Set pin 'PIN' in port 'D' as 'LOW'.
 4dc:	22 b3       	in	r18, 0x12	; 18
 4de:	81 e0       	ldi	r24, 0x01	; 1
 4e0:	90 e0       	ldi	r25, 0x00	; 0
 4e2:	ac 01       	movw	r20, r24
 4e4:	02 c0       	rjmp	.+4      	; 0x4ea <DIO_write_pin+0xf2>
 4e6:	44 0f       	add	r20, r20
 4e8:	55 1f       	adc	r21, r21
 4ea:	6a 95       	dec	r22
 4ec:	e2 f7       	brpl	.-8      	; 0x4e6 <DIO_write_pin+0xee>
 4ee:	ba 01       	movw	r22, r20
 4f0:	60 95       	com	r22
 4f2:	62 23       	and	r22, r18
 4f4:	62 bb       	out	0x12, r22	; 18
 4f6:	08 95       	ret

000004f8 <DIO_write_nibble>:

//..................................................................................

void DIO_write_nibble (unsigned char port, unsigned char value, unsigned char nibble)    //Write a value (4-bits) on 'HIGH'(@nibble=1) or 'LOW'(@nibble=0) of 'port' 
{
  if (0 == nibble)          // '0': write on low nibble pins in 'O/P' pins
 4f8:	41 11       	cpse	r20, r1
 4fa:	29 c0       	rjmp	.+82     	; 0x54e <DIO_write_nibble+0x56>
  {
    value &= 0x0f;
 4fc:	6f 70       	andi	r22, 0x0F	; 15

    switch (port)
 4fe:	90 e0       	ldi	r25, 0x00	; 0
 500:	fc 01       	movw	r30, r24
 502:	e1 54       	subi	r30, 0x41	; 65
 504:	f1 09       	sbc	r31, r1
 506:	e4 32       	cpi	r30, 0x24	; 36
 508:	f1 05       	cpc	r31, r1
 50a:	08 f0       	brcs	.+2      	; 0x50e <DIO_write_nibble+0x16>
 50c:	4a c0       	rjmp	.+148    	; 0x5a2 <DIO_write_nibble+0xaa>
 50e:	ee 58       	subi	r30, 0x8E	; 142
 510:	ff 4f       	sbci	r31, 0xFF	; 255
 512:	0c 94 f1 02 	jmp	0x5e2	; 0x5e2 <__tablejump2__>
    {
      case 'A':
      case 'a':
      PORTA &= 0xf0;
 516:	8b b3       	in	r24, 0x1b	; 27
 518:	80 7f       	andi	r24, 0xF0	; 240
 51a:	8b bb       	out	0x1b, r24	; 27
      PORTA |= value;
 51c:	8b b3       	in	r24, 0x1b	; 27
 51e:	68 2b       	or	r22, r24
 520:	6b bb       	out	0x1b, r22	; 27
      break;
 522:	08 95       	ret

      case 'B':
      case 'b':
      PORTB &= 0xf0;
 524:	88 b3       	in	r24, 0x18	; 24
 526:	80 7f       	andi	r24, 0xF0	; 240
 528:	88 bb       	out	0x18, r24	; 24
      PORTB |= value;
 52a:	88 b3       	in	r24, 0x18	; 24
 52c:	68 2b       	or	r22, r24
 52e:	68 bb       	out	0x18, r22	; 24
      break;
 530:	08 95       	ret
    
      case 'C':
      case 'c':
      PORTC &= 0xf0;
 532:	85 b3       	in	r24, 0x15	; 21
 534:	80 7f       	andi	r24, 0xF0	; 240
 536:	85 bb       	out	0x15, r24	; 21
      PORTC |= value;
 538:	85 b3       	in	r24, 0x15	; 21
 53a:	68 2b       	or	r22, r24
 53c:	65 bb       	out	0x15, r22	; 21
      break;
 53e:	08 95       	ret
    
      case 'D':
      case 'd':
      PORTD &= 0xf0;
 540:	82 b3       	in	r24, 0x12	; 18
 542:	80 7f       	andi	r24, 0xF0	; 240
 544:	82 bb       	out	0x12, r24	; 18
      PORTD |= value;
 546:	82 b3       	in	r24, 0x12	; 18
 548:	68 2b       	or	r22, r24
 54a:	62 bb       	out	0x12, r22	; 18
      break;
 54c:	08 95       	ret
      default:
      break;
    }
  }

  else if (1 == nibble)    // '1': write on 'HIGH' nibble pins in 'O/P' pins
 54e:	41 30       	cpi	r20, 0x01	; 1
 550:	41 f5       	brne	.+80     	; 0x5a2 <DIO_write_nibble+0xaa>
  {
    value <<= 4;
 552:	62 95       	swap	r22
 554:	60 7f       	andi	r22, 0xF0	; 240

    switch (port)
 556:	90 e0       	ldi	r25, 0x00	; 0
 558:	fc 01       	movw	r30, r24
 55a:	e1 54       	subi	r30, 0x41	; 65
 55c:	f1 09       	sbc	r31, r1
 55e:	e4 32       	cpi	r30, 0x24	; 36
 560:	f1 05       	cpc	r31, r1
 562:	f8 f4       	brcc	.+62     	; 0x5a2 <DIO_write_nibble+0xaa>
 564:	ea 56       	subi	r30, 0x6A	; 106
 566:	ff 4f       	sbci	r31, 0xFF	; 255
 568:	0c 94 f1 02 	jmp	0x5e2	; 0x5e2 <__tablejump2__>
    {
      case 'A':
      case 'a':
      PORTA &= 0x0f;
 56c:	8b b3       	in	r24, 0x1b	; 27
 56e:	8f 70       	andi	r24, 0x0F	; 15
 570:	8b bb       	out	0x1b, r24	; 27
      PORTA |= value;
 572:	8b b3       	in	r24, 0x1b	; 27
 574:	68 2b       	or	r22, r24
 576:	6b bb       	out	0x1b, r22	; 27
      break;
 578:	08 95       	ret

      case 'B':
      case 'b':
      PORTB &= 0x0f;
 57a:	88 b3       	in	r24, 0x18	; 24
 57c:	8f 70       	andi	r24, 0x0F	; 15
 57e:	88 bb       	out	0x18, r24	; 24
      PORTB |= value;
 580:	88 b3       	in	r24, 0x18	; 24
 582:	68 2b       	or	r22, r24
 584:	68 bb       	out	0x18, r22	; 24
      break;
 586:	08 95       	ret
     
      case 'C':
      case 'c':
      PORTC &= 0x0f;
 588:	85 b3       	in	r24, 0x15	; 21
 58a:	8f 70       	andi	r24, 0x0F	; 15
 58c:	85 bb       	out	0x15, r24	; 21
      PORTC |= value;
 58e:	85 b3       	in	r24, 0x15	; 21
 590:	68 2b       	or	r22, r24
 592:	65 bb       	out	0x15, r22	; 21
      break;
 594:	08 95       	ret
    
      case 'D':
      case 'd':
      PORTD &= 0x0f;
 596:	82 b3       	in	r24, 0x12	; 18
 598:	8f 70       	andi	r24, 0x0F	; 15
 59a:	82 bb       	out	0x12, r24	; 18
      PORTD |= value;
 59c:	82 b3       	in	r24, 0x12	; 18
 59e:	68 2b       	or	r22, r24
 5a0:	62 bb       	out	0x12, r22	; 18
 5a2:	08 95       	ret

000005a4 <sevenSEG_init_bcd>:

#include "DIO.h"
#include "sevenSEG_bcd.h"

void sevenSEG_init_bcd(unsigned char port, unsigned char pin)    //Initializing the 'O/P' pins for the 7SEG-PCD.
{
 5a4:	cf 93       	push	r28
 5a6:	df 93       	push	r29
 5a8:	c8 2f       	mov	r28, r24
 5aa:	d6 2f       	mov	r29, r22
  DIO_set_pin_dir(port, (pin+0), 1);
 5ac:	41 e0       	ldi	r20, 0x01	; 1
 5ae:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <DIO_set_pin_dir>
  DIO_set_pin_dir(port, (pin+1), 1);
 5b2:	61 e0       	ldi	r22, 0x01	; 1
 5b4:	6d 0f       	add	r22, r29
 5b6:	41 e0       	ldi	r20, 0x01	; 1
 5b8:	8c 2f       	mov	r24, r28
 5ba:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <DIO_set_pin_dir>
  DIO_set_pin_dir(port, (pin+2), 1);
 5be:	62 e0       	ldi	r22, 0x02	; 2
 5c0:	6d 0f       	add	r22, r29
 5c2:	41 e0       	ldi	r20, 0x01	; 1
 5c4:	8c 2f       	mov	r24, r28
 5c6:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <DIO_set_pin_dir>
  DIO_set_pin_dir(port, (pin+3), 1);
 5ca:	63 e0       	ldi	r22, 0x03	; 3
 5cc:	6d 0f       	add	r22, r29
 5ce:	41 e0       	ldi	r20, 0x01	; 1
 5d0:	8c 2f       	mov	r24, r28
 5d2:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <DIO_set_pin_dir>
}
 5d6:	df 91       	pop	r29
 5d8:	cf 91       	pop	r28
 5da:	08 95       	ret

000005dc <sevenSEG_write_bcd>:

void sevenSEG_write_bcd(unsigned char port, unsigned char num, unsigned char nibble)
{
    DIO_write_nibble(port, num, nibble);
 5dc:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <DIO_write_nibble>
 5e0:	08 95       	ret

000005e2 <__tablejump2__>:
 5e2:	ee 0f       	add	r30, r30
 5e4:	ff 1f       	adc	r31, r31

000005e6 <__tablejump__>:
 5e6:	05 90       	lpm	r0, Z+
 5e8:	f4 91       	lpm	r31, Z
 5ea:	e0 2d       	mov	r30, r0
 5ec:	09 94       	ijmp

000005ee <_exit>:
 5ee:	f8 94       	cli

000005f0 <__stop_program>:
 5f0:	ff cf       	rjmp	.-2      	; 0x5f0 <__stop_program>
