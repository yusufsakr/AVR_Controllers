
single_7seg.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000222  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  00000276  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 000000c0  00000000  00000000  000002a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000916  00000000  00000000  00000366  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000002e3  00000000  00000000  00000c7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000003e5  00000000  00000000  00000f5f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  0000012c  00000000  00000000  00001344  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000291  00000000  00000000  00001470  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000155f  00000000  00000000  00001701  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 000000a8  00000000  00000000  00002c60  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__ctors_end>
   4:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
   8:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
   c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  10:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  14:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  18:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  1c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  20:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  24:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  28:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  2c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  30:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  34:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  38:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  3c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  40:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  44:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  48:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  4c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  50:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  54:	93 00       	.word	0x0093	; ????
  56:	95 00       	.word	0x0095	; ????
  58:	97 00       	.word	0x0097	; ????
  5a:	99 00       	.word	0x0099	; ????
  5c:	9a 00       	.word	0x009a	; ????
  5e:	9a 00       	.word	0x009a	; ????
  60:	9a 00       	.word	0x009a	; ????
  62:	9a 00       	.word	0x009a	; ????
  64:	9a 00       	.word	0x009a	; ????
  66:	9a 00       	.word	0x009a	; ????
  68:	9a 00       	.word	0x009a	; ????
  6a:	9a 00       	.word	0x009a	; ????
  6c:	9a 00       	.word	0x009a	; ????
  6e:	9a 00       	.word	0x009a	; ????
  70:	9a 00       	.word	0x009a	; ????
  72:	9a 00       	.word	0x009a	; ????
  74:	9a 00       	.word	0x009a	; ????
  76:	9a 00       	.word	0x009a	; ????
  78:	9a 00       	.word	0x009a	; ????
  7a:	9a 00       	.word	0x009a	; ????
  7c:	9a 00       	.word	0x009a	; ????
  7e:	9a 00       	.word	0x009a	; ????
  80:	9a 00       	.word	0x009a	; ????
  82:	9a 00       	.word	0x009a	; ????
  84:	9a 00       	.word	0x009a	; ????
  86:	9a 00       	.word	0x009a	; ????
  88:	9a 00       	.word	0x009a	; ????
  8a:	9a 00       	.word	0x009a	; ????
  8c:	9a 00       	.word	0x009a	; ????
  8e:	9a 00       	.word	0x009a	; ????
  90:	9a 00       	.word	0x009a	; ????
  92:	9a 00       	.word	0x009a	; ????
  94:	93 00       	.word	0x0093	; ????
  96:	95 00       	.word	0x0095	; ????
  98:	97 00       	.word	0x0097	; ????
  9a:	99 00       	.word	0x0099	; ????
  9c:	a6 00       	.word	0x00a6	; ????
  9e:	a8 00       	.word	0x00a8	; ????
  a0:	aa 00       	.word	0x00aa	; ????
  a2:	ac 00       	.word	0x00ac	; ????
  a4:	ad 00       	.word	0x00ad	; ????
  a6:	ad 00       	.word	0x00ad	; ????
  a8:	ad 00       	.word	0x00ad	; ????
  aa:	ad 00       	.word	0x00ad	; ????
  ac:	ad 00       	.word	0x00ad	; ????
  ae:	ad 00       	.word	0x00ad	; ????
  b0:	ad 00       	.word	0x00ad	; ????
  b2:	ad 00       	.word	0x00ad	; ????
  b4:	ad 00       	.word	0x00ad	; ????
  b6:	ad 00       	.word	0x00ad	; ????
  b8:	ad 00       	.word	0x00ad	; ????
  ba:	ad 00       	.word	0x00ad	; ????
  bc:	ad 00       	.word	0x00ad	; ????
  be:	ad 00       	.word	0x00ad	; ????
  c0:	ad 00       	.word	0x00ad	; ????
  c2:	ad 00       	.word	0x00ad	; ????
  c4:	ad 00       	.word	0x00ad	; ????
  c6:	ad 00       	.word	0x00ad	; ????
  c8:	ad 00       	.word	0x00ad	; ????
  ca:	ad 00       	.word	0x00ad	; ????
  cc:	ad 00       	.word	0x00ad	; ????
  ce:	ad 00       	.word	0x00ad	; ????
  d0:	ad 00       	.word	0x00ad	; ????
  d2:	ad 00       	.word	0x00ad	; ????
  d4:	ad 00       	.word	0x00ad	; ????
  d6:	ad 00       	.word	0x00ad	; ????
  d8:	ad 00       	.word	0x00ad	; ????
  da:	ad 00       	.word	0x00ad	; ????
  dc:	a6 00       	.word	0x00a6	; ????
  de:	a8 00       	.word	0x00a8	; ????
  e0:	aa 00       	.word	0x00aa	; ????
  e2:	ac 00       	.word	0x00ac	; ????
  e4:	bc 00       	.word	0x00bc	; ????
  e6:	c0 00       	.word	0x00c0	; ????
  e8:	c4 00       	.word	0x00c4	; ????
  ea:	c8 00       	.word	0x00c8	; ????
  ec:	cc 00       	.word	0x00cc	; ????
  ee:	d0 00       	.word	0x00d0	; ????
  f0:	d4 00       	.word	0x00d4	; ????
  f2:	d8 00       	.word	0x00d8	; ????
  f4:	dc 00       	.word	0x00dc	; ????
  f6:	e0 00       	.word	0x00e0	; ????

000000f8 <__ctors_end>:
  f8:	11 24       	eor	r1, r1
  fa:	1f be       	out	0x3f, r1	; 63
  fc:	cf e5       	ldi	r28, 0x5F	; 95
  fe:	d8 e0       	ldi	r29, 0x08	; 8
 100:	de bf       	out	0x3e, r29	; 62
 102:	cd bf       	out	0x3d, r28	; 61
 104:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <main>
 108:	0c 94 0f 01 	jmp	0x21e	; 0x21e <_exit>

0000010c <__bad_interrupt>:
 10c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000110 <DIO_set_port_dir>:

//..................................................................................

void DIO_set_port_dir(unsigned char port, unsigned char direction)    //Function to set a specific pin direction 'I/P' or 'O/P'.
{
  switch (port)
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	fc 01       	movw	r30, r24
 114:	e1 54       	subi	r30, 0x41	; 65
 116:	f1 09       	sbc	r31, r1
 118:	e4 32       	cpi	r30, 0x24	; 36
 11a:	f1 05       	cpc	r31, r1
 11c:	58 f4       	brcc	.+22     	; 0x134 <DIO_set_port_dir+0x24>
 11e:	e6 5d       	subi	r30, 0xD6	; 214
 120:	ff 4f       	sbci	r31, 0xFF	; 255
 122:	0c 94 09 01 	jmp	0x212	; 0x212 <__tablejump2__>
  {
    case 'A':                    // @Port 'A'.
    case 'a':                    // @Port 'a'.
    DDRA = direction;            // Set the whole port as 'direction', (1>>'O/P') or (0>>'I/P').
 126:	6a bb       	out	0x1a, r22	; 26
    break;
 128:	08 95       	ret

    case 'B':                    // @Port 'B'.
    case 'b':                    // @Port 'b'.
    DDRB = direction;            // Set the whole port as 'direction', (1>>'O/P') or (0>>'I/P').
 12a:	67 bb       	out	0x17, r22	; 23
    break;
 12c:	08 95       	ret

    case 'C':                    // @Port 'C'.
    case 'c':                    // @Port 'c'. 
    DDRC = direction;            // Set the whole port as 'direction', (1>>'O/P') or (0>>'I/P').
 12e:	64 bb       	out	0x14, r22	; 20
    break;
 130:	08 95       	ret

    case 'D':                    // @Port 'D'.
    case 'd':                    // @Port 'd'. 
    DDRD = direction;            // Set the whole port as 'direction', (1>>'O/P') or (0>>'I/P').
 132:	61 bb       	out	0x11, r22	; 17
 134:	08 95       	ret

00000136 <DIO_write_port>:

//..................................................................................

void DIO_write_port(unsigned char port, unsigned char value)  //Set the 'O/P' Port as 'HIGH' or 'LOW'
{
  switch (port)
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	fc 01       	movw	r30, r24
 13a:	e1 54       	subi	r30, 0x41	; 65
 13c:	f1 09       	sbc	r31, r1
 13e:	e4 32       	cpi	r30, 0x24	; 36
 140:	f1 05       	cpc	r31, r1
 142:	58 f4       	brcc	.+22     	; 0x15a <DIO_write_port+0x24>
 144:	e2 5b       	subi	r30, 0xB2	; 178
 146:	ff 4f       	sbci	r31, 0xFF	; 255
 148:	0c 94 09 01 	jmp	0x212	; 0x212 <__tablejump2__>
  {
    case 'A':                  // @Port 'A'.
    case 'a':                  // @Port 'a'.
    PORTA = value;             // Set the whole port value as 'value'.
 14c:	6b bb       	out	0x1b, r22	; 27
    break;
 14e:	08 95       	ret
  
    case 'B':                  // @Port 'B'.
    case 'b':                  // @Port 'b'.
    PORTB = value;             // Set the whole port value as 'value'.
 150:	68 bb       	out	0x18, r22	; 24
    break;
 152:	08 95       	ret

    case 'C':                  // @Port 'C'.
    case 'c':                  // @Port 'c'.
    PORTC = value;             // Set the whole port value as 'value'.
 154:	65 bb       	out	0x15, r22	; 21
    break;
 156:	08 95       	ret
  
    case 'D':                  // @Port 'D'.
    case 'd':                  // @Port 'd'.
    PORTD = value;             // Set the whole port value as 'value'.
 158:	62 bb       	out	0x12, r22	; 18
 15a:	08 95       	ret

0000015c <sevenSEG_init>:

#include "DIO.h"

void sevenSEG_init (unsigned char port)
{
  DIO_set_port_dir(port, 0xff);      //Set 'PORT' as 'O/P'.
 15c:	6f ef       	ldi	r22, 0xFF	; 255
 15e:	0e 94 88 00 	call	0x110	; 0x110 <DIO_set_port_dir>
 162:	08 95       	ret

00000164 <sevenSEG_write_num>:
}


void sevenSEG_write_num (unsigned char port, unsigned char num)    //Function types 'NUMBERS' on the 7SEG.
{
  switch (num)
 164:	46 2f       	mov	r20, r22
 166:	50 e0       	ldi	r21, 0x00	; 0
 168:	4a 30       	cpi	r20, 0x0A	; 10
 16a:	51 05       	cpc	r21, r1
 16c:	60 f5       	brcc	.+88     	; 0x1c6 <sevenSEG_write_num+0x62>
 16e:	fa 01       	movw	r30, r20
 170:	ee 58       	subi	r30, 0x8E	; 142
 172:	ff 4f       	sbci	r31, 0xFF	; 255
 174:	0c 94 09 01 	jmp	0x212	; 0x212 <__tablejump2__>
  {
    case 0:
    DIO_write_port(port, 0x3F);    //Type '0' on the 7SEG.
 178:	6f e3       	ldi	r22, 0x3F	; 63
 17a:	0e 94 9b 00 	call	0x136	; 0x136 <DIO_write_port>
    break;
 17e:	08 95       	ret

    case 1:
    DIO_write_port(port, 0x06);    //Type '1' on the 7SEG.
 180:	66 e0       	ldi	r22, 0x06	; 6
 182:	0e 94 9b 00 	call	0x136	; 0x136 <DIO_write_port>
    break;
 186:	08 95       	ret

    case 2:
    DIO_write_port(port, 0x5b);    //Type '2' on the 7SEG.
 188:	6b e5       	ldi	r22, 0x5B	; 91
 18a:	0e 94 9b 00 	call	0x136	; 0x136 <DIO_write_port>
    break;
 18e:	08 95       	ret

    case 3:
    DIO_write_port(port, 0x4F);    //Type '3' on the 7SEG.
 190:	6f e4       	ldi	r22, 0x4F	; 79
 192:	0e 94 9b 00 	call	0x136	; 0x136 <DIO_write_port>
    break;
 196:	08 95       	ret

    case 4:
    DIO_write_port(port, 0x66);    //Type '4' on the 7SEG.
 198:	66 e6       	ldi	r22, 0x66	; 102
 19a:	0e 94 9b 00 	call	0x136	; 0x136 <DIO_write_port>
    break;
 19e:	08 95       	ret

    case 5:
    DIO_write_port(port, 0x6D);    //Type '5' on the 7SEG.
 1a0:	6d e6       	ldi	r22, 0x6D	; 109
 1a2:	0e 94 9b 00 	call	0x136	; 0x136 <DIO_write_port>
    break;
 1a6:	08 95       	ret

    case 6:
    DIO_write_port(port, 0x7D);    //Type '6' on the 7SEG.
 1a8:	6d e7       	ldi	r22, 0x7D	; 125
 1aa:	0e 94 9b 00 	call	0x136	; 0x136 <DIO_write_port>
    break;
 1ae:	08 95       	ret

    case 7:
    DIO_write_port(port, 0x47);    //Type '7' on the 7SEG.
 1b0:	67 e4       	ldi	r22, 0x47	; 71
 1b2:	0e 94 9b 00 	call	0x136	; 0x136 <DIO_write_port>
    break;
 1b6:	08 95       	ret

    case 8:
    DIO_write_port(port, 0x7F);    //Type '8' on the 7SEG.
 1b8:	6f e7       	ldi	r22, 0x7F	; 127
 1ba:	0e 94 9b 00 	call	0x136	; 0x136 <DIO_write_port>
    break;
 1be:	08 95       	ret

    case 9:
    DIO_write_port(port, 0x6F);    //Type '9' on the 7SEG.
 1c0:	6f e6       	ldi	r22, 0x6F	; 111
 1c2:	0e 94 9b 00 	call	0x136	; 0x136 <DIO_write_port>
 1c6:	08 95       	ret

000001c8 <main>:
#define seg_port 'A'

int main(void)
{
	unsigned char count = 0;
	sevenSEG_init(seg_port);
 1c8:	81 e4       	ldi	r24, 0x41	; 65
 1ca:	0e 94 ae 00 	call	0x15c	; 0x15c <sevenSEG_init>
	
    while(1)
    {
        sevenSEG_write_num(seg_port, count);	
 1ce:	60 e0       	ldi	r22, 0x00	; 0
 1d0:	81 e4       	ldi	r24, 0x41	; 65
 1d2:	0e 94 b2 00 	call	0x164	; 0x164 <sevenSEG_write_num>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1d6:	2f ef       	ldi	r18, 0xFF	; 255
 1d8:	89 e6       	ldi	r24, 0x69	; 105
 1da:	98 e1       	ldi	r25, 0x18	; 24
 1dc:	21 50       	subi	r18, 0x01	; 1
 1de:	80 40       	sbci	r24, 0x00	; 0
 1e0:	90 40       	sbci	r25, 0x00	; 0
 1e2:	e1 f7       	brne	.-8      	; 0x1dc <main+0x14>
 1e4:	00 c0       	rjmp	.+0      	; 0x1e6 <main+0x1e>
 1e6:	00 00       	nop
		_delay_ms(1000);
		count ++;
 1e8:	c1 e0       	ldi	r28, 0x01	; 1
		
		if (count >= 10)
		{
			count = 0;
 1ea:	d0 e0       	ldi	r29, 0x00	; 0
 1ec:	01 c0       	rjmp	.+2      	; 0x1f0 <main+0x28>
 1ee:	cd 2f       	mov	r28, r29
	unsigned char count = 0;
	sevenSEG_init(seg_port);
	
    while(1)
    {
        sevenSEG_write_num(seg_port, count);	
 1f0:	6c 2f       	mov	r22, r28
 1f2:	81 e4       	ldi	r24, 0x41	; 65
 1f4:	0e 94 b2 00 	call	0x164	; 0x164 <sevenSEG_write_num>
 1f8:	2f ef       	ldi	r18, 0xFF	; 255
 1fa:	89 e6       	ldi	r24, 0x69	; 105
 1fc:	98 e1       	ldi	r25, 0x18	; 24
 1fe:	21 50       	subi	r18, 0x01	; 1
 200:	80 40       	sbci	r24, 0x00	; 0
 202:	90 40       	sbci	r25, 0x00	; 0
 204:	e1 f7       	brne	.-8      	; 0x1fe <main+0x36>
 206:	00 c0       	rjmp	.+0      	; 0x208 <main+0x40>
 208:	00 00       	nop
		_delay_ms(1000);
		count ++;
 20a:	cf 5f       	subi	r28, 0xFF	; 255
		
		if (count >= 10)
 20c:	ca 30       	cpi	r28, 0x0A	; 10
 20e:	78 f7       	brcc	.-34     	; 0x1ee <main+0x26>
 210:	ef cf       	rjmp	.-34     	; 0x1f0 <main+0x28>

00000212 <__tablejump2__>:
 212:	ee 0f       	add	r30, r30
 214:	ff 1f       	adc	r31, r31

00000216 <__tablejump__>:
 216:	05 90       	lpm	r0, Z+
 218:	f4 91       	lpm	r31, Z
 21a:	e0 2d       	mov	r30, r0
 21c:	09 94       	ijmp

0000021e <_exit>:
 21e:	f8 94       	cli

00000220 <__stop_program>:
 220:	ff cf       	rjmp	.-2      	; 0x220 <__stop_program>
