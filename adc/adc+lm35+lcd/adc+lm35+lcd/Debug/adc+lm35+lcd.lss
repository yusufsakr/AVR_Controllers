
adc+lm35+lcd.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000b06  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  00000b06  00000b9a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800068  00800068  00000ba2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000ba2  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000118  00000000  00000000  00000bd2  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002078  00000000  00000000  00000cea  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000440  00000000  00000000  00002d62  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000064f  00000000  00000000  000031a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001dc  00000000  00000000  000037f4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000032a  00000000  00000000  000039d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000e50  00000000  00000000  00003cfa  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000d8  00000000  00000000  00004b4a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 c2 00 	jmp	0x184	; 0x184 <__ctors_end>
   4:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
   8:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
   c:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
  10:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
  14:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
  18:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
  1c:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
  20:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
  24:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
  28:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
  2c:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
  30:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
  34:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
  38:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
  3c:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
  40:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
  44:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
  48:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
  4c:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
  50:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
  54:	99 01       	movw	r18, r18
  56:	9d 01       	movw	r18, r26
  58:	a1 01       	movw	r20, r2
  5a:	a5 01       	movw	r20, r10
  5c:	a9 01       	movw	r20, r18
  5e:	ad 01       	movw	r20, r26
  60:	b1 01       	movw	r22, r2
  62:	b5 01       	movw	r22, r10
  64:	c5 01       	movw	r24, r10
  66:	e2 01       	movw	r28, r4
  68:	ff 01       	movw	r30, r30
  6a:	1c 02       	muls	r17, r28
  6c:	38 02       	muls	r19, r24
  6e:	38 02       	muls	r19, r24
  70:	38 02       	muls	r19, r24
  72:	38 02       	muls	r19, r24
  74:	38 02       	muls	r19, r24
  76:	38 02       	muls	r19, r24
  78:	38 02       	muls	r19, r24
  7a:	38 02       	muls	r19, r24
  7c:	38 02       	muls	r19, r24
  7e:	38 02       	muls	r19, r24
  80:	38 02       	muls	r19, r24
  82:	38 02       	muls	r19, r24
  84:	38 02       	muls	r19, r24
  86:	38 02       	muls	r19, r24
  88:	38 02       	muls	r19, r24
  8a:	38 02       	muls	r19, r24
  8c:	38 02       	muls	r19, r24
  8e:	38 02       	muls	r19, r24
  90:	38 02       	muls	r19, r24
  92:	38 02       	muls	r19, r24
  94:	38 02       	muls	r19, r24
  96:	38 02       	muls	r19, r24
  98:	38 02       	muls	r19, r24
  9a:	38 02       	muls	r19, r24
  9c:	38 02       	muls	r19, r24
  9e:	38 02       	muls	r19, r24
  a0:	38 02       	muls	r19, r24
  a2:	38 02       	muls	r19, r24
  a4:	c5 01       	movw	r24, r10
  a6:	e2 01       	movw	r28, r4
  a8:	ff 01       	movw	r30, r30
  aa:	1c 02       	muls	r17, r28
  ac:	45 02       	muls	r20, r21
  ae:	62 02       	muls	r22, r18
  b0:	7f 02       	muls	r23, r31
  b2:	9c 02       	muls	r25, r28
  b4:	b8 02       	muls	r27, r24
  b6:	b8 02       	muls	r27, r24
  b8:	b8 02       	muls	r27, r24
  ba:	b8 02       	muls	r27, r24
  bc:	b8 02       	muls	r27, r24
  be:	b8 02       	muls	r27, r24
  c0:	b8 02       	muls	r27, r24
  c2:	b8 02       	muls	r27, r24
  c4:	b8 02       	muls	r27, r24
  c6:	b8 02       	muls	r27, r24
  c8:	b8 02       	muls	r27, r24
  ca:	b8 02       	muls	r27, r24
  cc:	b8 02       	muls	r27, r24
  ce:	b8 02       	muls	r27, r24
  d0:	b8 02       	muls	r27, r24
  d2:	b8 02       	muls	r27, r24
  d4:	b8 02       	muls	r27, r24
  d6:	b8 02       	muls	r27, r24
  d8:	b8 02       	muls	r27, r24
  da:	b8 02       	muls	r27, r24
  dc:	b8 02       	muls	r27, r24
  de:	b8 02       	muls	r27, r24
  e0:	b8 02       	muls	r27, r24
  e2:	b8 02       	muls	r27, r24
  e4:	b8 02       	muls	r27, r24
  e6:	b8 02       	muls	r27, r24
  e8:	b8 02       	muls	r27, r24
  ea:	b8 02       	muls	r27, r24
  ec:	45 02       	muls	r20, r21
  ee:	62 02       	muls	r22, r18
  f0:	7f 02       	muls	r23, r31
  f2:	9c 02       	muls	r25, r28
  f4:	c8 02       	muls	r28, r24
  f6:	cf 02       	muls	r28, r31
  f8:	d6 02       	muls	r29, r22
  fa:	dd 02       	muls	r29, r29
  fc:	0e 03       	fmul	r16, r22
  fe:	0e 03       	fmul	r16, r22
 100:	0e 03       	fmul	r16, r22
 102:	0e 03       	fmul	r16, r22
 104:	0e 03       	fmul	r16, r22
 106:	0e 03       	fmul	r16, r22
 108:	0e 03       	fmul	r16, r22
 10a:	0e 03       	fmul	r16, r22
 10c:	0e 03       	fmul	r16, r22
 10e:	0e 03       	fmul	r16, r22
 110:	0e 03       	fmul	r16, r22
 112:	0e 03       	fmul	r16, r22
 114:	0e 03       	fmul	r16, r22
 116:	0e 03       	fmul	r16, r22
 118:	0e 03       	fmul	r16, r22
 11a:	0e 03       	fmul	r16, r22
 11c:	0e 03       	fmul	r16, r22
 11e:	0e 03       	fmul	r16, r22
 120:	0e 03       	fmul	r16, r22
 122:	0e 03       	fmul	r16, r22
 124:	0e 03       	fmul	r16, r22
 126:	0e 03       	fmul	r16, r22
 128:	0e 03       	fmul	r16, r22
 12a:	0e 03       	fmul	r16, r22
 12c:	0e 03       	fmul	r16, r22
 12e:	0e 03       	fmul	r16, r22
 130:	0e 03       	fmul	r16, r22
 132:	0e 03       	fmul	r16, r22
 134:	c8 02       	muls	r28, r24
 136:	cf 02       	muls	r28, r31
 138:	d6 02       	muls	r29, r22
 13a:	dd 02       	muls	r29, r29
 13c:	f3 02       	muls	r31, r19
 13e:	fa 02       	muls	r31, r26
 140:	01 03       	mulsu	r16, r17
 142:	08 03       	fmul	r16, r16
 144:	0e 03       	fmul	r16, r22
 146:	0e 03       	fmul	r16, r22
 148:	0e 03       	fmul	r16, r22
 14a:	0e 03       	fmul	r16, r22
 14c:	0e 03       	fmul	r16, r22
 14e:	0e 03       	fmul	r16, r22
 150:	0e 03       	fmul	r16, r22
 152:	0e 03       	fmul	r16, r22
 154:	0e 03       	fmul	r16, r22
 156:	0e 03       	fmul	r16, r22
 158:	0e 03       	fmul	r16, r22
 15a:	0e 03       	fmul	r16, r22
 15c:	0e 03       	fmul	r16, r22
 15e:	0e 03       	fmul	r16, r22
 160:	0e 03       	fmul	r16, r22
 162:	0e 03       	fmul	r16, r22
 164:	0e 03       	fmul	r16, r22
 166:	0e 03       	fmul	r16, r22
 168:	0e 03       	fmul	r16, r22
 16a:	0e 03       	fmul	r16, r22
 16c:	0e 03       	fmul	r16, r22
 16e:	0e 03       	fmul	r16, r22
 170:	0e 03       	fmul	r16, r22
 172:	0e 03       	fmul	r16, r22
 174:	0e 03       	fmul	r16, r22
 176:	0e 03       	fmul	r16, r22
 178:	0e 03       	fmul	r16, r22
 17a:	0e 03       	fmul	r16, r22
 17c:	f3 02       	muls	r31, r19
 17e:	fa 02       	muls	r31, r26
 180:	01 03       	mulsu	r16, r17
 182:	08 03       	fmul	r16, r16

00000184 <__ctors_end>:
 184:	11 24       	eor	r1, r1
 186:	1f be       	out	0x3f, r1	; 63
 188:	cf e5       	ldi	r28, 0x5F	; 95
 18a:	d8 e0       	ldi	r29, 0x08	; 8
 18c:	de bf       	out	0x3e, r29	; 62
 18e:	cd bf       	out	0x3d, r28	; 61

00000190 <__do_copy_data>:
 190:	10 e0       	ldi	r17, 0x00	; 0
 192:	a0 e6       	ldi	r26, 0x60	; 96
 194:	b0 e0       	ldi	r27, 0x00	; 0
 196:	e6 e0       	ldi	r30, 0x06	; 6
 198:	fb e0       	ldi	r31, 0x0B	; 11
 19a:	02 c0       	rjmp	.+4      	; 0x1a0 <__do_copy_data+0x10>
 19c:	05 90       	lpm	r0, Z+
 19e:	0d 92       	st	X+, r0
 1a0:	a8 36       	cpi	r26, 0x68	; 104
 1a2:	b1 07       	cpc	r27, r17
 1a4:	d9 f7       	brne	.-10     	; 0x19c <__do_copy_data+0xc>

000001a6 <__do_clear_bss>:
 1a6:	20 e0       	ldi	r18, 0x00	; 0
 1a8:	a8 e6       	ldi	r26, 0x68	; 104
 1aa:	b0 e0       	ldi	r27, 0x00	; 0
 1ac:	01 c0       	rjmp	.+2      	; 0x1b0 <.do_clear_bss_start>

000001ae <.do_clear_bss_loop>:
 1ae:	1d 92       	st	X+, r1

000001b0 <.do_clear_bss_start>:
 1b0:	aa 36       	cpi	r26, 0x6A	; 106
 1b2:	b2 07       	cpc	r27, r18
 1b4:	e1 f7       	brne	.-8      	; 0x1ae <.do_clear_bss_loop>
 1b6:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <main>
 1ba:	0c 94 81 05 	jmp	0xb02	; 0xb02 <_exit>

000001be <__bad_interrupt>:
 1be:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001c2 <main>:

signed short temp = 0;

int main(void)
{
	LCD_init();
 1c2:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <LCD_init>
	ADC_init();
 1c6:	0e 94 81 01 	call	0x302	; 0x302 <ADC_init>
	
	LCD_send_string("Temp : ");
 1ca:	80 e6       	ldi	r24, 0x60	; 96
 1cc:	90 e0       	ldi	r25, 0x00	; 0
 1ce:	0e 94 03 04 	call	0x806	; 0x806 <LCD_send_string>
			LCD_send_char ('C');
		}
		else if (temp >= 100)
		{
			LCD_move_cursor (1, 8);
			LCD_send_char((temp/100) + 48);
 1d2:	0f 2e       	mov	r0, r31
 1d4:	f4 e6       	ldi	r31, 0x64	; 100
 1d6:	ef 2e       	mov	r14, r31
 1d8:	f1 2c       	mov	r15, r1
 1da:	f0 2d       	mov	r31, r0
			LCD_send_char((temp/10) + 38);
 1dc:	ca e0       	ldi	r28, 0x0A	; 10
 1de:	d0 e0       	ldi	r29, 0x00	; 0
		{
			LCD_move_cursor (1, 11);
			LCD_send_char(' ');
			LCD_send_char(' ');
			LCD_move_cursor (1, 8);
			LCD_send_char (temp + 48);
 1e0:	08 e6       	ldi	r16, 0x68	; 104
 1e2:	10 e0       	ldi	r17, 0x00	; 0
	
	LCD_send_string("Temp : ");
	
    while(1)
    {
		ADC_pin(lm35_pin);
 1e4:	81 e0       	ldi	r24, 0x01	; 1
 1e6:	0e 94 90 01 	call	0x320	; 0x320 <ADC_pin>
		temp = 0.25 * ADC_read();
 1ea:	0e 94 88 01 	call	0x310	; 0x310 <ADC_read>
 1ee:	bc 01       	movw	r22, r24
 1f0:	80 e0       	ldi	r24, 0x00	; 0
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	0e 94 62 04 	call	0x8c4	; 0x8c4 <__floatunsisf>
 1f8:	20 e0       	ldi	r18, 0x00	; 0
 1fa:	30 e0       	ldi	r19, 0x00	; 0
 1fc:	40 e8       	ldi	r20, 0x80	; 128
 1fe:	5e e3       	ldi	r21, 0x3E	; 62
 200:	0e 94 c8 04 	call	0x990	; 0x990 <__mulsf3>
 204:	0e 94 31 04 	call	0x862	; 0x862 <__fixsfsi>
 208:	9b 01       	movw	r18, r22
 20a:	70 93 69 00 	sts	0x0069, r23
 20e:	60 93 68 00 	sts	0x0068, r22
		if (temp < 10)
 212:	6a 30       	cpi	r22, 0x0A	; 10
 214:	71 05       	cpc	r23, r1
 216:	d4 f4       	brge	.+52     	; 0x24c <main+0x8a>
		{
			LCD_move_cursor (1, 11);
 218:	6b e0       	ldi	r22, 0x0B	; 11
 21a:	81 e0       	ldi	r24, 0x01	; 1
 21c:	0e 94 12 04 	call	0x824	; 0x824 <LCD_move_cursor>
			LCD_send_char(' ');
 220:	80 e2       	ldi	r24, 0x20	; 32
 222:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <LCD_send_char>
			LCD_send_char(' ');
 226:	80 e2       	ldi	r24, 0x20	; 32
 228:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <LCD_send_char>
			LCD_move_cursor (1, 8);
 22c:	68 e0       	ldi	r22, 0x08	; 8
 22e:	81 e0       	ldi	r24, 0x01	; 1
 230:	0e 94 12 04 	call	0x824	; 0x824 <LCD_move_cursor>
			LCD_send_char (temp + 48);
 234:	f8 01       	movw	r30, r16
 236:	80 81       	ld	r24, Z
 238:	80 5d       	subi	r24, 0xD0	; 208
 23a:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <LCD_send_char>
			LCD_send_char (0xDF);
 23e:	8f ed       	ldi	r24, 0xDF	; 223
 240:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <LCD_send_char>
			LCD_send_char ('C');
 244:	83 e4       	ldi	r24, 0x43	; 67
 246:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <LCD_send_char>
 24a:	cc cf       	rjmp	.-104    	; 0x1e4 <main+0x22>
		}
		else if((temp >= 10) && (temp < 100))
 24c:	6a 50       	subi	r22, 0x0A	; 10
 24e:	71 09       	sbc	r23, r1
 250:	6a 35       	cpi	r22, 0x5A	; 90
 252:	71 05       	cpc	r23, r1
 254:	38 f5       	brcc	.+78     	; 0x2a4 <main+0xe2>
		{
			LCD_move_cursor (1, 12);
 256:	6c e0       	ldi	r22, 0x0C	; 12
 258:	81 e0       	ldi	r24, 0x01	; 1
 25a:	0e 94 12 04 	call	0x824	; 0x824 <LCD_move_cursor>
			LCD_send_char(' ');
 25e:	80 e2       	ldi	r24, 0x20	; 32
 260:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <LCD_send_char>
			LCD_move_cursor (1, 8);
 264:	68 e0       	ldi	r22, 0x08	; 8
 266:	81 e0       	ldi	r24, 0x01	; 1
 268:	0e 94 12 04 	call	0x824	; 0x824 <LCD_move_cursor>
			LCD_send_char((temp/10) + 48);
 26c:	80 91 68 00 	lds	r24, 0x0068
 270:	90 91 69 00 	lds	r25, 0x0069
 274:	be 01       	movw	r22, r28
 276:	0e 94 53 05 	call	0xaa6	; 0xaa6 <__divmodhi4>
 27a:	80 e3       	ldi	r24, 0x30	; 48
 27c:	86 0f       	add	r24, r22
 27e:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <LCD_send_char>
			LCD_send_char((temp%10) + 48);
 282:	80 91 68 00 	lds	r24, 0x0068
 286:	90 91 69 00 	lds	r25, 0x0069
 28a:	be 01       	movw	r22, r28
 28c:	0e 94 53 05 	call	0xaa6	; 0xaa6 <__divmodhi4>
 290:	80 5d       	subi	r24, 0xD0	; 208
 292:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <LCD_send_char>
			LCD_send_char (0xDF);
 296:	8f ed       	ldi	r24, 0xDF	; 223
 298:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <LCD_send_char>
			LCD_send_char ('C');
 29c:	83 e4       	ldi	r24, 0x43	; 67
 29e:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <LCD_send_char>
 2a2:	a0 cf       	rjmp	.-192    	; 0x1e4 <main+0x22>
		}
		else if (temp >= 100)
 2a4:	24 36       	cpi	r18, 0x64	; 100
 2a6:	31 05       	cpc	r19, r1
 2a8:	0c f4       	brge	.+2      	; 0x2ac <main+0xea>
 2aa:	9c cf       	rjmp	.-200    	; 0x1e4 <main+0x22>
		{
			LCD_move_cursor (1, 8);
 2ac:	68 e0       	ldi	r22, 0x08	; 8
 2ae:	81 e0       	ldi	r24, 0x01	; 1
 2b0:	0e 94 12 04 	call	0x824	; 0x824 <LCD_move_cursor>
			LCD_send_char((temp/100) + 48);
 2b4:	80 91 68 00 	lds	r24, 0x0068
 2b8:	90 91 69 00 	lds	r25, 0x0069
 2bc:	b7 01       	movw	r22, r14
 2be:	0e 94 53 05 	call	0xaa6	; 0xaa6 <__divmodhi4>
 2c2:	80 e3       	ldi	r24, 0x30	; 48
 2c4:	86 0f       	add	r24, r22
 2c6:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <LCD_send_char>
			LCD_send_char((temp/10) + 38);
 2ca:	80 91 68 00 	lds	r24, 0x0068
 2ce:	90 91 69 00 	lds	r25, 0x0069
 2d2:	be 01       	movw	r22, r28
 2d4:	0e 94 53 05 	call	0xaa6	; 0xaa6 <__divmodhi4>
 2d8:	86 e2       	ldi	r24, 0x26	; 38
 2da:	86 0f       	add	r24, r22
 2dc:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <LCD_send_char>
			LCD_send_char((temp%10) + 48);
 2e0:	80 91 68 00 	lds	r24, 0x0068
 2e4:	90 91 69 00 	lds	r25, 0x0069
 2e8:	be 01       	movw	r22, r28
 2ea:	0e 94 53 05 	call	0xaa6	; 0xaa6 <__divmodhi4>
 2ee:	80 5d       	subi	r24, 0xD0	; 208
 2f0:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <LCD_send_char>
			LCD_send_char (0xDF);
 2f4:	8f ed       	ldi	r24, 0xDF	; 223
 2f6:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <LCD_send_char>
			LCD_send_char ('C');
 2fa:	83 e4       	ldi	r24, 0x43	; 67
 2fc:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <LCD_send_char>
 300:	71 cf       	rjmp	.-286    	; 0x1e4 <main+0x22>

00000302 <ADC_init>:
#include "my_macros.h"
#include "ADC.h"

void ADC_init ()
{
  SET_BIT (ADMUX, REFS0);    //Configure Volt as Internal 2.56V + Cap. @AREF pin.
 302:	3e 9a       	sbi	0x07, 6	; 7
  SET_BIT (ADMUX, REFS1);
 304:	3f 9a       	sbi	0x07, 7	; 7
  SET_BIT (ADCSRA, ADEN);    //Enable the ADC Bit.
 306:	37 9a       	sbi	0x06, 7	; 6
  SET_BIT (ADCSRA, ADPS0);
  CLR_BIT (ADCSRA, ADPS1);
  SET_BIT (ADCSRA, ADPS2);

  #elif defined Div_factor_64
  CLR_BIT (ADCSRA, ADPS0);
 308:	30 98       	cbi	0x06, 0	; 6
  SET_BIT (ADCSRA, ADPS1);
 30a:	31 9a       	sbi	0x06, 1	; 6
  SET_BIT (ADCSRA, ADPS2);
 30c:	32 9a       	sbi	0x06, 2	; 6
 30e:	08 95       	ret

00000310 <ADC_read>:

unsigned short ADC_read ()
{
	unsigned short ADC_val;             //Declaring the Converted value from ADC Holder.
	
	SET_BIT (ADCSRA, ADSC);              //Start The Conversion from ADC.
 310:	36 9a       	sbi	0x06, 6	; 6
	
	while (IS_BIT_CLR(ADCSRA, ADIF)) ;   //Stand-Still While ADC Conversion.
 312:	86 b1       	in	r24, 0x06	; 6
	
	SET_BIT(ADCSRA, ADIF);               //Clear the Flag Bit of ADC.
 314:	34 9a       	sbi	0x06, 4	; 6
	
	ADC_val = (ADCL);                    // Reading the Low Value from ADC.
 316:	84 b1       	in	r24, 0x04	; 4
	ADC_val |= (ADCH<<8);                // Reading the High Value from ADC.
 318:	25 b1       	in	r18, 0x05	; 5
 31a:	90 e0       	ldi	r25, 0x00	; 0
	
	return ADC_val;           
}
 31c:	92 2b       	or	r25, r18
 31e:	08 95       	ret

00000320 <ADC_pin>:

//.......................................................................

void ADC_pin (unsigned char pin)
{
	switch (pin)
 320:	90 e0       	ldi	r25, 0x00	; 0
 322:	88 30       	cpi	r24, 0x08	; 8
 324:	91 05       	cpc	r25, r1
 326:	20 f5       	brcc	.+72     	; 0x370 <ADC_pin+0x50>
 328:	fc 01       	movw	r30, r24
 32a:	e6 5d       	subi	r30, 0xD6	; 214
 32c:	ff 4f       	sbci	r31, 0xFF	; 255
 32e:	0c 94 67 05 	jmp	0xace	; 0xace <__tablejump2__>
	{
		case 0 :
		CLR_BIT(ADMUX, MUX0);
 332:	38 98       	cbi	0x07, 0	; 7
		CLR_BIT(ADMUX, MUX1);
 334:	39 98       	cbi	0x07, 1	; 7
		CLR_BIT(ADMUX, MUX2);
 336:	3a 98       	cbi	0x07, 2	; 7
		//CLR_BIT(ADMUX, MUX3);
		//CLR_BIT(ADMUX, MUX4);
		break;
 338:	08 95       	ret
		
		case 1 :
		SET_BIT(ADMUX, MUX0);
 33a:	38 9a       	sbi	0x07, 0	; 7
		CLR_BIT(ADMUX, MUX1);
 33c:	39 98       	cbi	0x07, 1	; 7
		CLR_BIT(ADMUX, MUX2);
 33e:	3a 98       	cbi	0x07, 2	; 7
		//CLR_BIT(ADMUX, 3);
		//CLR_BIT(ADMUX, 4);
		break;
 340:	08 95       	ret
		
		case 2 :
		CLR_BIT(ADMUX, MUX0);
 342:	38 98       	cbi	0x07, 0	; 7
		SET_BIT(ADMUX, MUX1);
 344:	39 9a       	sbi	0x07, 1	; 7
		CLR_BIT(ADMUX, MUX2);
 346:	3a 98       	cbi	0x07, 2	; 7
		//CLR_BIT(ADMUX, 3);
		//CLR_BIT(ADMUX, 4);
		break;
 348:	08 95       	ret
		
		case 3 :
		SET_BIT(ADMUX, MUX0);
 34a:	38 9a       	sbi	0x07, 0	; 7
		SET_BIT(ADMUX, MUX1);
 34c:	39 9a       	sbi	0x07, 1	; 7
		CLR_BIT(ADMUX, MUX2);
 34e:	3a 98       	cbi	0x07, 2	; 7
		//CLR_BIT(ADMUX, 3);
		//CLR_BIT(ADMUX, 4);
		break;
 350:	08 95       	ret
		
		case 4 :
		CLR_BIT(ADMUX, MUX0);
 352:	38 98       	cbi	0x07, 0	; 7
		CLR_BIT(ADMUX, MUX1);
 354:	39 98       	cbi	0x07, 1	; 7
		SET_BIT(ADMUX, MUX2);
 356:	3a 9a       	sbi	0x07, 2	; 7
		//CLR_BIT(ADMUX, 3);
		//CLR_BIT(ADMUX, 4);
		break;
 358:	08 95       	ret
		
		case 5 :
		SET_BIT(ADMUX, MUX0);
 35a:	38 9a       	sbi	0x07, 0	; 7
		CLR_BIT(ADMUX, MUX1);
 35c:	39 98       	cbi	0x07, 1	; 7
		SET_BIT(ADMUX, MUX2);
 35e:	3a 9a       	sbi	0x07, 2	; 7
		//CLR_BIT(ADMUX, 3);
		//CLR_BIT(ADMUX, 4);
		break;
 360:	08 95       	ret
		
		case 6 :
		CLR_BIT(ADMUX, MUX0);
 362:	38 98       	cbi	0x07, 0	; 7
		SET_BIT(ADMUX, MUX1);
 364:	39 9a       	sbi	0x07, 1	; 7
		SET_BIT(ADMUX, MUX2);
 366:	3a 9a       	sbi	0x07, 2	; 7
		//CLR_BIT(ADMUX, 3);
		//CLR_BIT(ADMUX, 4);
		break;
 368:	08 95       	ret
		
		case 7 :
		SET_BIT(ADMUX, MUX0);
 36a:	38 9a       	sbi	0x07, 0	; 7
		SET_BIT(ADMUX, MUX1);
 36c:	39 9a       	sbi	0x07, 1	; 7
		SET_BIT(ADMUX, MUX2);
 36e:	3a 9a       	sbi	0x07, 2	; 7
 370:	08 95       	ret

00000372 <DIO_set_pin_dir>:
#include <avr/io.h> 
#include "my_macros.h"      //My standard  bit macros impelimentation.

void DIO_set_pin_dir(unsigned char port, unsigned char pin, unsigned char direction)    //Function to set a specific pin direction 'I/P'(@direction=0) or 'O/P'(@direction=1).
{
  switch (port)
 372:	90 e0       	ldi	r25, 0x00	; 0
 374:	fc 01       	movw	r30, r24
 376:	e1 54       	subi	r30, 0x41	; 65
 378:	f1 09       	sbc	r31, r1
 37a:	e4 32       	cpi	r30, 0x24	; 36
 37c:	f1 05       	cpc	r31, r1
 37e:	08 f0       	brcs	.+2      	; 0x382 <DIO_set_pin_dir+0x10>
 380:	77 c0       	rjmp	.+238    	; 0x470 <DIO_set_pin_dir+0xfe>
 382:	ee 5c       	subi	r30, 0xCE	; 206
 384:	ff 4f       	sbci	r31, 0xFF	; 255
 386:	0c 94 67 05 	jmp	0xace	; 0xace <__tablejump2__>
  {
    case 'A':                     // @Port 'A'.
    case 'a':                     // @Port 'a'.
    if (1== direction)            // '1' is for 'I/P'.
 38a:	41 30       	cpi	r20, 0x01	; 1
 38c:	69 f4       	brne	.+26     	; 0x3a8 <DIO_set_pin_dir+0x36>
    {
      SET_BIT(DDRA, pin);         // Set the pin 'PIN' in port 'A' as 'O/P'.
 38e:	2a b3       	in	r18, 0x1a	; 26
 390:	81 e0       	ldi	r24, 0x01	; 1
 392:	90 e0       	ldi	r25, 0x00	; 0
 394:	ac 01       	movw	r20, r24
 396:	02 c0       	rjmp	.+4      	; 0x39c <DIO_set_pin_dir+0x2a>
 398:	44 0f       	add	r20, r20
 39a:	55 1f       	adc	r21, r21
 39c:	6a 95       	dec	r22
 39e:	e2 f7       	brpl	.-8      	; 0x398 <DIO_set_pin_dir+0x26>
 3a0:	ba 01       	movw	r22, r20
 3a2:	62 2b       	or	r22, r18
 3a4:	6a bb       	out	0x1a, r22	; 26
 3a6:	08 95       	ret
    }
    else
    {
      CLR_BIT(DDRA, pin);        // Set the pin 'PIN' in port 'A' as 'I/P'.
 3a8:	2a b3       	in	r18, 0x1a	; 26
 3aa:	81 e0       	ldi	r24, 0x01	; 1
 3ac:	90 e0       	ldi	r25, 0x00	; 0
 3ae:	ac 01       	movw	r20, r24
 3b0:	02 c0       	rjmp	.+4      	; 0x3b6 <DIO_set_pin_dir+0x44>
 3b2:	44 0f       	add	r20, r20
 3b4:	55 1f       	adc	r21, r21
 3b6:	6a 95       	dec	r22
 3b8:	e2 f7       	brpl	.-8      	; 0x3b2 <DIO_set_pin_dir+0x40>
 3ba:	ba 01       	movw	r22, r20
 3bc:	60 95       	com	r22
 3be:	62 23       	and	r22, r18
 3c0:	6a bb       	out	0x1a, r22	; 26
 3c2:	08 95       	ret
    } 
    break;

    case 'B':                    // @Port 'B'.
    case 'b':                    // @Port 'b'.
    if (1==direction)            // '1' is for 'I/P'.
 3c4:	41 30       	cpi	r20, 0x01	; 1
 3c6:	69 f4       	brne	.+26     	; 0x3e2 <DIO_set_pin_dir+0x70>
    {
      SET_BIT(DDRB, pin);        // Set the pin 'PIN' in port 'B' as 'I/P'.
 3c8:	27 b3       	in	r18, 0x17	; 23
 3ca:	81 e0       	ldi	r24, 0x01	; 1
 3cc:	90 e0       	ldi	r25, 0x00	; 0
 3ce:	ac 01       	movw	r20, r24
 3d0:	02 c0       	rjmp	.+4      	; 0x3d6 <DIO_set_pin_dir+0x64>
 3d2:	44 0f       	add	r20, r20
 3d4:	55 1f       	adc	r21, r21
 3d6:	6a 95       	dec	r22
 3d8:	e2 f7       	brpl	.-8      	; 0x3d2 <DIO_set_pin_dir+0x60>
 3da:	ba 01       	movw	r22, r20
 3dc:	62 2b       	or	r22, r18
 3de:	67 bb       	out	0x17, r22	; 23
 3e0:	08 95       	ret
    }
    else
    {
      CLR_BIT(DDRB, pin);        // Set the pin 'PIN' in port 'B' as 'O/P'.
 3e2:	27 b3       	in	r18, 0x17	; 23
 3e4:	81 e0       	ldi	r24, 0x01	; 1
 3e6:	90 e0       	ldi	r25, 0x00	; 0
 3e8:	ac 01       	movw	r20, r24
 3ea:	02 c0       	rjmp	.+4      	; 0x3f0 <DIO_set_pin_dir+0x7e>
 3ec:	44 0f       	add	r20, r20
 3ee:	55 1f       	adc	r21, r21
 3f0:	6a 95       	dec	r22
 3f2:	e2 f7       	brpl	.-8      	; 0x3ec <DIO_set_pin_dir+0x7a>
 3f4:	ba 01       	movw	r22, r20
 3f6:	60 95       	com	r22
 3f8:	62 23       	and	r22, r18
 3fa:	67 bb       	out	0x17, r22	; 23
 3fc:	08 95       	ret
    }
    break;

    case 'C':                    // @Port 'C'.
    case 'c':                    // @Port 'c'. 
    if (1==direction)            // '1' is for 'I/P'.
 3fe:	41 30       	cpi	r20, 0x01	; 1
 400:	69 f4       	brne	.+26     	; 0x41c <DIO_set_pin_dir+0xaa>
    {
      SET_BIT(DDRC, pin);        // Set the pin 'PIN' in port 'C' as 'I/P'. 
 402:	24 b3       	in	r18, 0x14	; 20
 404:	81 e0       	ldi	r24, 0x01	; 1
 406:	90 e0       	ldi	r25, 0x00	; 0
 408:	ac 01       	movw	r20, r24
 40a:	02 c0       	rjmp	.+4      	; 0x410 <DIO_set_pin_dir+0x9e>
 40c:	44 0f       	add	r20, r20
 40e:	55 1f       	adc	r21, r21
 410:	6a 95       	dec	r22
 412:	e2 f7       	brpl	.-8      	; 0x40c <DIO_set_pin_dir+0x9a>
 414:	ba 01       	movw	r22, r20
 416:	62 2b       	or	r22, r18
 418:	64 bb       	out	0x14, r22	; 20
 41a:	08 95       	ret
    }
    else
    {
      CLR_BIT(DDRC, pin);        // Set the pin 'PIN' in port 'C' as 'O/P'. 
 41c:	24 b3       	in	r18, 0x14	; 20
 41e:	81 e0       	ldi	r24, 0x01	; 1
 420:	90 e0       	ldi	r25, 0x00	; 0
 422:	ac 01       	movw	r20, r24
 424:	02 c0       	rjmp	.+4      	; 0x42a <DIO_set_pin_dir+0xb8>
 426:	44 0f       	add	r20, r20
 428:	55 1f       	adc	r21, r21
 42a:	6a 95       	dec	r22
 42c:	e2 f7       	brpl	.-8      	; 0x426 <DIO_set_pin_dir+0xb4>
 42e:	ba 01       	movw	r22, r20
 430:	60 95       	com	r22
 432:	62 23       	and	r22, r18
 434:	64 bb       	out	0x14, r22	; 20
 436:	08 95       	ret
    }
    break;

    case 'D':                    // @Port 'D'.
    case 'd':                    // @Port 'd'. 
    if (1==direction)            // '1' is for 'I/P'.
 438:	41 30       	cpi	r20, 0x01	; 1
 43a:	69 f4       	brne	.+26     	; 0x456 <DIO_set_pin_dir+0xe4>
    {
      SET_BIT(DDRD, pin);        // Set the pin 'PIN' in port 'D' as 'I/P'. 
 43c:	21 b3       	in	r18, 0x11	; 17
 43e:	81 e0       	ldi	r24, 0x01	; 1
 440:	90 e0       	ldi	r25, 0x00	; 0
 442:	ac 01       	movw	r20, r24
 444:	02 c0       	rjmp	.+4      	; 0x44a <DIO_set_pin_dir+0xd8>
 446:	44 0f       	add	r20, r20
 448:	55 1f       	adc	r21, r21
 44a:	6a 95       	dec	r22
 44c:	e2 f7       	brpl	.-8      	; 0x446 <DIO_set_pin_dir+0xd4>
 44e:	ba 01       	movw	r22, r20
 450:	62 2b       	or	r22, r18
 452:	61 bb       	out	0x11, r22	; 17
 454:	08 95       	ret
    }
    else
    {
      CLR_BIT(DDRD, pin);        // Set the pin 'PIN' in port 'D' as 'O/P'.
 456:	21 b3       	in	r18, 0x11	; 17
 458:	81 e0       	ldi	r24, 0x01	; 1
 45a:	90 e0       	ldi	r25, 0x00	; 0
 45c:	ac 01       	movw	r20, r24
 45e:	02 c0       	rjmp	.+4      	; 0x464 <DIO_set_pin_dir+0xf2>
 460:	44 0f       	add	r20, r20
 462:	55 1f       	adc	r21, r21
 464:	6a 95       	dec	r22
 466:	e2 f7       	brpl	.-8      	; 0x460 <DIO_set_pin_dir+0xee>
 468:	ba 01       	movw	r22, r20
 46a:	60 95       	com	r22
 46c:	62 23       	and	r22, r18
 46e:	61 bb       	out	0x11, r22	; 17
 470:	08 95       	ret

00000472 <DIO_write_pin>:
//..................................................................................


void DIO_write_pin(unsigned char port, unsigned char pin, unsigned char value)  //Set the 'O/P' pin as 'HIGH' or 'LOW'
{
  switch (port)
 472:	90 e0       	ldi	r25, 0x00	; 0
 474:	fc 01       	movw	r30, r24
 476:	e1 54       	subi	r30, 0x41	; 65
 478:	f1 09       	sbc	r31, r1
 47a:	e4 32       	cpi	r30, 0x24	; 36
 47c:	f1 05       	cpc	r31, r1
 47e:	08 f0       	brcs	.+2      	; 0x482 <DIO_write_pin+0x10>
 480:	77 c0       	rjmp	.+238    	; 0x570 <DIO_write_pin+0xfe>
 482:	ea 5a       	subi	r30, 0xAA	; 170
 484:	ff 4f       	sbci	r31, 0xFF	; 255
 486:	0c 94 67 05 	jmp	0xace	; 0xace <__tablejump2__>
  {
    case 'A':                  // @Port 'A'.
    case 'a':                  // @Port 'a'.
    if (1==value)             
 48a:	41 30       	cpi	r20, 0x01	; 1
 48c:	69 f4       	brne	.+26     	; 0x4a8 <DIO_write_pin+0x36>
    {
      SET_BIT(PORTA, pin);     // Set pin 'PIN' in port 'A' as 'HIGH'.
 48e:	2b b3       	in	r18, 0x1b	; 27
 490:	81 e0       	ldi	r24, 0x01	; 1
 492:	90 e0       	ldi	r25, 0x00	; 0
 494:	ac 01       	movw	r20, r24
 496:	02 c0       	rjmp	.+4      	; 0x49c <DIO_write_pin+0x2a>
 498:	44 0f       	add	r20, r20
 49a:	55 1f       	adc	r21, r21
 49c:	6a 95       	dec	r22
 49e:	e2 f7       	brpl	.-8      	; 0x498 <DIO_write_pin+0x26>
 4a0:	ba 01       	movw	r22, r20
 4a2:	62 2b       	or	r22, r18
 4a4:	6b bb       	out	0x1b, r22	; 27
 4a6:	08 95       	ret
    }
    else
    {
      CLR_BIT(PORTA, pin);     // Set pin 'PIN' in port 'A' as 'LOW'.
 4a8:	2b b3       	in	r18, 0x1b	; 27
 4aa:	81 e0       	ldi	r24, 0x01	; 1
 4ac:	90 e0       	ldi	r25, 0x00	; 0
 4ae:	ac 01       	movw	r20, r24
 4b0:	02 c0       	rjmp	.+4      	; 0x4b6 <DIO_write_pin+0x44>
 4b2:	44 0f       	add	r20, r20
 4b4:	55 1f       	adc	r21, r21
 4b6:	6a 95       	dec	r22
 4b8:	e2 f7       	brpl	.-8      	; 0x4b2 <DIO_write_pin+0x40>
 4ba:	ba 01       	movw	r22, r20
 4bc:	60 95       	com	r22
 4be:	62 23       	and	r22, r18
 4c0:	6b bb       	out	0x1b, r22	; 27
 4c2:	08 95       	ret
    }
    break;
  
    case 'B':                  // @Port 'B'.
    case 'b':                  // @Port 'b'.
    if (1==value)             
 4c4:	41 30       	cpi	r20, 0x01	; 1
 4c6:	69 f4       	brne	.+26     	; 0x4e2 <DIO_write_pin+0x70>
    {
      SET_BIT(PORTB, pin);    // Set pin 'PIN' in port 'B' as 'HIGH'.
 4c8:	28 b3       	in	r18, 0x18	; 24
 4ca:	81 e0       	ldi	r24, 0x01	; 1
 4cc:	90 e0       	ldi	r25, 0x00	; 0
 4ce:	ac 01       	movw	r20, r24
 4d0:	02 c0       	rjmp	.+4      	; 0x4d6 <DIO_write_pin+0x64>
 4d2:	44 0f       	add	r20, r20
 4d4:	55 1f       	adc	r21, r21
 4d6:	6a 95       	dec	r22
 4d8:	e2 f7       	brpl	.-8      	; 0x4d2 <DIO_write_pin+0x60>
 4da:	ba 01       	movw	r22, r20
 4dc:	62 2b       	or	r22, r18
 4de:	68 bb       	out	0x18, r22	; 24
 4e0:	08 95       	ret
    }
    else
    {
      CLR_BIT(PORTB, pin);    // Set pin 'PIN' in port 'B' as 'LOW'.
 4e2:	28 b3       	in	r18, 0x18	; 24
 4e4:	81 e0       	ldi	r24, 0x01	; 1
 4e6:	90 e0       	ldi	r25, 0x00	; 0
 4e8:	ac 01       	movw	r20, r24
 4ea:	02 c0       	rjmp	.+4      	; 0x4f0 <DIO_write_pin+0x7e>
 4ec:	44 0f       	add	r20, r20
 4ee:	55 1f       	adc	r21, r21
 4f0:	6a 95       	dec	r22
 4f2:	e2 f7       	brpl	.-8      	; 0x4ec <DIO_write_pin+0x7a>
 4f4:	ba 01       	movw	r22, r20
 4f6:	60 95       	com	r22
 4f8:	62 23       	and	r22, r18
 4fa:	68 bb       	out	0x18, r22	; 24
 4fc:	08 95       	ret
    }
    break;

    case 'C':                  // @Port 'C'.
    case 'c':                  // @Port 'c'.
    if (1==value)             
 4fe:	41 30       	cpi	r20, 0x01	; 1
 500:	69 f4       	brne	.+26     	; 0x51c <DIO_write_pin+0xaa>
    {
      SET_BIT(PORTC, pin);    // Set pin 'PIN' in port 'C' as 'HIGH'.
 502:	25 b3       	in	r18, 0x15	; 21
 504:	81 e0       	ldi	r24, 0x01	; 1
 506:	90 e0       	ldi	r25, 0x00	; 0
 508:	ac 01       	movw	r20, r24
 50a:	02 c0       	rjmp	.+4      	; 0x510 <DIO_write_pin+0x9e>
 50c:	44 0f       	add	r20, r20
 50e:	55 1f       	adc	r21, r21
 510:	6a 95       	dec	r22
 512:	e2 f7       	brpl	.-8      	; 0x50c <DIO_write_pin+0x9a>
 514:	ba 01       	movw	r22, r20
 516:	62 2b       	or	r22, r18
 518:	65 bb       	out	0x15, r22	; 21
 51a:	08 95       	ret
    }
    else
    {
      CLR_BIT(PORTC, pin);    // Set pin 'PIN' in port 'C' as 'LOW'.
 51c:	25 b3       	in	r18, 0x15	; 21
 51e:	81 e0       	ldi	r24, 0x01	; 1
 520:	90 e0       	ldi	r25, 0x00	; 0
 522:	ac 01       	movw	r20, r24
 524:	02 c0       	rjmp	.+4      	; 0x52a <DIO_write_pin+0xb8>
 526:	44 0f       	add	r20, r20
 528:	55 1f       	adc	r21, r21
 52a:	6a 95       	dec	r22
 52c:	e2 f7       	brpl	.-8      	; 0x526 <DIO_write_pin+0xb4>
 52e:	ba 01       	movw	r22, r20
 530:	60 95       	com	r22
 532:	62 23       	and	r22, r18
 534:	65 bb       	out	0x15, r22	; 21
 536:	08 95       	ret
    }
    break;
  
    case 'D':                // @Port 'D'.
    case 'd':                // @Port 'd'.
    if (1==value)             
 538:	41 30       	cpi	r20, 0x01	; 1
 53a:	69 f4       	brne	.+26     	; 0x556 <DIO_write_pin+0xe4>
    {
      SET_BIT(PORTD, pin);   // Set pin 'PIN' in port 'D' as 'HIGH'.
 53c:	22 b3       	in	r18, 0x12	; 18
 53e:	81 e0       	ldi	r24, 0x01	; 1
 540:	90 e0       	ldi	r25, 0x00	; 0
 542:	ac 01       	movw	r20, r24
 544:	02 c0       	rjmp	.+4      	; 0x54a <DIO_write_pin+0xd8>
 546:	44 0f       	add	r20, r20
 548:	55 1f       	adc	r21, r21
 54a:	6a 95       	dec	r22
 54c:	e2 f7       	brpl	.-8      	; 0x546 <DIO_write_pin+0xd4>
 54e:	ba 01       	movw	r22, r20
 550:	62 2b       	or	r22, r18
 552:	62 bb       	out	0x12, r22	; 18
 554:	08 95       	ret
    }
    else
    {
      CLR_BIT(PORTD, pin);   // Set pin 'PIN' in port 'D' as 'LOW'.
 556:	22 b3       	in	r18, 0x12	; 18
 558:	81 e0       	ldi	r24, 0x01	; 1
 55a:	90 e0       	ldi	r25, 0x00	; 0
 55c:	ac 01       	movw	r20, r24
 55e:	02 c0       	rjmp	.+4      	; 0x564 <DIO_write_pin+0xf2>
 560:	44 0f       	add	r20, r20
 562:	55 1f       	adc	r21, r21
 564:	6a 95       	dec	r22
 566:	e2 f7       	brpl	.-8      	; 0x560 <DIO_write_pin+0xee>
 568:	ba 01       	movw	r22, r20
 56a:	60 95       	com	r22
 56c:	62 23       	and	r22, r18
 56e:	62 bb       	out	0x12, r22	; 18
 570:	08 95       	ret

00000572 <DIO_write_nibble>:

//..................................................................................

void DIO_write_nibble (unsigned char port, unsigned char value, unsigned char nibble)    //Write a value (4-bits) on 'HIGH'(@nibble=1) or 'LOW'(@nibble=0) of 'port' 
{
  if (0 == nibble)          // '0': write on low nibble pins in 'O/P' pins
 572:	41 11       	cpse	r20, r1
 574:	29 c0       	rjmp	.+82     	; 0x5c8 <DIO_write_nibble+0x56>
  {
    value &= 0x0f;
 576:	6f 70       	andi	r22, 0x0F	; 15

    switch (port)
 578:	90 e0       	ldi	r25, 0x00	; 0
 57a:	fc 01       	movw	r30, r24
 57c:	e1 54       	subi	r30, 0x41	; 65
 57e:	f1 09       	sbc	r31, r1
 580:	e4 32       	cpi	r30, 0x24	; 36
 582:	f1 05       	cpc	r31, r1
 584:	08 f0       	brcs	.+2      	; 0x588 <DIO_write_nibble+0x16>
 586:	4a c0       	rjmp	.+148    	; 0x61c <DIO_write_nibble+0xaa>
 588:	e6 58       	subi	r30, 0x86	; 134
 58a:	ff 4f       	sbci	r31, 0xFF	; 255
 58c:	0c 94 67 05 	jmp	0xace	; 0xace <__tablejump2__>
    {
      case 'A':
      case 'a':
      PORTA &= 0xf0;
 590:	8b b3       	in	r24, 0x1b	; 27
 592:	80 7f       	andi	r24, 0xF0	; 240
 594:	8b bb       	out	0x1b, r24	; 27
      PORTA |= value;
 596:	8b b3       	in	r24, 0x1b	; 27
 598:	68 2b       	or	r22, r24
 59a:	6b bb       	out	0x1b, r22	; 27
      break;
 59c:	08 95       	ret

      case 'B':
      case 'b':
      PORTB &= 0xf0;
 59e:	88 b3       	in	r24, 0x18	; 24
 5a0:	80 7f       	andi	r24, 0xF0	; 240
 5a2:	88 bb       	out	0x18, r24	; 24
      PORTB |= value;
 5a4:	88 b3       	in	r24, 0x18	; 24
 5a6:	68 2b       	or	r22, r24
 5a8:	68 bb       	out	0x18, r22	; 24
      break;
 5aa:	08 95       	ret
    
      case 'C':
      case 'c':
      PORTC &= 0xf0;
 5ac:	85 b3       	in	r24, 0x15	; 21
 5ae:	80 7f       	andi	r24, 0xF0	; 240
 5b0:	85 bb       	out	0x15, r24	; 21
      PORTC |= value;
 5b2:	85 b3       	in	r24, 0x15	; 21
 5b4:	68 2b       	or	r22, r24
 5b6:	65 bb       	out	0x15, r22	; 21
      break;
 5b8:	08 95       	ret
    
      case 'D':
      case 'd':
      PORTD &= 0xf0;
 5ba:	82 b3       	in	r24, 0x12	; 18
 5bc:	80 7f       	andi	r24, 0xF0	; 240
 5be:	82 bb       	out	0x12, r24	; 18
      PORTD |= value;
 5c0:	82 b3       	in	r24, 0x12	; 18
 5c2:	68 2b       	or	r22, r24
 5c4:	62 bb       	out	0x12, r22	; 18
      break;
 5c6:	08 95       	ret
      default:
      break;
    }
  }

  else if (1 == nibble)    // '1': write on 'HIGH' nibble pins in 'O/P' pins
 5c8:	41 30       	cpi	r20, 0x01	; 1
 5ca:	41 f5       	brne	.+80     	; 0x61c <DIO_write_nibble+0xaa>
  {
    value <<= 4;
 5cc:	62 95       	swap	r22
 5ce:	60 7f       	andi	r22, 0xF0	; 240

    switch (port)
 5d0:	90 e0       	ldi	r25, 0x00	; 0
 5d2:	fc 01       	movw	r30, r24
 5d4:	e1 54       	subi	r30, 0x41	; 65
 5d6:	f1 09       	sbc	r31, r1
 5d8:	e4 32       	cpi	r30, 0x24	; 36
 5da:	f1 05       	cpc	r31, r1
 5dc:	f8 f4       	brcc	.+62     	; 0x61c <DIO_write_nibble+0xaa>
 5de:	e2 56       	subi	r30, 0x62	; 98
 5e0:	ff 4f       	sbci	r31, 0xFF	; 255
 5e2:	0c 94 67 05 	jmp	0xace	; 0xace <__tablejump2__>
    {
      case 'A':
      case 'a':
      PORTA &= 0x0f;
 5e6:	8b b3       	in	r24, 0x1b	; 27
 5e8:	8f 70       	andi	r24, 0x0F	; 15
 5ea:	8b bb       	out	0x1b, r24	; 27
      PORTA |= value;
 5ec:	8b b3       	in	r24, 0x1b	; 27
 5ee:	68 2b       	or	r22, r24
 5f0:	6b bb       	out	0x1b, r22	; 27
      break;
 5f2:	08 95       	ret

      case 'B':
      case 'b':
      PORTB &= 0x0f;
 5f4:	88 b3       	in	r24, 0x18	; 24
 5f6:	8f 70       	andi	r24, 0x0F	; 15
 5f8:	88 bb       	out	0x18, r24	; 24
      PORTB |= value;
 5fa:	88 b3       	in	r24, 0x18	; 24
 5fc:	68 2b       	or	r22, r24
 5fe:	68 bb       	out	0x18, r22	; 24
      break;
 600:	08 95       	ret
     
      case 'C':
      case 'c':
      PORTC &= 0x0f;
 602:	85 b3       	in	r24, 0x15	; 21
 604:	8f 70       	andi	r24, 0x0F	; 15
 606:	85 bb       	out	0x15, r24	; 21
      PORTC |= value;
 608:	85 b3       	in	r24, 0x15	; 21
 60a:	68 2b       	or	r22, r24
 60c:	65 bb       	out	0x15, r22	; 21
      break;
 60e:	08 95       	ret
    
      case 'D':
      case 'd':
      PORTD &= 0x0f;
 610:	82 b3       	in	r24, 0x12	; 18
 612:	8f 70       	andi	r24, 0x0F	; 15
 614:	82 bb       	out	0x12, r24	; 18
      PORTD |= value;
 616:	82 b3       	in	r24, 0x12	; 18
 618:	68 2b       	or	r22, r24
 61a:	62 bb       	out	0x12, r22	; 18
 61c:	08 95       	ret

0000061e <LCD_send_falling_edge>:
#include <util/delay.h>


static void LCD_send_falling_edge ()
{
	DIO_write_pin(ctrl_port, EN, 1);
 61e:	41 e0       	ldi	r20, 0x01	; 1
 620:	50 e0       	ldi	r21, 0x00	; 0
 622:	60 e0       	ldi	r22, 0x00	; 0
 624:	70 e0       	ldi	r23, 0x00	; 0
 626:	83 e4       	ldi	r24, 0x43	; 67
 628:	90 e0       	ldi	r25, 0x00	; 0
 62a:	0e 94 39 02 	call	0x472	; 0x472 <DIO_write_pin>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 62e:	8f e9       	ldi	r24, 0x9F	; 159
 630:	9f e0       	ldi	r25, 0x0F	; 15
 632:	01 97       	sbiw	r24, 0x01	; 1
 634:	f1 f7       	brne	.-4      	; 0x632 <LCD_send_falling_edge+0x14>
 636:	00 c0       	rjmp	.+0      	; 0x638 <LCD_send_falling_edge+0x1a>
 638:	00 00       	nop
	_delay_ms(2);
	
	DIO_write_pin(ctrl_port, EN, 0);
 63a:	40 e0       	ldi	r20, 0x00	; 0
 63c:	50 e0       	ldi	r21, 0x00	; 0
 63e:	60 e0       	ldi	r22, 0x00	; 0
 640:	70 e0       	ldi	r23, 0x00	; 0
 642:	83 e4       	ldi	r24, 0x43	; 67
 644:	90 e0       	ldi	r25, 0x00	; 0
 646:	0e 94 39 02 	call	0x472	; 0x472 <DIO_write_pin>
 64a:	8f e9       	ldi	r24, 0x9F	; 159
 64c:	9f e0       	ldi	r25, 0x0F	; 15
 64e:	01 97       	sbiw	r24, 0x01	; 1
 650:	f1 f7       	brne	.-4      	; 0x64e <LCD_send_falling_edge+0x30>
 652:	00 c0       	rjmp	.+0      	; 0x654 <LCD_send_falling_edge+0x36>
 654:	00 00       	nop
 656:	08 95       	ret

00000658 <LCD_send_cmd>:
} 

//.......................................................................

void LCD_send_cmd (unsigned char cmd)  
{
 658:	cf 93       	push	r28
 65a:	c8 2f       	mov	r28, r24
	DIO_write_pin(ctrl_port, RS, 0);
	LCD_send_falling_edge();
	_delay_ms(1);

  #elif defined four_bit_mode                    //@ 4-Bit mode
	DIO_write_nibble(data_port, cmd>>4, nibble);
 65c:	68 2f       	mov	r22, r24
 65e:	62 95       	swap	r22
 660:	6f 70       	andi	r22, 0x0F	; 15
 662:	70 e0       	ldi	r23, 0x00	; 0
 664:	41 e0       	ldi	r20, 0x01	; 1
 666:	50 e0       	ldi	r21, 0x00	; 0
 668:	83 e4       	ldi	r24, 0x43	; 67
 66a:	90 e0       	ldi	r25, 0x00	; 0
 66c:	0e 94 b9 02 	call	0x572	; 0x572 <DIO_write_nibble>
	DIO_write_pin(ctrl_port, RS, 0);
 670:	40 e0       	ldi	r20, 0x00	; 0
 672:	50 e0       	ldi	r21, 0x00	; 0
 674:	62 e0       	ldi	r22, 0x02	; 2
 676:	70 e0       	ldi	r23, 0x00	; 0
 678:	83 e4       	ldi	r24, 0x43	; 67
 67a:	90 e0       	ldi	r25, 0x00	; 0
 67c:	0e 94 39 02 	call	0x472	; 0x472 <DIO_write_pin>
	LCD_send_falling_edge();
 680:	0e 94 0f 03 	call	0x61e	; 0x61e <LCD_send_falling_edge>
	
	DIO_write_nibble(data_port, cmd, nibble);
 684:	6c 2f       	mov	r22, r28
 686:	70 e0       	ldi	r23, 0x00	; 0
 688:	41 e0       	ldi	r20, 0x01	; 1
 68a:	50 e0       	ldi	r21, 0x00	; 0
 68c:	83 e4       	ldi	r24, 0x43	; 67
 68e:	90 e0       	ldi	r25, 0x00	; 0
 690:	0e 94 b9 02 	call	0x572	; 0x572 <DIO_write_nibble>
	DIO_write_pin(ctrl_port, RS, 0);
 694:	40 e0       	ldi	r20, 0x00	; 0
 696:	50 e0       	ldi	r21, 0x00	; 0
 698:	62 e0       	ldi	r22, 0x02	; 2
 69a:	70 e0       	ldi	r23, 0x00	; 0
 69c:	83 e4       	ldi	r24, 0x43	; 67
 69e:	90 e0       	ldi	r25, 0x00	; 0
 6a0:	0e 94 39 02 	call	0x472	; 0x472 <DIO_write_pin>
	LCD_send_falling_edge();
 6a4:	0e 94 0f 03 	call	0x61e	; 0x61e <LCD_send_falling_edge>
 6a8:	8f ec       	ldi	r24, 0xCF	; 207
 6aa:	97 e0       	ldi	r25, 0x07	; 7
 6ac:	01 97       	sbiw	r24, 0x01	; 1
 6ae:	f1 f7       	brne	.-4      	; 0x6ac <LCD_send_cmd+0x54>
 6b0:	00 c0       	rjmp	.+0      	; 0x6b2 <LCD_send_cmd+0x5a>
 6b2:	00 00       	nop
	_delay_ms(1);

  #endif
}
 6b4:	cf 91       	pop	r28
 6b6:	08 95       	ret

000006b8 <LCD_init>:
 6b8:	2f e7       	ldi	r18, 0x7F	; 127
 6ba:	88 e3       	ldi	r24, 0x38	; 56
 6bc:	91 e0       	ldi	r25, 0x01	; 1
 6be:	21 50       	subi	r18, 0x01	; 1
 6c0:	80 40       	sbci	r24, 0x00	; 0
 6c2:	90 40       	sbci	r25, 0x00	; 0
 6c4:	e1 f7       	brne	.-8      	; 0x6be <LCD_init+0x6>
 6c6:	00 c0       	rjmp	.+0      	; 0x6c8 <LCD_init+0x10>
 6c8:	00 00       	nop
    LCD_send_cmd(entry_DDRAM_inc_dis_right);
    _delay_ms(1);
	
#elif defined four_bit_mode     //@ 4-Bit mode
    _delay_ms(50);
    DIO_set_pin_dir(data_port, D4, 1);
 6ca:	41 e0       	ldi	r20, 0x01	; 1
 6cc:	50 e0       	ldi	r21, 0x00	; 0
 6ce:	64 e0       	ldi	r22, 0x04	; 4
 6d0:	70 e0       	ldi	r23, 0x00	; 0
 6d2:	83 e4       	ldi	r24, 0x43	; 67
 6d4:	90 e0       	ldi	r25, 0x00	; 0
 6d6:	0e 94 b9 01 	call	0x372	; 0x372 <DIO_set_pin_dir>
    DIO_set_pin_dir(data_port, D5, 1);
 6da:	41 e0       	ldi	r20, 0x01	; 1
 6dc:	50 e0       	ldi	r21, 0x00	; 0
 6de:	65 e0       	ldi	r22, 0x05	; 5
 6e0:	70 e0       	ldi	r23, 0x00	; 0
 6e2:	83 e4       	ldi	r24, 0x43	; 67
 6e4:	90 e0       	ldi	r25, 0x00	; 0
 6e6:	0e 94 b9 01 	call	0x372	; 0x372 <DIO_set_pin_dir>
    DIO_set_pin_dir(data_port, D6, 1);
 6ea:	41 e0       	ldi	r20, 0x01	; 1
 6ec:	50 e0       	ldi	r21, 0x00	; 0
 6ee:	66 e0       	ldi	r22, 0x06	; 6
 6f0:	70 e0       	ldi	r23, 0x00	; 0
 6f2:	83 e4       	ldi	r24, 0x43	; 67
 6f4:	90 e0       	ldi	r25, 0x00	; 0
 6f6:	0e 94 b9 01 	call	0x372	; 0x372 <DIO_set_pin_dir>
    DIO_set_pin_dir(data_port, D7, 1);
 6fa:	41 e0       	ldi	r20, 0x01	; 1
 6fc:	50 e0       	ldi	r21, 0x00	; 0
 6fe:	67 e0       	ldi	r22, 0x07	; 7
 700:	70 e0       	ldi	r23, 0x00	; 0
 702:	83 e4       	ldi	r24, 0x43	; 67
 704:	90 e0       	ldi	r25, 0x00	; 0
 706:	0e 94 b9 01 	call	0x372	; 0x372 <DIO_set_pin_dir>
    DIO_set_pin_dir(ctrl_port, EN, 1);    //Set the 'ENABLE' Pin as 'O/P'
 70a:	41 e0       	ldi	r20, 0x01	; 1
 70c:	50 e0       	ldi	r21, 0x00	; 0
 70e:	60 e0       	ldi	r22, 0x00	; 0
 710:	70 e0       	ldi	r23, 0x00	; 0
 712:	83 e4       	ldi	r24, 0x43	; 67
 714:	90 e0       	ldi	r25, 0x00	; 0
 716:	0e 94 b9 01 	call	0x372	; 0x372 <DIO_set_pin_dir>
    DIO_set_pin_dir(ctrl_port, RS, 1);    //Set the 'RESET' Pin as 'O/P'
 71a:	41 e0       	ldi	r20, 0x01	; 1
 71c:	50 e0       	ldi	r21, 0x00	; 0
 71e:	62 e0       	ldi	r22, 0x02	; 2
 720:	70 e0       	ldi	r23, 0x00	; 0
 722:	83 e4       	ldi	r24, 0x43	; 67
 724:	90 e0       	ldi	r25, 0x00	; 0
 726:	0e 94 b9 01 	call	0x372	; 0x372 <DIO_set_pin_dir>
    DIO_set_pin_dir(ctrl_port, RW, 1);    //Set the 'READ/WRITE' Pin as 'O/P'
 72a:	41 e0       	ldi	r20, 0x01	; 1
 72c:	50 e0       	ldi	r21, 0x00	; 0
 72e:	61 e0       	ldi	r22, 0x01	; 1
 730:	70 e0       	ldi	r23, 0x00	; 0
 732:	83 e4       	ldi	r24, 0x43	; 67
 734:	90 e0       	ldi	r25, 0x00	; 0
 736:	0e 94 b9 01 	call	0x372	; 0x372 <DIO_set_pin_dir>
  
    DIO_write_pin(ctrl_port, RW, 0);
 73a:	40 e0       	ldi	r20, 0x00	; 0
 73c:	50 e0       	ldi	r21, 0x00	; 0
 73e:	61 e0       	ldi	r22, 0x01	; 1
 740:	70 e0       	ldi	r23, 0x00	; 0
 742:	83 e4       	ldi	r24, 0x43	; 67
 744:	90 e0       	ldi	r25, 0x00	; 0
 746:	0e 94 39 02 	call	0x472	; 0x472 <DIO_write_pin>
	
	LCD_send_cmd(rtn_home);
 74a:	82 e0       	ldi	r24, 0x02	; 2
 74c:	0e 94 2c 03 	call	0x658	; 0x658 <LCD_send_cmd>
 750:	8f e1       	ldi	r24, 0x1F	; 31
 752:	9e e4       	ldi	r25, 0x4E	; 78
 754:	01 97       	sbiw	r24, 0x01	; 1
 756:	f1 f7       	brne	.-4      	; 0x754 <LCD_init+0x9c>
 758:	00 c0       	rjmp	.+0      	; 0x75a <LCD_init+0xa2>
 75a:	00 00       	nop
	_delay_ms(10);
  
    LCD_send_cmd(four_bit_2_line_5x7);
 75c:	88 e2       	ldi	r24, 0x28	; 40
 75e:	0e 94 2c 03 	call	0x658	; 0x658 <LCD_send_cmd>
 762:	8f ec       	ldi	r24, 0xCF	; 207
 764:	97 e0       	ldi	r25, 0x07	; 7
 766:	01 97       	sbiw	r24, 0x01	; 1
 768:	f1 f7       	brne	.-4      	; 0x766 <LCD_init+0xae>
 76a:	00 c0       	rjmp	.+0      	; 0x76c <LCD_init+0xb4>
 76c:	00 00       	nop
    _delay_ms(1);
  
    LCD_send_cmd(disp_on_curs_off_solid);
 76e:	8c e0       	ldi	r24, 0x0C	; 12
 770:	0e 94 2c 03 	call	0x658	; 0x658 <LCD_send_cmd>
 774:	8f ec       	ldi	r24, 0xCF	; 207
 776:	97 e0       	ldi	r25, 0x07	; 7
 778:	01 97       	sbiw	r24, 0x01	; 1
 77a:	f1 f7       	brne	.-4      	; 0x778 <LCD_init+0xc0>
 77c:	00 c0       	rjmp	.+0      	; 0x77e <LCD_init+0xc6>
 77e:	00 00       	nop
    _delay_ms(1);
  
    LCD_send_cmd(clr_disp);
 780:	81 e0       	ldi	r24, 0x01	; 1
 782:	0e 94 2c 03 	call	0x658	; 0x658 <LCD_send_cmd>
 786:	8f e1       	ldi	r24, 0x1F	; 31
 788:	9e e4       	ldi	r25, 0x4E	; 78
 78a:	01 97       	sbiw	r24, 0x01	; 1
 78c:	f1 f7       	brne	.-4      	; 0x78a <LCD_init+0xd2>
 78e:	00 c0       	rjmp	.+0      	; 0x790 <LCD_init+0xd8>
 790:	00 00       	nop
    _delay_ms(10);
  
    LCD_send_cmd(entry_DDRAM_inc_dis_right);
 792:	86 e0       	ldi	r24, 0x06	; 6
 794:	0e 94 2c 03 	call	0x658	; 0x658 <LCD_send_cmd>
 798:	8f ec       	ldi	r24, 0xCF	; 207
 79a:	97 e0       	ldi	r25, 0x07	; 7
 79c:	01 97       	sbiw	r24, 0x01	; 1
 79e:	f1 f7       	brne	.-4      	; 0x79c <LCD_init+0xe4>
 7a0:	00 c0       	rjmp	.+0      	; 0x7a2 <LCD_init+0xea>
 7a2:	00 00       	nop
 7a4:	08 95       	ret

000007a6 <LCD_send_char>:
}

//.......................................................................

void LCD_send_char (unsigned char data)  
{
 7a6:	cf 93       	push	r28
 7a8:	c8 2f       	mov	r28, r24
    DIO_write_pin(ctrl_port, RS, 1);
    LCD_send_falling_edge();
	_delay_ms(1);
	
#elif defined four_bit_mode          //@ 4-Bit mode
    DIO_write_nibble(data_port, data>>4, nibble);   //Low Nibble
 7aa:	68 2f       	mov	r22, r24
 7ac:	62 95       	swap	r22
 7ae:	6f 70       	andi	r22, 0x0F	; 15
 7b0:	70 e0       	ldi	r23, 0x00	; 0
 7b2:	41 e0       	ldi	r20, 0x01	; 1
 7b4:	50 e0       	ldi	r21, 0x00	; 0
 7b6:	83 e4       	ldi	r24, 0x43	; 67
 7b8:	90 e0       	ldi	r25, 0x00	; 0
 7ba:	0e 94 b9 02 	call	0x572	; 0x572 <DIO_write_nibble>
    DIO_write_pin(ctrl_port, RS, 1);
 7be:	41 e0       	ldi	r20, 0x01	; 1
 7c0:	50 e0       	ldi	r21, 0x00	; 0
 7c2:	62 e0       	ldi	r22, 0x02	; 2
 7c4:	70 e0       	ldi	r23, 0x00	; 0
 7c6:	83 e4       	ldi	r24, 0x43	; 67
 7c8:	90 e0       	ldi	r25, 0x00	; 0
 7ca:	0e 94 39 02 	call	0x472	; 0x472 <DIO_write_pin>
    LCD_send_falling_edge();
 7ce:	0e 94 0f 03 	call	0x61e	; 0x61e <LCD_send_falling_edge>
  
    DIO_write_nibble(data_port, data, nibble);     //Low Nibble
 7d2:	6c 2f       	mov	r22, r28
 7d4:	70 e0       	ldi	r23, 0x00	; 0
 7d6:	41 e0       	ldi	r20, 0x01	; 1
 7d8:	50 e0       	ldi	r21, 0x00	; 0
 7da:	83 e4       	ldi	r24, 0x43	; 67
 7dc:	90 e0       	ldi	r25, 0x00	; 0
 7de:	0e 94 b9 02 	call	0x572	; 0x572 <DIO_write_nibble>
    DIO_write_pin(ctrl_port, RS, 1);
 7e2:	41 e0       	ldi	r20, 0x01	; 1
 7e4:	50 e0       	ldi	r21, 0x00	; 0
 7e6:	62 e0       	ldi	r22, 0x02	; 2
 7e8:	70 e0       	ldi	r23, 0x00	; 0
 7ea:	83 e4       	ldi	r24, 0x43	; 67
 7ec:	90 e0       	ldi	r25, 0x00	; 0
 7ee:	0e 94 39 02 	call	0x472	; 0x472 <DIO_write_pin>
    LCD_send_falling_edge();
 7f2:	0e 94 0f 03 	call	0x61e	; 0x61e <LCD_send_falling_edge>
 7f6:	8f ec       	ldi	r24, 0xCF	; 207
 7f8:	97 e0       	ldi	r25, 0x07	; 7
 7fa:	01 97       	sbiw	r24, 0x01	; 1
 7fc:	f1 f7       	brne	.-4      	; 0x7fa <LCD_send_char+0x54>
 7fe:	00 c0       	rjmp	.+0      	; 0x800 <LCD_send_char+0x5a>
 800:	00 00       	nop
    _delay_ms(1);

#endif
}
 802:	cf 91       	pop	r28
 804:	08 95       	ret

00000806 <LCD_send_string>:

//.......................................................................

void LCD_send_string (unsigned char *data)
{
 806:	cf 93       	push	r28
 808:	df 93       	push	r29
 80a:	ec 01       	movw	r28, r24
  while((*data) != '\0')
 80c:	88 81       	ld	r24, Y
 80e:	88 23       	and	r24, r24
 810:	31 f0       	breq	.+12     	; 0x81e <LCD_send_string+0x18>
 812:	21 96       	adiw	r28, 0x01	; 1
  {
	  LCD_send_char(*data);
 814:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <LCD_send_char>

//.......................................................................

void LCD_send_string (unsigned char *data)
{
  while((*data) != '\0')
 818:	89 91       	ld	r24, Y+
 81a:	81 11       	cpse	r24, r1
 81c:	fb cf       	rjmp	.-10     	; 0x814 <LCD_send_string+0xe>
  {
	  LCD_send_char(*data);
	  data++;
  }
}
 81e:	df 91       	pop	r29
 820:	cf 91       	pop	r28
 822:	08 95       	ret

00000824 <LCD_move_cursor>:

void LCD_move_cursor (unsigned char row, unsigned char coloumn)
{
  unsigned char data;
  
  if((row>2) || (row<1) || (coloumn>16) || (coloumn<1))
 824:	9f ef       	ldi	r25, 0xFF	; 255
 826:	98 0f       	add	r25, r24
 828:	92 30       	cpi	r25, 0x02	; 2
 82a:	70 f4       	brcc	.+28     	; 0x848 <LCD_move_cursor+0x24>
 82c:	9f ef       	ldi	r25, 0xFF	; 255
 82e:	96 0f       	add	r25, r22
 830:	90 31       	cpi	r25, 0x10	; 16
 832:	60 f4       	brcc	.+24     	; 0x84c <LCD_move_cursor+0x28>
  {
	  data = 0x80;
  }
  
  else if(1==row)
 834:	81 30       	cpi	r24, 0x01	; 1
 836:	19 f4       	brne	.+6      	; 0x83e <LCD_move_cursor+0x1a>
  {
	  data = 0x80 + (coloumn-1);
 838:	2f e7       	ldi	r18, 0x7F	; 127
 83a:	26 0f       	add	r18, r22
 83c:	08 c0       	rjmp	.+16     	; 0x84e <LCD_move_cursor+0x2a>
  }
  
  else if(2==row)
 83e:	82 30       	cpi	r24, 0x02	; 2
 840:	31 f4       	brne	.+12     	; 0x84e <LCD_move_cursor+0x2a>
  {
	  data = 0xc0 + (coloumn-1);
 842:	2f eb       	ldi	r18, 0xBF	; 191
 844:	26 0f       	add	r18, r22
 846:	03 c0       	rjmp	.+6      	; 0x84e <LCD_move_cursor+0x2a>
{
  unsigned char data;
  
  if((row>2) || (row<1) || (coloumn>16) || (coloumn<1))
  {
	  data = 0x80;
 848:	20 e8       	ldi	r18, 0x80	; 128
 84a:	01 c0       	rjmp	.+2      	; 0x84e <LCD_move_cursor+0x2a>
 84c:	20 e8       	ldi	r18, 0x80	; 128
  else if(2==row)
  {
	  data = 0xc0 + (coloumn-1);
  }
  
  LCD_send_cmd(data);
 84e:	82 2f       	mov	r24, r18
 850:	0e 94 2c 03 	call	0x658	; 0x658 <LCD_send_cmd>
 854:	8f ec       	ldi	r24, 0xCF	; 207
 856:	97 e0       	ldi	r25, 0x07	; 7
 858:	01 97       	sbiw	r24, 0x01	; 1
 85a:	f1 f7       	brne	.-4      	; 0x858 <LCD_move_cursor+0x34>
 85c:	00 c0       	rjmp	.+0      	; 0x85e <LCD_move_cursor+0x3a>
 85e:	00 00       	nop
 860:	08 95       	ret

00000862 <__fixsfsi>:
 862:	04 d0       	rcall	.+8      	; 0x86c <__fixunssfsi>
 864:	68 94       	set
 866:	b1 11       	cpse	r27, r1
 868:	8d c0       	rjmp	.+282    	; 0x984 <__fp_szero>
 86a:	08 95       	ret

0000086c <__fixunssfsi>:
 86c:	70 d0       	rcall	.+224    	; 0x94e <__fp_splitA>
 86e:	88 f0       	brcs	.+34     	; 0x892 <__fixunssfsi+0x26>
 870:	9f 57       	subi	r25, 0x7F	; 127
 872:	90 f0       	brcs	.+36     	; 0x898 <__fixunssfsi+0x2c>
 874:	b9 2f       	mov	r27, r25
 876:	99 27       	eor	r25, r25
 878:	b7 51       	subi	r27, 0x17	; 23
 87a:	a0 f0       	brcs	.+40     	; 0x8a4 <__fixunssfsi+0x38>
 87c:	d1 f0       	breq	.+52     	; 0x8b2 <__fixunssfsi+0x46>
 87e:	66 0f       	add	r22, r22
 880:	77 1f       	adc	r23, r23
 882:	88 1f       	adc	r24, r24
 884:	99 1f       	adc	r25, r25
 886:	1a f0       	brmi	.+6      	; 0x88e <__fixunssfsi+0x22>
 888:	ba 95       	dec	r27
 88a:	c9 f7       	brne	.-14     	; 0x87e <__fixunssfsi+0x12>
 88c:	12 c0       	rjmp	.+36     	; 0x8b2 <__fixunssfsi+0x46>
 88e:	b1 30       	cpi	r27, 0x01	; 1
 890:	81 f0       	breq	.+32     	; 0x8b2 <__fixunssfsi+0x46>
 892:	77 d0       	rcall	.+238    	; 0x982 <__fp_zero>
 894:	b1 e0       	ldi	r27, 0x01	; 1
 896:	08 95       	ret
 898:	74 c0       	rjmp	.+232    	; 0x982 <__fp_zero>
 89a:	67 2f       	mov	r22, r23
 89c:	78 2f       	mov	r23, r24
 89e:	88 27       	eor	r24, r24
 8a0:	b8 5f       	subi	r27, 0xF8	; 248
 8a2:	39 f0       	breq	.+14     	; 0x8b2 <__fixunssfsi+0x46>
 8a4:	b9 3f       	cpi	r27, 0xF9	; 249
 8a6:	cc f3       	brlt	.-14     	; 0x89a <__fixunssfsi+0x2e>
 8a8:	86 95       	lsr	r24
 8aa:	77 95       	ror	r23
 8ac:	67 95       	ror	r22
 8ae:	b3 95       	inc	r27
 8b0:	d9 f7       	brne	.-10     	; 0x8a8 <__fixunssfsi+0x3c>
 8b2:	3e f4       	brtc	.+14     	; 0x8c2 <__fixunssfsi+0x56>
 8b4:	90 95       	com	r25
 8b6:	80 95       	com	r24
 8b8:	70 95       	com	r23
 8ba:	61 95       	neg	r22
 8bc:	7f 4f       	sbci	r23, 0xFF	; 255
 8be:	8f 4f       	sbci	r24, 0xFF	; 255
 8c0:	9f 4f       	sbci	r25, 0xFF	; 255
 8c2:	08 95       	ret

000008c4 <__floatunsisf>:
 8c4:	e8 94       	clt
 8c6:	09 c0       	rjmp	.+18     	; 0x8da <__floatsisf+0x12>

000008c8 <__floatsisf>:
 8c8:	97 fb       	bst	r25, 7
 8ca:	3e f4       	brtc	.+14     	; 0x8da <__floatsisf+0x12>
 8cc:	90 95       	com	r25
 8ce:	80 95       	com	r24
 8d0:	70 95       	com	r23
 8d2:	61 95       	neg	r22
 8d4:	7f 4f       	sbci	r23, 0xFF	; 255
 8d6:	8f 4f       	sbci	r24, 0xFF	; 255
 8d8:	9f 4f       	sbci	r25, 0xFF	; 255
 8da:	99 23       	and	r25, r25
 8dc:	a9 f0       	breq	.+42     	; 0x908 <__floatsisf+0x40>
 8de:	f9 2f       	mov	r31, r25
 8e0:	96 e9       	ldi	r25, 0x96	; 150
 8e2:	bb 27       	eor	r27, r27
 8e4:	93 95       	inc	r25
 8e6:	f6 95       	lsr	r31
 8e8:	87 95       	ror	r24
 8ea:	77 95       	ror	r23
 8ec:	67 95       	ror	r22
 8ee:	b7 95       	ror	r27
 8f0:	f1 11       	cpse	r31, r1
 8f2:	f8 cf       	rjmp	.-16     	; 0x8e4 <__floatsisf+0x1c>
 8f4:	fa f4       	brpl	.+62     	; 0x934 <__floatsisf+0x6c>
 8f6:	bb 0f       	add	r27, r27
 8f8:	11 f4       	brne	.+4      	; 0x8fe <__floatsisf+0x36>
 8fa:	60 ff       	sbrs	r22, 0
 8fc:	1b c0       	rjmp	.+54     	; 0x934 <__floatsisf+0x6c>
 8fe:	6f 5f       	subi	r22, 0xFF	; 255
 900:	7f 4f       	sbci	r23, 0xFF	; 255
 902:	8f 4f       	sbci	r24, 0xFF	; 255
 904:	9f 4f       	sbci	r25, 0xFF	; 255
 906:	16 c0       	rjmp	.+44     	; 0x934 <__floatsisf+0x6c>
 908:	88 23       	and	r24, r24
 90a:	11 f0       	breq	.+4      	; 0x910 <__floatsisf+0x48>
 90c:	96 e9       	ldi	r25, 0x96	; 150
 90e:	11 c0       	rjmp	.+34     	; 0x932 <__floatsisf+0x6a>
 910:	77 23       	and	r23, r23
 912:	21 f0       	breq	.+8      	; 0x91c <__floatsisf+0x54>
 914:	9e e8       	ldi	r25, 0x8E	; 142
 916:	87 2f       	mov	r24, r23
 918:	76 2f       	mov	r23, r22
 91a:	05 c0       	rjmp	.+10     	; 0x926 <__floatsisf+0x5e>
 91c:	66 23       	and	r22, r22
 91e:	71 f0       	breq	.+28     	; 0x93c <__floatsisf+0x74>
 920:	96 e8       	ldi	r25, 0x86	; 134
 922:	86 2f       	mov	r24, r22
 924:	70 e0       	ldi	r23, 0x00	; 0
 926:	60 e0       	ldi	r22, 0x00	; 0
 928:	2a f0       	brmi	.+10     	; 0x934 <__floatsisf+0x6c>
 92a:	9a 95       	dec	r25
 92c:	66 0f       	add	r22, r22
 92e:	77 1f       	adc	r23, r23
 930:	88 1f       	adc	r24, r24
 932:	da f7       	brpl	.-10     	; 0x92a <__floatsisf+0x62>
 934:	88 0f       	add	r24, r24
 936:	96 95       	lsr	r25
 938:	87 95       	ror	r24
 93a:	97 f9       	bld	r25, 7
 93c:	08 95       	ret

0000093e <__fp_split3>:
 93e:	57 fd       	sbrc	r21, 7
 940:	90 58       	subi	r25, 0x80	; 128
 942:	44 0f       	add	r20, r20
 944:	55 1f       	adc	r21, r21
 946:	59 f0       	breq	.+22     	; 0x95e <__fp_splitA+0x10>
 948:	5f 3f       	cpi	r21, 0xFF	; 255
 94a:	71 f0       	breq	.+28     	; 0x968 <__fp_splitA+0x1a>
 94c:	47 95       	ror	r20

0000094e <__fp_splitA>:
 94e:	88 0f       	add	r24, r24
 950:	97 fb       	bst	r25, 7
 952:	99 1f       	adc	r25, r25
 954:	61 f0       	breq	.+24     	; 0x96e <__fp_splitA+0x20>
 956:	9f 3f       	cpi	r25, 0xFF	; 255
 958:	79 f0       	breq	.+30     	; 0x978 <__fp_splitA+0x2a>
 95a:	87 95       	ror	r24
 95c:	08 95       	ret
 95e:	12 16       	cp	r1, r18
 960:	13 06       	cpc	r1, r19
 962:	14 06       	cpc	r1, r20
 964:	55 1f       	adc	r21, r21
 966:	f2 cf       	rjmp	.-28     	; 0x94c <__fp_split3+0xe>
 968:	46 95       	lsr	r20
 96a:	f1 df       	rcall	.-30     	; 0x94e <__fp_splitA>
 96c:	08 c0       	rjmp	.+16     	; 0x97e <__fp_splitA+0x30>
 96e:	16 16       	cp	r1, r22
 970:	17 06       	cpc	r1, r23
 972:	18 06       	cpc	r1, r24
 974:	99 1f       	adc	r25, r25
 976:	f1 cf       	rjmp	.-30     	; 0x95a <__fp_splitA+0xc>
 978:	86 95       	lsr	r24
 97a:	71 05       	cpc	r23, r1
 97c:	61 05       	cpc	r22, r1
 97e:	08 94       	sec
 980:	08 95       	ret

00000982 <__fp_zero>:
 982:	e8 94       	clt

00000984 <__fp_szero>:
 984:	bb 27       	eor	r27, r27
 986:	66 27       	eor	r22, r22
 988:	77 27       	eor	r23, r23
 98a:	cb 01       	movw	r24, r22
 98c:	97 f9       	bld	r25, 7
 98e:	08 95       	ret

00000990 <__mulsf3>:
 990:	0b d0       	rcall	.+22     	; 0x9a8 <__mulsf3x>
 992:	78 c0       	rjmp	.+240    	; 0xa84 <__fp_round>
 994:	69 d0       	rcall	.+210    	; 0xa68 <__fp_pscA>
 996:	28 f0       	brcs	.+10     	; 0x9a2 <__mulsf3+0x12>
 998:	6e d0       	rcall	.+220    	; 0xa76 <__fp_pscB>
 99a:	18 f0       	brcs	.+6      	; 0x9a2 <__mulsf3+0x12>
 99c:	95 23       	and	r25, r21
 99e:	09 f0       	breq	.+2      	; 0x9a2 <__mulsf3+0x12>
 9a0:	5a c0       	rjmp	.+180    	; 0xa56 <__fp_inf>
 9a2:	5f c0       	rjmp	.+190    	; 0xa62 <__fp_nan>
 9a4:	11 24       	eor	r1, r1
 9a6:	ee cf       	rjmp	.-36     	; 0x984 <__fp_szero>

000009a8 <__mulsf3x>:
 9a8:	ca df       	rcall	.-108    	; 0x93e <__fp_split3>
 9aa:	a0 f3       	brcs	.-24     	; 0x994 <__mulsf3+0x4>

000009ac <__mulsf3_pse>:
 9ac:	95 9f       	mul	r25, r21
 9ae:	d1 f3       	breq	.-12     	; 0x9a4 <__mulsf3+0x14>
 9b0:	95 0f       	add	r25, r21
 9b2:	50 e0       	ldi	r21, 0x00	; 0
 9b4:	55 1f       	adc	r21, r21
 9b6:	62 9f       	mul	r22, r18
 9b8:	f0 01       	movw	r30, r0
 9ba:	72 9f       	mul	r23, r18
 9bc:	bb 27       	eor	r27, r27
 9be:	f0 0d       	add	r31, r0
 9c0:	b1 1d       	adc	r27, r1
 9c2:	63 9f       	mul	r22, r19
 9c4:	aa 27       	eor	r26, r26
 9c6:	f0 0d       	add	r31, r0
 9c8:	b1 1d       	adc	r27, r1
 9ca:	aa 1f       	adc	r26, r26
 9cc:	64 9f       	mul	r22, r20
 9ce:	66 27       	eor	r22, r22
 9d0:	b0 0d       	add	r27, r0
 9d2:	a1 1d       	adc	r26, r1
 9d4:	66 1f       	adc	r22, r22
 9d6:	82 9f       	mul	r24, r18
 9d8:	22 27       	eor	r18, r18
 9da:	b0 0d       	add	r27, r0
 9dc:	a1 1d       	adc	r26, r1
 9de:	62 1f       	adc	r22, r18
 9e0:	73 9f       	mul	r23, r19
 9e2:	b0 0d       	add	r27, r0
 9e4:	a1 1d       	adc	r26, r1
 9e6:	62 1f       	adc	r22, r18
 9e8:	83 9f       	mul	r24, r19
 9ea:	a0 0d       	add	r26, r0
 9ec:	61 1d       	adc	r22, r1
 9ee:	22 1f       	adc	r18, r18
 9f0:	74 9f       	mul	r23, r20
 9f2:	33 27       	eor	r19, r19
 9f4:	a0 0d       	add	r26, r0
 9f6:	61 1d       	adc	r22, r1
 9f8:	23 1f       	adc	r18, r19
 9fa:	84 9f       	mul	r24, r20
 9fc:	60 0d       	add	r22, r0
 9fe:	21 1d       	adc	r18, r1
 a00:	82 2f       	mov	r24, r18
 a02:	76 2f       	mov	r23, r22
 a04:	6a 2f       	mov	r22, r26
 a06:	11 24       	eor	r1, r1
 a08:	9f 57       	subi	r25, 0x7F	; 127
 a0a:	50 40       	sbci	r21, 0x00	; 0
 a0c:	8a f0       	brmi	.+34     	; 0xa30 <__mulsf3_pse+0x84>
 a0e:	e1 f0       	breq	.+56     	; 0xa48 <__mulsf3_pse+0x9c>
 a10:	88 23       	and	r24, r24
 a12:	4a f0       	brmi	.+18     	; 0xa26 <__mulsf3_pse+0x7a>
 a14:	ee 0f       	add	r30, r30
 a16:	ff 1f       	adc	r31, r31
 a18:	bb 1f       	adc	r27, r27
 a1a:	66 1f       	adc	r22, r22
 a1c:	77 1f       	adc	r23, r23
 a1e:	88 1f       	adc	r24, r24
 a20:	91 50       	subi	r25, 0x01	; 1
 a22:	50 40       	sbci	r21, 0x00	; 0
 a24:	a9 f7       	brne	.-22     	; 0xa10 <__mulsf3_pse+0x64>
 a26:	9e 3f       	cpi	r25, 0xFE	; 254
 a28:	51 05       	cpc	r21, r1
 a2a:	70 f0       	brcs	.+28     	; 0xa48 <__mulsf3_pse+0x9c>
 a2c:	14 c0       	rjmp	.+40     	; 0xa56 <__fp_inf>
 a2e:	aa cf       	rjmp	.-172    	; 0x984 <__fp_szero>
 a30:	5f 3f       	cpi	r21, 0xFF	; 255
 a32:	ec f3       	brlt	.-6      	; 0xa2e <__mulsf3_pse+0x82>
 a34:	98 3e       	cpi	r25, 0xE8	; 232
 a36:	dc f3       	brlt	.-10     	; 0xa2e <__mulsf3_pse+0x82>
 a38:	86 95       	lsr	r24
 a3a:	77 95       	ror	r23
 a3c:	67 95       	ror	r22
 a3e:	b7 95       	ror	r27
 a40:	f7 95       	ror	r31
 a42:	e7 95       	ror	r30
 a44:	9f 5f       	subi	r25, 0xFF	; 255
 a46:	c1 f7       	brne	.-16     	; 0xa38 <__mulsf3_pse+0x8c>
 a48:	fe 2b       	or	r31, r30
 a4a:	88 0f       	add	r24, r24
 a4c:	91 1d       	adc	r25, r1
 a4e:	96 95       	lsr	r25
 a50:	87 95       	ror	r24
 a52:	97 f9       	bld	r25, 7
 a54:	08 95       	ret

00000a56 <__fp_inf>:
 a56:	97 f9       	bld	r25, 7
 a58:	9f 67       	ori	r25, 0x7F	; 127
 a5a:	80 e8       	ldi	r24, 0x80	; 128
 a5c:	70 e0       	ldi	r23, 0x00	; 0
 a5e:	60 e0       	ldi	r22, 0x00	; 0
 a60:	08 95       	ret

00000a62 <__fp_nan>:
 a62:	9f ef       	ldi	r25, 0xFF	; 255
 a64:	80 ec       	ldi	r24, 0xC0	; 192
 a66:	08 95       	ret

00000a68 <__fp_pscA>:
 a68:	00 24       	eor	r0, r0
 a6a:	0a 94       	dec	r0
 a6c:	16 16       	cp	r1, r22
 a6e:	17 06       	cpc	r1, r23
 a70:	18 06       	cpc	r1, r24
 a72:	09 06       	cpc	r0, r25
 a74:	08 95       	ret

00000a76 <__fp_pscB>:
 a76:	00 24       	eor	r0, r0
 a78:	0a 94       	dec	r0
 a7a:	12 16       	cp	r1, r18
 a7c:	13 06       	cpc	r1, r19
 a7e:	14 06       	cpc	r1, r20
 a80:	05 06       	cpc	r0, r21
 a82:	08 95       	ret

00000a84 <__fp_round>:
 a84:	09 2e       	mov	r0, r25
 a86:	03 94       	inc	r0
 a88:	00 0c       	add	r0, r0
 a8a:	11 f4       	brne	.+4      	; 0xa90 <__fp_round+0xc>
 a8c:	88 23       	and	r24, r24
 a8e:	52 f0       	brmi	.+20     	; 0xaa4 <__fp_round+0x20>
 a90:	bb 0f       	add	r27, r27
 a92:	40 f4       	brcc	.+16     	; 0xaa4 <__fp_round+0x20>
 a94:	bf 2b       	or	r27, r31
 a96:	11 f4       	brne	.+4      	; 0xa9c <__fp_round+0x18>
 a98:	60 ff       	sbrs	r22, 0
 a9a:	04 c0       	rjmp	.+8      	; 0xaa4 <__fp_round+0x20>
 a9c:	6f 5f       	subi	r22, 0xFF	; 255
 a9e:	7f 4f       	sbci	r23, 0xFF	; 255
 aa0:	8f 4f       	sbci	r24, 0xFF	; 255
 aa2:	9f 4f       	sbci	r25, 0xFF	; 255
 aa4:	08 95       	ret

00000aa6 <__divmodhi4>:
 aa6:	97 fb       	bst	r25, 7
 aa8:	07 2e       	mov	r0, r23
 aaa:	16 f4       	brtc	.+4      	; 0xab0 <__divmodhi4+0xa>
 aac:	00 94       	com	r0
 aae:	07 d0       	rcall	.+14     	; 0xabe <__divmodhi4_neg1>
 ab0:	77 fd       	sbrc	r23, 7
 ab2:	09 d0       	rcall	.+18     	; 0xac6 <__divmodhi4_neg2>
 ab4:	0e 94 6d 05 	call	0xada	; 0xada <__udivmodhi4>
 ab8:	07 fc       	sbrc	r0, 7
 aba:	05 d0       	rcall	.+10     	; 0xac6 <__divmodhi4_neg2>
 abc:	3e f4       	brtc	.+14     	; 0xacc <__divmodhi4_exit>

00000abe <__divmodhi4_neg1>:
 abe:	90 95       	com	r25
 ac0:	81 95       	neg	r24
 ac2:	9f 4f       	sbci	r25, 0xFF	; 255
 ac4:	08 95       	ret

00000ac6 <__divmodhi4_neg2>:
 ac6:	70 95       	com	r23
 ac8:	61 95       	neg	r22
 aca:	7f 4f       	sbci	r23, 0xFF	; 255

00000acc <__divmodhi4_exit>:
 acc:	08 95       	ret

00000ace <__tablejump2__>:
 ace:	ee 0f       	add	r30, r30
 ad0:	ff 1f       	adc	r31, r31

00000ad2 <__tablejump__>:
 ad2:	05 90       	lpm	r0, Z+
 ad4:	f4 91       	lpm	r31, Z
 ad6:	e0 2d       	mov	r30, r0
 ad8:	09 94       	ijmp

00000ada <__udivmodhi4>:
 ada:	aa 1b       	sub	r26, r26
 adc:	bb 1b       	sub	r27, r27
 ade:	51 e1       	ldi	r21, 0x11	; 17
 ae0:	07 c0       	rjmp	.+14     	; 0xaf0 <__udivmodhi4_ep>

00000ae2 <__udivmodhi4_loop>:
 ae2:	aa 1f       	adc	r26, r26
 ae4:	bb 1f       	adc	r27, r27
 ae6:	a6 17       	cp	r26, r22
 ae8:	b7 07       	cpc	r27, r23
 aea:	10 f0       	brcs	.+4      	; 0xaf0 <__udivmodhi4_ep>
 aec:	a6 1b       	sub	r26, r22
 aee:	b7 0b       	sbc	r27, r23

00000af0 <__udivmodhi4_ep>:
 af0:	88 1f       	adc	r24, r24
 af2:	99 1f       	adc	r25, r25
 af4:	5a 95       	dec	r21
 af6:	a9 f7       	brne	.-22     	; 0xae2 <__udivmodhi4_loop>
 af8:	80 95       	com	r24
 afa:	90 95       	com	r25
 afc:	bc 01       	movw	r22, r24
 afe:	cd 01       	movw	r24, r26
 b00:	08 95       	ret

00000b02 <_exit>:
 b02:	f8 94       	cli

00000b04 <__stop_program>:
 b04:	ff cf       	rjmp	.-2      	; 0xb04 <__stop_program>
