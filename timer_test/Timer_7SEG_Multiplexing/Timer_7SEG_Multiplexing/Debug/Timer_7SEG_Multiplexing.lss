
Timer_7SEG_Multiplexing.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004d6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000003  00800060  00800060  0000054a  2**0
                  ALLOC
  2 .comment      00000030  00000000  00000000  0000054a  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000108  00000000  00000000  0000057a  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000b4d  00000000  00000000  00000682  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000034f  00000000  00000000  000011cf  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000516  00000000  00000000  0000151e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000001c0  00000000  00000000  00001a34  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000003ef  00000000  00000000  00001bf4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000172d  00000000  00000000  00001fe3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000000c8  00000000  00000000  00003710  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 a0 00 	jmp	0x140	; 0x140 <__ctors_end>
   4:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
   8:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
   c:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
  10:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
  14:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
  18:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
  1c:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
  20:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
  24:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
  28:	0c 94 4f 02 	jmp	0x49e	; 0x49e <__vector_10>
  2c:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
  30:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
  34:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
  38:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
  3c:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
  40:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
  44:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
  48:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
  4c:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
  50:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
  54:	c0 00       	.word	0x00c0	; ????
  56:	df 00       	.word	0x00df	; ????
  58:	fe 00       	.word	0x00fe	; ????
  5a:	1d 01       	movw	r2, r26
  5c:	3b 01       	movw	r6, r22
  5e:	3b 01       	movw	r6, r22
  60:	3b 01       	movw	r6, r22
  62:	3b 01       	movw	r6, r22
  64:	3b 01       	movw	r6, r22
  66:	3b 01       	movw	r6, r22
  68:	3b 01       	movw	r6, r22
  6a:	3b 01       	movw	r6, r22
  6c:	3b 01       	movw	r6, r22
  6e:	3b 01       	movw	r6, r22
  70:	3b 01       	movw	r6, r22
  72:	3b 01       	movw	r6, r22
  74:	3b 01       	movw	r6, r22
  76:	3b 01       	movw	r6, r22
  78:	3b 01       	movw	r6, r22
  7a:	3b 01       	movw	r6, r22
  7c:	3b 01       	movw	r6, r22
  7e:	3b 01       	movw	r6, r22
  80:	3b 01       	movw	r6, r22
  82:	3b 01       	movw	r6, r22
  84:	3b 01       	movw	r6, r22
  86:	3b 01       	movw	r6, r22
  88:	3b 01       	movw	r6, r22
  8a:	3b 01       	movw	r6, r22
  8c:	3b 01       	movw	r6, r22
  8e:	3b 01       	movw	r6, r22
  90:	3b 01       	movw	r6, r22
  92:	3b 01       	movw	r6, r22
  94:	c0 00       	.word	0x00c0	; ????
  96:	df 00       	.word	0x00df	; ????
  98:	fe 00       	.word	0x00fe	; ????
  9a:	1d 01       	movw	r2, r26
  9c:	47 01       	movw	r8, r14
  9e:	50 01       	movw	r10, r0
  a0:	59 01       	movw	r10, r18
  a2:	62 01       	movw	r12, r4
  a4:	6a 01       	movw	r12, r20
  a6:	6a 01       	movw	r12, r20
  a8:	6a 01       	movw	r12, r20
  aa:	6a 01       	movw	r12, r20
  ac:	6a 01       	movw	r12, r20
  ae:	6a 01       	movw	r12, r20
  b0:	6a 01       	movw	r12, r20
  b2:	6a 01       	movw	r12, r20
  b4:	6a 01       	movw	r12, r20
  b6:	6a 01       	movw	r12, r20
  b8:	6a 01       	movw	r12, r20
  ba:	6a 01       	movw	r12, r20
  bc:	6a 01       	movw	r12, r20
  be:	6a 01       	movw	r12, r20
  c0:	6a 01       	movw	r12, r20
  c2:	6a 01       	movw	r12, r20
  c4:	6a 01       	movw	r12, r20
  c6:	6a 01       	movw	r12, r20
  c8:	6a 01       	movw	r12, r20
  ca:	6a 01       	movw	r12, r20
  cc:	6a 01       	movw	r12, r20
  ce:	6a 01       	movw	r12, r20
  d0:	6a 01       	movw	r12, r20
  d2:	6a 01       	movw	r12, r20
  d4:	6a 01       	movw	r12, r20
  d6:	6a 01       	movw	r12, r20
  d8:	6a 01       	movw	r12, r20
  da:	6a 01       	movw	r12, r20
  dc:	47 01       	movw	r8, r14
  de:	50 01       	movw	r10, r0
  e0:	59 01       	movw	r10, r18
  e2:	62 01       	movw	r12, r4
  e4:	76 01       	movw	r14, r12
  e6:	78 01       	movw	r14, r16
  e8:	7a 01       	movw	r14, r20
  ea:	7c 01       	movw	r14, r24
  ec:	7d 01       	movw	r14, r26
  ee:	7d 01       	movw	r14, r26
  f0:	7d 01       	movw	r14, r26
  f2:	7d 01       	movw	r14, r26
  f4:	7d 01       	movw	r14, r26
  f6:	7d 01       	movw	r14, r26
  f8:	7d 01       	movw	r14, r26
  fa:	7d 01       	movw	r14, r26
  fc:	7d 01       	movw	r14, r26
  fe:	7d 01       	movw	r14, r26
 100:	7d 01       	movw	r14, r26
 102:	7d 01       	movw	r14, r26
 104:	7d 01       	movw	r14, r26
 106:	7d 01       	movw	r14, r26
 108:	7d 01       	movw	r14, r26
 10a:	7d 01       	movw	r14, r26
 10c:	7d 01       	movw	r14, r26
 10e:	7d 01       	movw	r14, r26
 110:	7d 01       	movw	r14, r26
 112:	7d 01       	movw	r14, r26
 114:	7d 01       	movw	r14, r26
 116:	7d 01       	movw	r14, r26
 118:	7d 01       	movw	r14, r26
 11a:	7d 01       	movw	r14, r26
 11c:	7d 01       	movw	r14, r26
 11e:	7d 01       	movw	r14, r26
 120:	7d 01       	movw	r14, r26
 122:	7d 01       	movw	r14, r26
 124:	76 01       	movw	r14, r12
 126:	78 01       	movw	r14, r16
 128:	7a 01       	movw	r14, r20
 12a:	7c 01       	movw	r14, r24
 12c:	8c 01       	movw	r16, r24
 12e:	90 01       	movw	r18, r0
 130:	94 01       	movw	r18, r8
 132:	98 01       	movw	r18, r16
 134:	9c 01       	movw	r18, r24
 136:	a0 01       	movw	r20, r0
 138:	a4 01       	movw	r20, r8
 13a:	a8 01       	movw	r20, r16
 13c:	ac 01       	movw	r20, r24
 13e:	b0 01       	movw	r22, r0

00000140 <__ctors_end>:
 140:	11 24       	eor	r1, r1
 142:	1f be       	out	0x3f, r1	; 63
 144:	cf e5       	ldi	r28, 0x5F	; 95
 146:	d8 e0       	ldi	r29, 0x08	; 8
 148:	de bf       	out	0x3e, r29	; 62
 14a:	cd bf       	out	0x3d, r28	; 61

0000014c <__do_clear_bss>:
 14c:	20 e0       	ldi	r18, 0x00	; 0
 14e:	a0 e6       	ldi	r26, 0x60	; 96
 150:	b0 e0       	ldi	r27, 0x00	; 0
 152:	01 c0       	rjmp	.+2      	; 0x156 <.do_clear_bss_start>

00000154 <.do_clear_bss_loop>:
 154:	1d 92       	st	X+, r1

00000156 <.do_clear_bss_start>:
 156:	a3 36       	cpi	r26, 0x63	; 99
 158:	b2 07       	cpc	r27, r18
 15a:	e1 f7       	brne	.-8      	; 0x154 <.do_clear_bss_loop>
 15c:	0e 94 00 02 	call	0x400	; 0x400 <main>
 160:	0c 94 69 02 	jmp	0x4d2	; 0x4d2 <_exit>

00000164 <__bad_interrupt>:
 164:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000168 <DIO_set_pin_dir>:
#include <avr/io.h> 
#include "my_macros.h"      //My standard  bit macros implementation.

void DIO_set_pin_dir(unsigned char port, unsigned char pin, unsigned char direction)    //Function to set a specific pin direction 'I/P'(@direction=0) or 'O/P'(@direction=1).
{
  switch (port)
 168:	90 e0       	ldi	r25, 0x00	; 0
 16a:	fc 01       	movw	r30, r24
 16c:	e1 54       	subi	r30, 0x41	; 65
 16e:	f1 09       	sbc	r31, r1
 170:	e4 32       	cpi	r30, 0x24	; 36
 172:	f1 05       	cpc	r31, r1
 174:	08 f0       	brcs	.+2      	; 0x178 <DIO_set_pin_dir+0x10>
 176:	7f c0       	rjmp	.+254    	; 0x276 <DIO_set_pin_dir+0x10e>
 178:	e6 5d       	subi	r30, 0xD6	; 214
 17a:	ff 4f       	sbci	r31, 0xFF	; 255
 17c:	0c 94 63 02 	jmp	0x4c6	; 0x4c6 <__tablejump2__>
  {
    case 'A':                     // @Port 'A'.
    case 'a':                     // @Port 'a'.
    if (1 == direction)            // '1' is for 'O/P'.
 180:	41 30       	cpi	r20, 0x01	; 1
 182:	69 f4       	brne	.+26     	; 0x19e <DIO_set_pin_dir+0x36>
    {
      SET_BIT(DDRA, pin);         // Set the pin 'PIN' in port 'A' as 'O/P'.
 184:	2a b3       	in	r18, 0x1a	; 26
 186:	81 e0       	ldi	r24, 0x01	; 1
 188:	90 e0       	ldi	r25, 0x00	; 0
 18a:	ac 01       	movw	r20, r24
 18c:	02 c0       	rjmp	.+4      	; 0x192 <DIO_set_pin_dir+0x2a>
 18e:	44 0f       	add	r20, r20
 190:	55 1f       	adc	r21, r21
 192:	6a 95       	dec	r22
 194:	e2 f7       	brpl	.-8      	; 0x18e <DIO_set_pin_dir+0x26>
 196:	ba 01       	movw	r22, r20
 198:	62 2b       	or	r22, r18
 19a:	6a bb       	out	0x1a, r22	; 26
 19c:	08 95       	ret
    }
    else if (0 == direction)
 19e:	41 11       	cpse	r20, r1
 1a0:	6a c0       	rjmp	.+212    	; 0x276 <DIO_set_pin_dir+0x10e>
    {
      CLR_BIT(DDRA, pin);        // Set the pin 'PIN' in port 'A' as 'I/P'.
 1a2:	2a b3       	in	r18, 0x1a	; 26
 1a4:	81 e0       	ldi	r24, 0x01	; 1
 1a6:	90 e0       	ldi	r25, 0x00	; 0
 1a8:	ac 01       	movw	r20, r24
 1aa:	02 c0       	rjmp	.+4      	; 0x1b0 <DIO_set_pin_dir+0x48>
 1ac:	44 0f       	add	r20, r20
 1ae:	55 1f       	adc	r21, r21
 1b0:	6a 95       	dec	r22
 1b2:	e2 f7       	brpl	.-8      	; 0x1ac <DIO_set_pin_dir+0x44>
 1b4:	ba 01       	movw	r22, r20
 1b6:	60 95       	com	r22
 1b8:	62 23       	and	r22, r18
 1ba:	6a bb       	out	0x1a, r22	; 26
 1bc:	08 95       	ret
    } 
    break;

    case 'B':                    // @Port 'B'.
    case 'b':                    // @Port 'b'.
    if (1==direction)            // '1' is for 'O/P'.
 1be:	41 30       	cpi	r20, 0x01	; 1
 1c0:	69 f4       	brne	.+26     	; 0x1dc <DIO_set_pin_dir+0x74>
    {
      SET_BIT(DDRB, pin);        // Set the pin 'PIN' in port 'B' as 'O/P'.
 1c2:	27 b3       	in	r18, 0x17	; 23
 1c4:	81 e0       	ldi	r24, 0x01	; 1
 1c6:	90 e0       	ldi	r25, 0x00	; 0
 1c8:	ac 01       	movw	r20, r24
 1ca:	02 c0       	rjmp	.+4      	; 0x1d0 <DIO_set_pin_dir+0x68>
 1cc:	44 0f       	add	r20, r20
 1ce:	55 1f       	adc	r21, r21
 1d0:	6a 95       	dec	r22
 1d2:	e2 f7       	brpl	.-8      	; 0x1cc <DIO_set_pin_dir+0x64>
 1d4:	ba 01       	movw	r22, r20
 1d6:	62 2b       	or	r22, r18
 1d8:	67 bb       	out	0x17, r22	; 23
 1da:	08 95       	ret
    }
    else if (0 == direction)
 1dc:	41 11       	cpse	r20, r1
 1de:	4b c0       	rjmp	.+150    	; 0x276 <DIO_set_pin_dir+0x10e>
    {
      CLR_BIT(DDRB, pin);        // Set the pin 'PIN' in port 'B' as 'I/P'.
 1e0:	27 b3       	in	r18, 0x17	; 23
 1e2:	81 e0       	ldi	r24, 0x01	; 1
 1e4:	90 e0       	ldi	r25, 0x00	; 0
 1e6:	ac 01       	movw	r20, r24
 1e8:	02 c0       	rjmp	.+4      	; 0x1ee <DIO_set_pin_dir+0x86>
 1ea:	44 0f       	add	r20, r20
 1ec:	55 1f       	adc	r21, r21
 1ee:	6a 95       	dec	r22
 1f0:	e2 f7       	brpl	.-8      	; 0x1ea <DIO_set_pin_dir+0x82>
 1f2:	ba 01       	movw	r22, r20
 1f4:	60 95       	com	r22
 1f6:	62 23       	and	r22, r18
 1f8:	67 bb       	out	0x17, r22	; 23
 1fa:	08 95       	ret
    }
    break;

    case 'C':                    // @Port 'C'.
    case 'c':                    // @Port 'c'. 
    if (1==direction)            // '1' is for 'O/P'.
 1fc:	41 30       	cpi	r20, 0x01	; 1
 1fe:	69 f4       	brne	.+26     	; 0x21a <DIO_set_pin_dir+0xb2>
    {
      SET_BIT(DDRC, pin);        // Set the pin 'PIN' in port 'C' as 'O/P'. 
 200:	24 b3       	in	r18, 0x14	; 20
 202:	81 e0       	ldi	r24, 0x01	; 1
 204:	90 e0       	ldi	r25, 0x00	; 0
 206:	ac 01       	movw	r20, r24
 208:	02 c0       	rjmp	.+4      	; 0x20e <DIO_set_pin_dir+0xa6>
 20a:	44 0f       	add	r20, r20
 20c:	55 1f       	adc	r21, r21
 20e:	6a 95       	dec	r22
 210:	e2 f7       	brpl	.-8      	; 0x20a <DIO_set_pin_dir+0xa2>
 212:	ba 01       	movw	r22, r20
 214:	62 2b       	or	r22, r18
 216:	64 bb       	out	0x14, r22	; 20
 218:	08 95       	ret
    }
    else if (0 == direction)
 21a:	41 11       	cpse	r20, r1
 21c:	2c c0       	rjmp	.+88     	; 0x276 <DIO_set_pin_dir+0x10e>
    {
      CLR_BIT(DDRC, pin);        // Set the pin 'PIN' in port 'C' as 'I/P'. 
 21e:	24 b3       	in	r18, 0x14	; 20
 220:	81 e0       	ldi	r24, 0x01	; 1
 222:	90 e0       	ldi	r25, 0x00	; 0
 224:	ac 01       	movw	r20, r24
 226:	02 c0       	rjmp	.+4      	; 0x22c <DIO_set_pin_dir+0xc4>
 228:	44 0f       	add	r20, r20
 22a:	55 1f       	adc	r21, r21
 22c:	6a 95       	dec	r22
 22e:	e2 f7       	brpl	.-8      	; 0x228 <DIO_set_pin_dir+0xc0>
 230:	ba 01       	movw	r22, r20
 232:	60 95       	com	r22
 234:	62 23       	and	r22, r18
 236:	64 bb       	out	0x14, r22	; 20
 238:	08 95       	ret
    }
    break;

    case 'D':                    // @Port 'D'.
    case 'd':                    // @Port 'd'. 
    if (1==direction)            // '1' is for 'I/P'.
 23a:	41 30       	cpi	r20, 0x01	; 1
 23c:	69 f4       	brne	.+26     	; 0x258 <DIO_set_pin_dir+0xf0>
    {
      SET_BIT(DDRD, pin);        // Set the pin 'PIN' in port 'D' as 'I/P'. 
 23e:	21 b3       	in	r18, 0x11	; 17
 240:	81 e0       	ldi	r24, 0x01	; 1
 242:	90 e0       	ldi	r25, 0x00	; 0
 244:	ac 01       	movw	r20, r24
 246:	02 c0       	rjmp	.+4      	; 0x24c <DIO_set_pin_dir+0xe4>
 248:	44 0f       	add	r20, r20
 24a:	55 1f       	adc	r21, r21
 24c:	6a 95       	dec	r22
 24e:	e2 f7       	brpl	.-8      	; 0x248 <DIO_set_pin_dir+0xe0>
 250:	ba 01       	movw	r22, r20
 252:	62 2b       	or	r22, r18
 254:	61 bb       	out	0x11, r22	; 17
 256:	08 95       	ret
    }
    else if (0 == direction)
 258:	41 11       	cpse	r20, r1
 25a:	0d c0       	rjmp	.+26     	; 0x276 <DIO_set_pin_dir+0x10e>
    {
      CLR_BIT(DDRD, pin);        // Set the pin 'PIN' in port 'D' as 'O/P'.
 25c:	21 b3       	in	r18, 0x11	; 17
 25e:	81 e0       	ldi	r24, 0x01	; 1
 260:	90 e0       	ldi	r25, 0x00	; 0
 262:	ac 01       	movw	r20, r24
 264:	02 c0       	rjmp	.+4      	; 0x26a <DIO_set_pin_dir+0x102>
 266:	44 0f       	add	r20, r20
 268:	55 1f       	adc	r21, r21
 26a:	6a 95       	dec	r22
 26c:	e2 f7       	brpl	.-8      	; 0x266 <DIO_set_pin_dir+0xfe>
 26e:	ba 01       	movw	r22, r20
 270:	60 95       	com	r22
 272:	62 23       	and	r22, r18
 274:	61 bb       	out	0x11, r22	; 17
 276:	08 95       	ret

00000278 <DIO_set_port_dir>:

//..................................................................................

void DIO_set_port_dir(unsigned char port, unsigned char direction)    //Function to set a specific pin direction 'I/P' or 'O/P'.
{
  switch (port)
 278:	90 e0       	ldi	r25, 0x00	; 0
 27a:	fc 01       	movw	r30, r24
 27c:	e1 54       	subi	r30, 0x41	; 65
 27e:	f1 09       	sbc	r31, r1
 280:	e4 32       	cpi	r30, 0x24	; 36
 282:	f1 05       	cpc	r31, r1
 284:	38 f5       	brcc	.+78     	; 0x2d4 <DIO_set_port_dir+0x5c>
 286:	e2 5b       	subi	r30, 0xB2	; 178
 288:	ff 4f       	sbci	r31, 0xFF	; 255
 28a:	0c 94 63 02 	jmp	0x4c6	; 0x4c6 <__tablejump2__>
  {
    case 'A':                    // @Port 'A'.
    case 'a':                    // @Port 'a'.
	if ( 1 == direction){
 28e:	61 30       	cpi	r22, 0x01	; 1
 290:	19 f4       	brne	.+6      	; 0x298 <DIO_set_port_dir+0x20>
		DDRA = 0xFF;             // Set the whole port as 'direction', (1>>'O/P')
 292:	8f ef       	ldi	r24, 0xFF	; 255
 294:	8a bb       	out	0x1a, r24	; 26
 296:	08 95       	ret
	}  
	else if (0 == direction){
 298:	61 11       	cpse	r22, r1
 29a:	1c c0       	rjmp	.+56     	; 0x2d4 <DIO_set_port_dir+0x5c>
		DDRA = 0x00;             // Set the whole port as 'direction', (0>>'I/P')
 29c:	1a ba       	out	0x1a, r1	; 26
 29e:	08 95       	ret
	}
    break;

    case 'B':                    // @Port 'B'.
    case 'b':                    // @Port 'b'.
    if ( 1 == direction){
 2a0:	61 30       	cpi	r22, 0x01	; 1
 2a2:	19 f4       	brne	.+6      	; 0x2aa <DIO_set_port_dir+0x32>
	    DDRB = 0xFF;             // Set the whole port as 'direction', (1>>'O/P')
 2a4:	8f ef       	ldi	r24, 0xFF	; 255
 2a6:	87 bb       	out	0x17, r24	; 23
 2a8:	08 95       	ret
    }
    else if (0 == direction){
 2aa:	61 11       	cpse	r22, r1
 2ac:	13 c0       	rjmp	.+38     	; 0x2d4 <DIO_set_port_dir+0x5c>
	    DDRB = 0x00;             // Set the whole port as 'direction', (0>>'I/P')
 2ae:	17 ba       	out	0x17, r1	; 23
 2b0:	08 95       	ret
    }
	break;

    case 'C':                    // @Port 'C'.
    case 'c':                    // @Port 'c'. 
    if ( 1 == direction){
 2b2:	61 30       	cpi	r22, 0x01	; 1
 2b4:	19 f4       	brne	.+6      	; 0x2bc <DIO_set_port_dir+0x44>
	    DDRC = 0xFF;             // Set the whole port as 'direction', (1>>'O/P')
 2b6:	8f ef       	ldi	r24, 0xFF	; 255
 2b8:	84 bb       	out	0x14, r24	; 20
 2ba:	08 95       	ret
    }
    else if (0 == direction){
 2bc:	61 11       	cpse	r22, r1
 2be:	0a c0       	rjmp	.+20     	; 0x2d4 <DIO_set_port_dir+0x5c>
	    DDRC = 0x00;             // Set the whole port as 'direction', (0>>'I/P')
 2c0:	14 ba       	out	0x14, r1	; 20
 2c2:	08 95       	ret
    }
	break;

    case 'D':                    // @Port 'D'.
    case 'd':                    // @Port 'd'. 
    if ( 1 == direction){
 2c4:	61 30       	cpi	r22, 0x01	; 1
 2c6:	19 f4       	brne	.+6      	; 0x2ce <DIO_set_port_dir+0x56>
	    DDRD = 0xFF;             // Set the whole port as 'direction', (1>>'O/P')
 2c8:	8f ef       	ldi	r24, 0xFF	; 255
 2ca:	81 bb       	out	0x11, r24	; 17
 2cc:	08 95       	ret
    }
    else if (0 == direction){
 2ce:	61 11       	cpse	r22, r1
 2d0:	01 c0       	rjmp	.+2      	; 0x2d4 <DIO_set_port_dir+0x5c>
	    DDRD = 0x00;             // Set the whole port as 'direction', (0>>'I/P')
 2d2:	11 ba       	out	0x11, r1	; 17
 2d4:	08 95       	ret

000002d6 <DIO_write_port>:

//..................................................................................

void DIO_write_port(unsigned char port, unsigned char value)  //Set the 'O/P' Port as 'HIGH' or 'LOW'
{
  switch (port)
 2d6:	90 e0       	ldi	r25, 0x00	; 0
 2d8:	fc 01       	movw	r30, r24
 2da:	e1 54       	subi	r30, 0x41	; 65
 2dc:	f1 09       	sbc	r31, r1
 2de:	e4 32       	cpi	r30, 0x24	; 36
 2e0:	f1 05       	cpc	r31, r1
 2e2:	58 f4       	brcc	.+22     	; 0x2fa <DIO_write_port+0x24>
 2e4:	ee 58       	subi	r30, 0x8E	; 142
 2e6:	ff 4f       	sbci	r31, 0xFF	; 255
 2e8:	0c 94 63 02 	jmp	0x4c6	; 0x4c6 <__tablejump2__>
  {
    case 'A':                  // @Port 'A'.
    case 'a':                  // @Port 'a'.
    PORTA = value;             // Set the whole port value as 'value'.
 2ec:	6b bb       	out	0x1b, r22	; 27
    break;
 2ee:	08 95       	ret
  
    case 'B':                  // @Port 'B'.
    case 'b':                  // @Port 'b'.
    PORTB = value;             // Set the whole port value as 'value'.
 2f0:	68 bb       	out	0x18, r22	; 24
    break;
 2f2:	08 95       	ret

    case 'C':                  // @Port 'C'.
    case 'c':                  // @Port 'c'.
    PORTC = value;             // Set the whole port value as 'value'.
 2f4:	65 bb       	out	0x15, r22	; 21
    break;
 2f6:	08 95       	ret
  
    case 'D':                  // @Port 'D'.
    case 'd':                  // @Port 'd'.
    PORTD = value;             // Set the whole port value as 'value'.
 2f8:	62 bb       	out	0x12, r22	; 18
 2fa:	08 95       	ret

000002fc <sevenSEG_init>:
 2fc:	61 e0       	ldi	r22, 0x01	; 1
 2fe:	0e 94 3c 01 	call	0x278	; 0x278 <DIO_set_port_dir>
 302:	08 95       	ret

00000304 <sevenSEG_write_num>:
 304:	46 2f       	mov	r20, r22
 306:	50 e0       	ldi	r21, 0x00	; 0
 308:	4a 30       	cpi	r20, 0x0A	; 10
 30a:	51 05       	cpc	r21, r1
 30c:	60 f5       	brcc	.+88     	; 0x366 <sevenSEG_write_num+0x62>
 30e:	fa 01       	movw	r30, r20
 310:	ea 56       	subi	r30, 0x6A	; 106
 312:	ff 4f       	sbci	r31, 0xFF	; 255
 314:	0c 94 63 02 	jmp	0x4c6	; 0x4c6 <__tablejump2__>
 318:	6f e3       	ldi	r22, 0x3F	; 63
 31a:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <DIO_write_port>
 31e:	08 95       	ret
 320:	66 e0       	ldi	r22, 0x06	; 6
 322:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <DIO_write_port>
 326:	08 95       	ret
 328:	6b e5       	ldi	r22, 0x5B	; 91
 32a:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <DIO_write_port>
 32e:	08 95       	ret
 330:	6f e4       	ldi	r22, 0x4F	; 79
 332:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <DIO_write_port>
 336:	08 95       	ret
 338:	66 e6       	ldi	r22, 0x66	; 102
 33a:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <DIO_write_port>
 33e:	08 95       	ret
 340:	6d e6       	ldi	r22, 0x6D	; 109
 342:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <DIO_write_port>
 346:	08 95       	ret
 348:	6d e7       	ldi	r22, 0x7D	; 125
 34a:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <DIO_write_port>
 34e:	08 95       	ret
 350:	67 e4       	ldi	r22, 0x47	; 71
 352:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <DIO_write_port>
 356:	08 95       	ret
 358:	6f e7       	ldi	r22, 0x7F	; 127
 35a:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <DIO_write_port>
 35e:	08 95       	ret
 360:	6f e6       	ldi	r22, 0x6F	; 111
 362:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <DIO_write_port>
 366:	08 95       	ret

00000368 <Timer_CTC_init_interrupt>:
 368:	93 b7       	in	r25, 0x33	; 51
 36a:	9f 7b       	andi	r25, 0xBF	; 191
 36c:	93 bf       	out	0x33, r25	; 51
 36e:	93 b7       	in	r25, 0x33	; 51
 370:	98 60       	ori	r25, 0x08	; 8
 372:	93 bf       	out	0x33, r25	; 51
 374:	60 34       	cpi	r22, 0x40	; 64
 376:	71 05       	cpc	r23, r1
 378:	11 f1       	breq	.+68     	; 0x3be <Timer_CTC_init_interrupt+0x56>
 37a:	38 f4       	brcc	.+14     	; 0x38a <Timer_CTC_init_interrupt+0x22>
 37c:	61 15       	cp	r22, r1
 37e:	71 05       	cpc	r23, r1
 380:	61 f0       	breq	.+24     	; 0x39a <Timer_CTC_init_interrupt+0x32>
 382:	68 30       	cpi	r22, 0x08	; 8
 384:	71 05       	cpc	r23, r1
 386:	91 f0       	breq	.+36     	; 0x3ac <Timer_CTC_init_interrupt+0x44>
 388:	35 c0       	rjmp	.+106    	; 0x3f4 <Timer_CTC_init_interrupt+0x8c>
 38a:	61 15       	cp	r22, r1
 38c:	91 e0       	ldi	r25, 0x01	; 1
 38e:	79 07       	cpc	r23, r25
 390:	f9 f0       	breq	.+62     	; 0x3d0 <Timer_CTC_init_interrupt+0x68>
 392:	61 15       	cp	r22, r1
 394:	74 40       	sbci	r23, 0x04	; 4
 396:	29 f1       	breq	.+74     	; 0x3e2 <Timer_CTC_init_interrupt+0x7a>
 398:	2d c0       	rjmp	.+90     	; 0x3f4 <Timer_CTC_init_interrupt+0x8c>
 39a:	93 b7       	in	r25, 0x33	; 51
 39c:	9e 7f       	andi	r25, 0xFE	; 254
 39e:	93 bf       	out	0x33, r25	; 51
 3a0:	93 b7       	in	r25, 0x33	; 51
 3a2:	9d 7f       	andi	r25, 0xFD	; 253
 3a4:	93 bf       	out	0x33, r25	; 51
 3a6:	93 b7       	in	r25, 0x33	; 51
 3a8:	94 60       	ori	r25, 0x04	; 4
 3aa:	93 bf       	out	0x33, r25	; 51
 3ac:	93 b7       	in	r25, 0x33	; 51
 3ae:	9e 7f       	andi	r25, 0xFE	; 254
 3b0:	93 bf       	out	0x33, r25	; 51
 3b2:	93 b7       	in	r25, 0x33	; 51
 3b4:	92 60       	ori	r25, 0x02	; 2
 3b6:	93 bf       	out	0x33, r25	; 51
 3b8:	93 b7       	in	r25, 0x33	; 51
 3ba:	9b 7f       	andi	r25, 0xFB	; 251
 3bc:	93 bf       	out	0x33, r25	; 51
 3be:	93 b7       	in	r25, 0x33	; 51
 3c0:	91 60       	ori	r25, 0x01	; 1
 3c2:	93 bf       	out	0x33, r25	; 51
 3c4:	93 b7       	in	r25, 0x33	; 51
 3c6:	92 60       	ori	r25, 0x02	; 2
 3c8:	93 bf       	out	0x33, r25	; 51
 3ca:	93 b7       	in	r25, 0x33	; 51
 3cc:	9b 7f       	andi	r25, 0xFB	; 251
 3ce:	93 bf       	out	0x33, r25	; 51
 3d0:	93 b7       	in	r25, 0x33	; 51
 3d2:	9e 7f       	andi	r25, 0xFE	; 254
 3d4:	93 bf       	out	0x33, r25	; 51
 3d6:	93 b7       	in	r25, 0x33	; 51
 3d8:	9d 7f       	andi	r25, 0xFD	; 253
 3da:	93 bf       	out	0x33, r25	; 51
 3dc:	93 b7       	in	r25, 0x33	; 51
 3de:	94 60       	ori	r25, 0x04	; 4
 3e0:	93 bf       	out	0x33, r25	; 51
 3e2:	93 b7       	in	r25, 0x33	; 51
 3e4:	91 60       	ori	r25, 0x01	; 1
 3e6:	93 bf       	out	0x33, r25	; 51
 3e8:	93 b7       	in	r25, 0x33	; 51
 3ea:	9d 7f       	andi	r25, 0xFD	; 253
 3ec:	93 bf       	out	0x33, r25	; 51
 3ee:	93 b7       	in	r25, 0x33	; 51
 3f0:	94 60       	ori	r25, 0x04	; 4
 3f2:	93 bf       	out	0x33, r25	; 51
 3f4:	8c bf       	out	0x3c, r24	; 60
 3f6:	78 94       	sei
 3f8:	89 b7       	in	r24, 0x39	; 57
 3fa:	82 60       	ori	r24, 0x02	; 2
 3fc:	89 bf       	out	0x39, r24	; 57
 3fe:	08 95       	ret

00000400 <main>:
volatile unsigned char counter_3 = 0;      // =1 when ISR.

int main(void)
{
	
	sevenSEG_init('A');
 400:	81 e4       	ldi	r24, 0x41	; 65
 402:	0e 94 7e 01 	call	0x2fc	; 0x2fc <sevenSEG_init>
	DIO_set_pin_dir('C',0 , 1);                 //Port 'C' as O/P.
 406:	41 e0       	ldi	r20, 0x01	; 1
 408:	60 e0       	ldi	r22, 0x00	; 0
 40a:	83 e4       	ldi	r24, 0x43	; 67
 40c:	0e 94 b4 00 	call	0x168	; 0x168 <DIO_set_pin_dir>
	DIO_set_pin_dir('C',1 , 1);
 410:	41 e0       	ldi	r20, 0x01	; 1
 412:	61 e0       	ldi	r22, 0x01	; 1
 414:	83 e4       	ldi	r24, 0x43	; 67
 416:	0e 94 b4 00 	call	0x168	; 0x168 <DIO_set_pin_dir>
	Timer_CTC_init_interrupt(80, 1024);       //ISR every 10 mSec.
 41a:	60 e0       	ldi	r22, 0x00	; 0
 41c:	74 e0       	ldi	r23, 0x04	; 4
 41e:	80 e5       	ldi	r24, 0x50	; 80
 420:	0e 94 b4 01 	call	0x368	; 0x368 <Timer_CTC_init_interrupt>
	
    while(1)
    {
        SET_BIT(DDRC, 0);
		CLR_BIT(DDRC, 1);
		sevenSEG_write_num('A', counter_2 % 10);
 424:	cd ec       	ldi	r28, 0xCD	; 205
	DIO_set_pin_dir('C',1 , 1);
	Timer_CTC_init_interrupt(80, 1024);       //ISR every 10 mSec.
	
    while(1)
    {
        SET_BIT(DDRC, 0);
 426:	a0 9a       	sbi	0x14, 0	; 20
		CLR_BIT(DDRC, 1);
 428:	a1 98       	cbi	0x14, 1	; 20
		sevenSEG_write_num('A', counter_2 % 10);
 42a:	60 91 61 00 	lds	r22, 0x0061
 42e:	6c 9f       	mul	r22, r28
 430:	81 2d       	mov	r24, r1
 432:	11 24       	eor	r1, r1
 434:	86 95       	lsr	r24
 436:	86 95       	lsr	r24
 438:	86 95       	lsr	r24
 43a:	88 0f       	add	r24, r24
 43c:	98 2f       	mov	r25, r24
 43e:	99 0f       	add	r25, r25
 440:	99 0f       	add	r25, r25
 442:	89 0f       	add	r24, r25
 444:	68 1b       	sub	r22, r24
 446:	81 e4       	ldi	r24, 0x41	; 65
 448:	0e 94 82 01 	call	0x304	; 0x304 <sevenSEG_write_num>
		
		while (counter_3 == 0);
 44c:	80 91 60 00 	lds	r24, 0x0060
 450:	88 23       	and	r24, r24
 452:	e1 f3       	breq	.-8      	; 0x44c <main+0x4c>
		counter_3 = 0;
 454:	10 92 60 00 	sts	0x0060, r1
		
		CLR_BIT(DDRC, 0);
 458:	a0 98       	cbi	0x14, 0	; 20
		SET_BIT(DDRC, 1);
 45a:	a1 9a       	sbi	0x14, 1	; 20
		sevenSEG_write_num('A', counter_2 / 10);
 45c:	60 91 61 00 	lds	r22, 0x0061
 460:	6c 9f       	mul	r22, r28
 462:	61 2d       	mov	r22, r1
 464:	11 24       	eor	r1, r1
 466:	66 95       	lsr	r22
 468:	66 95       	lsr	r22
 46a:	66 95       	lsr	r22
 46c:	81 e4       	ldi	r24, 0x41	; 65
 46e:	0e 94 82 01 	call	0x304	; 0x304 <sevenSEG_write_num>
		
		while (counter_3 == 0);
 472:	80 91 60 00 	lds	r24, 0x0060
 476:	88 23       	and	r24, r24
 478:	e1 f3       	breq	.-8      	; 0x472 <main+0x72>
		counter_3 = 0;
 47a:	10 92 60 00 	sts	0x0060, r1
		
		if (1000 >= counter_1)
 47e:	80 91 62 00 	lds	r24, 0x0062
		{
			counter_1 = 0;
 482:	10 92 62 00 	sts	0x0062, r1
			counter_2++;
 486:	80 91 61 00 	lds	r24, 0x0061
 48a:	8f 5f       	subi	r24, 0xFF	; 255
 48c:	80 93 61 00 	sts	0x0061, r24
		
		    if (counter_2 == 21)     //Maximum value displayed = 20.
 490:	80 91 61 00 	lds	r24, 0x0061
 494:	85 31       	cpi	r24, 0x15	; 21
 496:	39 f6       	brne	.-114    	; 0x426 <main+0x26>
		    {
			    counter_2 = 0;
 498:	10 92 61 00 	sts	0x0061, r1
 49c:	c4 cf       	rjmp	.-120    	; 0x426 <main+0x26>

0000049e <__vector_10>:
    }
}


ISR(TIMER0_COMP_vect)
{
 49e:	1f 92       	push	r1
 4a0:	0f 92       	push	r0
 4a2:	0f b6       	in	r0, 0x3f	; 63
 4a4:	0f 92       	push	r0
 4a6:	11 24       	eor	r1, r1
 4a8:	8f 93       	push	r24
	counter_1 ++;
 4aa:	80 91 62 00 	lds	r24, 0x0062
 4ae:	8f 5f       	subi	r24, 0xFF	; 255
 4b0:	80 93 62 00 	sts	0x0062, r24
	counter_3 = 1;
 4b4:	81 e0       	ldi	r24, 0x01	; 1
 4b6:	80 93 60 00 	sts	0x0060, r24
 4ba:	8f 91       	pop	r24
 4bc:	0f 90       	pop	r0
 4be:	0f be       	out	0x3f, r0	; 63
 4c0:	0f 90       	pop	r0
 4c2:	1f 90       	pop	r1
 4c4:	18 95       	reti

000004c6 <__tablejump2__>:
 4c6:	ee 0f       	add	r30, r30
 4c8:	ff 1f       	adc	r31, r31

000004ca <__tablejump__>:
 4ca:	05 90       	lpm	r0, Z+
 4cc:	f4 91       	lpm	r31, Z
 4ce:	e0 2d       	mov	r30, r0
 4d0:	09 94       	ijmp

000004d2 <_exit>:
 4d2:	f8 94       	cli

000004d4 <__stop_program>:
 4d4:	ff cf       	rjmp	.-2      	; 0x4d4 <__stop_program>
