
button+internal_pullUp.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000562  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  000005b6  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 000000f0  00000000  00000000  000005e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000008ac  00000000  00000000  000006d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000003a8  00000000  00000000  00000f82  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000408  00000000  00000000  0000132a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000170  00000000  00000000  00001734  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000002b9  00000000  00000000  000018a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000e6a  00000000  00000000  00001b5d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 000000b0  00000000  00000000  000029c7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 ba 00 	jmp	0x174	; 0x174 <__ctors_end>
   4:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
   8:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
   c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
  10:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
  14:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
  18:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
  1c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
  20:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
  24:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
  28:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
  2c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
  30:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
  34:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
  38:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
  3c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
  40:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
  44:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
  48:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
  4c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
  50:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
  54:	fb 00       	.word	0x00fb	; ????
  56:	18 01       	movw	r2, r16
  58:	35 01       	movw	r6, r10
  5a:	52 01       	movw	r10, r4
  5c:	6e 01       	movw	r12, r28
  5e:	6e 01       	movw	r12, r28
  60:	6e 01       	movw	r12, r28
  62:	6e 01       	movw	r12, r28
  64:	6e 01       	movw	r12, r28
  66:	6e 01       	movw	r12, r28
  68:	6e 01       	movw	r12, r28
  6a:	6e 01       	movw	r12, r28
  6c:	6e 01       	movw	r12, r28
  6e:	6e 01       	movw	r12, r28
  70:	6e 01       	movw	r12, r28
  72:	6e 01       	movw	r12, r28
  74:	6e 01       	movw	r12, r28
  76:	6e 01       	movw	r12, r28
  78:	6e 01       	movw	r12, r28
  7a:	6e 01       	movw	r12, r28
  7c:	6e 01       	movw	r12, r28
  7e:	6e 01       	movw	r12, r28
  80:	6e 01       	movw	r12, r28
  82:	6e 01       	movw	r12, r28
  84:	6e 01       	movw	r12, r28
  86:	6e 01       	movw	r12, r28
  88:	6e 01       	movw	r12, r28
  8a:	6e 01       	movw	r12, r28
  8c:	6e 01       	movw	r12, r28
  8e:	6e 01       	movw	r12, r28
  90:	6e 01       	movw	r12, r28
  92:	6e 01       	movw	r12, r28
  94:	fb 00       	.word	0x00fb	; ????
  96:	18 01       	movw	r2, r16
  98:	35 01       	movw	r6, r10
  9a:	52 01       	movw	r10, r4
  9c:	7b 01       	movw	r14, r22
  9e:	98 01       	movw	r18, r16
  a0:	b5 01       	movw	r22, r10
  a2:	d2 01       	movw	r26, r4
  a4:	ee 01       	movw	r28, r28
  a6:	ee 01       	movw	r28, r28
  a8:	ee 01       	movw	r28, r28
  aa:	ee 01       	movw	r28, r28
  ac:	ee 01       	movw	r28, r28
  ae:	ee 01       	movw	r28, r28
  b0:	ee 01       	movw	r28, r28
  b2:	ee 01       	movw	r28, r28
  b4:	ee 01       	movw	r28, r28
  b6:	ee 01       	movw	r28, r28
  b8:	ee 01       	movw	r28, r28
  ba:	ee 01       	movw	r28, r28
  bc:	ee 01       	movw	r28, r28
  be:	ee 01       	movw	r28, r28
  c0:	ee 01       	movw	r28, r28
  c2:	ee 01       	movw	r28, r28
  c4:	ee 01       	movw	r28, r28
  c6:	ee 01       	movw	r28, r28
  c8:	ee 01       	movw	r28, r28
  ca:	ee 01       	movw	r28, r28
  cc:	ee 01       	movw	r28, r28
  ce:	ee 01       	movw	r28, r28
  d0:	ee 01       	movw	r28, r28
  d2:	ee 01       	movw	r28, r28
  d4:	ee 01       	movw	r28, r28
  d6:	ee 01       	movw	r28, r28
  d8:	ee 01       	movw	r28, r28
  da:	ee 01       	movw	r28, r28
  dc:	7b 01       	movw	r14, r22
  de:	98 01       	movw	r18, r16
  e0:	b5 01       	movw	r22, r10
  e2:	d2 01       	movw	r26, r4
  e4:	fd 01       	movw	r30, r26
  e6:	11 02       	muls	r17, r17
  e8:	25 02       	muls	r18, r21
  ea:	39 02       	muls	r19, r25
  ec:	4c 02       	muls	r20, r28
  ee:	4c 02       	muls	r20, r28
  f0:	4c 02       	muls	r20, r28
  f2:	4c 02       	muls	r20, r28
  f4:	4c 02       	muls	r20, r28
  f6:	4c 02       	muls	r20, r28
  f8:	4c 02       	muls	r20, r28
  fa:	4c 02       	muls	r20, r28
  fc:	4c 02       	muls	r20, r28
  fe:	4c 02       	muls	r20, r28
 100:	4c 02       	muls	r20, r28
 102:	4c 02       	muls	r20, r28
 104:	4c 02       	muls	r20, r28
 106:	4c 02       	muls	r20, r28
 108:	4c 02       	muls	r20, r28
 10a:	4c 02       	muls	r20, r28
 10c:	4c 02       	muls	r20, r28
 10e:	4c 02       	muls	r20, r28
 110:	4c 02       	muls	r20, r28
 112:	4c 02       	muls	r20, r28
 114:	4c 02       	muls	r20, r28
 116:	4c 02       	muls	r20, r28
 118:	4c 02       	muls	r20, r28
 11a:	4c 02       	muls	r20, r28
 11c:	4c 02       	muls	r20, r28
 11e:	4c 02       	muls	r20, r28
 120:	4c 02       	muls	r20, r28
 122:	4c 02       	muls	r20, r28
 124:	fd 01       	movw	r30, r26
 126:	11 02       	muls	r17, r17
 128:	25 02       	muls	r18, r21
 12a:	39 02       	muls	r19, r25
 12c:	5a 02       	muls	r21, r26
 12e:	69 02       	muls	r22, r25
 130:	78 02       	muls	r23, r24
 132:	87 02       	muls	r24, r23
 134:	95 02       	muls	r25, r21
 136:	95 02       	muls	r25, r21
 138:	95 02       	muls	r25, r21
 13a:	95 02       	muls	r25, r21
 13c:	95 02       	muls	r25, r21
 13e:	95 02       	muls	r25, r21
 140:	95 02       	muls	r25, r21
 142:	95 02       	muls	r25, r21
 144:	95 02       	muls	r25, r21
 146:	95 02       	muls	r25, r21
 148:	95 02       	muls	r25, r21
 14a:	95 02       	muls	r25, r21
 14c:	95 02       	muls	r25, r21
 14e:	95 02       	muls	r25, r21
 150:	95 02       	muls	r25, r21
 152:	95 02       	muls	r25, r21
 154:	95 02       	muls	r25, r21
 156:	95 02       	muls	r25, r21
 158:	95 02       	muls	r25, r21
 15a:	95 02       	muls	r25, r21
 15c:	95 02       	muls	r25, r21
 15e:	95 02       	muls	r25, r21
 160:	95 02       	muls	r25, r21
 162:	95 02       	muls	r25, r21
 164:	95 02       	muls	r25, r21
 166:	95 02       	muls	r25, r21
 168:	95 02       	muls	r25, r21
 16a:	95 02       	muls	r25, r21
 16c:	5a 02       	muls	r21, r26
 16e:	69 02       	muls	r22, r25
 170:	78 02       	muls	r23, r24
 172:	87 02       	muls	r24, r23

00000174 <__ctors_end>:
 174:	11 24       	eor	r1, r1
 176:	1f be       	out	0x3f, r1	; 63
 178:	cf e5       	ldi	r28, 0x5F	; 95
 17a:	d8 e0       	ldi	r29, 0x08	; 8
 17c:	de bf       	out	0x3e, r29	; 62
 17e:	cd bf       	out	0x3d, r28	; 61
 180:	0e 94 c6 00 	call	0x18c	; 0x18c <main>
 184:	0c 94 af 02 	jmp	0x55e	; 0x55e <_exit>

00000188 <__bad_interrupt>:
 188:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000018c <main>:
#define button_pin   1    //Define the Button pin.


int main(void)
{
	LED_init(led_port, led_pin);                     //Initialize the LED on the M.C
 18c:	60 e0       	ldi	r22, 0x00	; 0
 18e:	81 e4       	ldi	r24, 0x41	; 65
 190:	0e 94 96 02 	call	0x52c	; 0x52c <LED_init>
	BUTTON_init(button_port, button_pin);            //Initialize the Button on the M.C
 194:	61 e0       	ldi	r22, 0x01	; 1
 196:	81 e4       	ldi	r24, 0x41	; 65
 198:	0e 94 a2 02 	call	0x544	; 0x544 <BUTTON_init>
	DIO_connect_pullup(button_port, button_pin, 1);  //Connect M.C internal Pull-Up to the Button pin.
 19c:	41 e0       	ldi	r20, 0x01	; 1
 19e:	61 e0       	ldi	r22, 0x01	; 1
 1a0:	81 e4       	ldi	r24, 0x41	; 65
 1a2:	0e 94 4e 02 	call	0x49c	; 0x49c <DIO_connect_pullup>
	
    while(1)
    {
        if (0 == BUTTON_read(button_port, button_pin))      //Condition if the Button is Pressed (Pull-Up)
 1a6:	61 e0       	ldi	r22, 0x01	; 1
 1a8:	81 e4       	ldi	r24, 0x41	; 65
 1aa:	0e 94 a6 02 	call	0x54c	; 0x54c <BUTTON_read>
 1ae:	81 11       	cpse	r24, r1
 1b0:	11 c0       	rjmp	.+34     	; 0x1d4 <main+0x48>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1b2:	8f e5       	ldi	r24, 0x5F	; 95
 1b4:	9a ee       	ldi	r25, 0xEA	; 234
 1b6:	01 97       	sbiw	r24, 0x01	; 1
 1b8:	f1 f7       	brne	.-4      	; 0x1b6 <main+0x2a>
 1ba:	00 c0       	rjmp	.+0      	; 0x1bc <main+0x30>
 1bc:	00 00       	nop
        {
	        _delay_ms(30);
	        if (0 == BUTTON_read(button_port, button_pin))  //Button bouncing protection.
 1be:	61 e0       	ldi	r22, 0x01	; 1
 1c0:	81 e4       	ldi	r24, 0x41	; 65
 1c2:	0e 94 a6 02 	call	0x54c	; 0x54c <BUTTON_read>
 1c6:	81 11       	cpse	r24, r1
 1c8:	ee cf       	rjmp	.-36     	; 0x1a6 <main+0x1a>
	        {
		        LED_on(led_port, led_pin);      //LED on if button is pressed
 1ca:	60 e0       	ldi	r22, 0x00	; 0
 1cc:	81 e4       	ldi	r24, 0x41	; 65
 1ce:	0e 94 9a 02 	call	0x534	; 0x534 <LED_on>
 1d2:	e9 cf       	rjmp	.-46     	; 0x1a6 <main+0x1a>
	        }
        }
        else
        {
	        LED_off(led_port, led_pin);        //LED off if button is not pressed.
 1d4:	60 e0       	ldi	r22, 0x00	; 0
 1d6:	81 e4       	ldi	r24, 0x41	; 65
 1d8:	0e 94 9e 02 	call	0x53c	; 0x53c <LED_off>
 1dc:	e4 cf       	rjmp	.-56     	; 0x1a6 <main+0x1a>

000001de <DIO_set_pin_dir>:
#include <avr/io.h> 
#include "my_macros.h"      //My standard  bit macros implementation.

void DIO_set_pin_dir(unsigned char port, unsigned char pin, unsigned char direction)    //Function to set a specific pin direction 'I/P'(@direction=0) or 'O/P'(@direction=1).
{
  switch (port)
 1de:	90 e0       	ldi	r25, 0x00	; 0
 1e0:	fc 01       	movw	r30, r24
 1e2:	e1 54       	subi	r30, 0x41	; 65
 1e4:	f1 09       	sbc	r31, r1
 1e6:	e4 32       	cpi	r30, 0x24	; 36
 1e8:	f1 05       	cpc	r31, r1
 1ea:	08 f0       	brcs	.+2      	; 0x1ee <DIO_set_pin_dir+0x10>
 1ec:	77 c0       	rjmp	.+238    	; 0x2dc <DIO_set_pin_dir+0xfe>
 1ee:	e6 5d       	subi	r30, 0xD6	; 214
 1f0:	ff 4f       	sbci	r31, 0xFF	; 255
 1f2:	0c 94 a9 02 	jmp	0x552	; 0x552 <__tablejump2__>
  {
    case 'A':                     // @Port 'A'.
    case 'a':                     // @Port 'a'.
    if (1== direction)            // '1' is for 'O/P'.
 1f6:	41 30       	cpi	r20, 0x01	; 1
 1f8:	69 f4       	brne	.+26     	; 0x214 <DIO_set_pin_dir+0x36>
    {
      SET_BIT(DDRA, pin);         // Set the pin 'PIN' in port 'A' as 'O/P'.
 1fa:	2a b3       	in	r18, 0x1a	; 26
 1fc:	81 e0       	ldi	r24, 0x01	; 1
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	ac 01       	movw	r20, r24
 202:	02 c0       	rjmp	.+4      	; 0x208 <DIO_set_pin_dir+0x2a>
 204:	44 0f       	add	r20, r20
 206:	55 1f       	adc	r21, r21
 208:	6a 95       	dec	r22
 20a:	e2 f7       	brpl	.-8      	; 0x204 <DIO_set_pin_dir+0x26>
 20c:	ba 01       	movw	r22, r20
 20e:	62 2b       	or	r22, r18
 210:	6a bb       	out	0x1a, r22	; 26
 212:	08 95       	ret
    }
    else
    {
      CLR_BIT(DDRA, pin);        // Set the pin 'PIN' in port 'A' as 'I/P'.
 214:	2a b3       	in	r18, 0x1a	; 26
 216:	81 e0       	ldi	r24, 0x01	; 1
 218:	90 e0       	ldi	r25, 0x00	; 0
 21a:	ac 01       	movw	r20, r24
 21c:	02 c0       	rjmp	.+4      	; 0x222 <DIO_set_pin_dir+0x44>
 21e:	44 0f       	add	r20, r20
 220:	55 1f       	adc	r21, r21
 222:	6a 95       	dec	r22
 224:	e2 f7       	brpl	.-8      	; 0x21e <DIO_set_pin_dir+0x40>
 226:	ba 01       	movw	r22, r20
 228:	60 95       	com	r22
 22a:	62 23       	and	r22, r18
 22c:	6a bb       	out	0x1a, r22	; 26
 22e:	08 95       	ret
    } 
    break;

    case 'B':                    // @Port 'B'.
    case 'b':                    // @Port 'b'.
    if (1==direction)            // '1' is for 'O/P'.
 230:	41 30       	cpi	r20, 0x01	; 1
 232:	69 f4       	brne	.+26     	; 0x24e <DIO_set_pin_dir+0x70>
    {
      SET_BIT(DDRB, pin);        // Set the pin 'PIN' in port 'B' as 'O/P'.
 234:	27 b3       	in	r18, 0x17	; 23
 236:	81 e0       	ldi	r24, 0x01	; 1
 238:	90 e0       	ldi	r25, 0x00	; 0
 23a:	ac 01       	movw	r20, r24
 23c:	02 c0       	rjmp	.+4      	; 0x242 <DIO_set_pin_dir+0x64>
 23e:	44 0f       	add	r20, r20
 240:	55 1f       	adc	r21, r21
 242:	6a 95       	dec	r22
 244:	e2 f7       	brpl	.-8      	; 0x23e <DIO_set_pin_dir+0x60>
 246:	ba 01       	movw	r22, r20
 248:	62 2b       	or	r22, r18
 24a:	67 bb       	out	0x17, r22	; 23
 24c:	08 95       	ret
    }
    else
    {
      CLR_BIT(DDRB, pin);        // Set the pin 'PIN' in port 'B' as 'I/P'.
 24e:	27 b3       	in	r18, 0x17	; 23
 250:	81 e0       	ldi	r24, 0x01	; 1
 252:	90 e0       	ldi	r25, 0x00	; 0
 254:	ac 01       	movw	r20, r24
 256:	02 c0       	rjmp	.+4      	; 0x25c <DIO_set_pin_dir+0x7e>
 258:	44 0f       	add	r20, r20
 25a:	55 1f       	adc	r21, r21
 25c:	6a 95       	dec	r22
 25e:	e2 f7       	brpl	.-8      	; 0x258 <DIO_set_pin_dir+0x7a>
 260:	ba 01       	movw	r22, r20
 262:	60 95       	com	r22
 264:	62 23       	and	r22, r18
 266:	67 bb       	out	0x17, r22	; 23
 268:	08 95       	ret
    }
    break;

    case 'C':                    // @Port 'C'.
    case 'c':                    // @Port 'c'. 
    if (1==direction)            // '1' is for 'O/P'.
 26a:	41 30       	cpi	r20, 0x01	; 1
 26c:	69 f4       	brne	.+26     	; 0x288 <DIO_set_pin_dir+0xaa>
    {
      SET_BIT(DDRC, pin);        // Set the pin 'PIN' in port 'C' as 'O/P'. 
 26e:	24 b3       	in	r18, 0x14	; 20
 270:	81 e0       	ldi	r24, 0x01	; 1
 272:	90 e0       	ldi	r25, 0x00	; 0
 274:	ac 01       	movw	r20, r24
 276:	02 c0       	rjmp	.+4      	; 0x27c <DIO_set_pin_dir+0x9e>
 278:	44 0f       	add	r20, r20
 27a:	55 1f       	adc	r21, r21
 27c:	6a 95       	dec	r22
 27e:	e2 f7       	brpl	.-8      	; 0x278 <DIO_set_pin_dir+0x9a>
 280:	ba 01       	movw	r22, r20
 282:	62 2b       	or	r22, r18
 284:	64 bb       	out	0x14, r22	; 20
 286:	08 95       	ret
    }
    else
    {
      CLR_BIT(DDRC, pin);        // Set the pin 'PIN' in port 'C' as 'I/P'. 
 288:	24 b3       	in	r18, 0x14	; 20
 28a:	81 e0       	ldi	r24, 0x01	; 1
 28c:	90 e0       	ldi	r25, 0x00	; 0
 28e:	ac 01       	movw	r20, r24
 290:	02 c0       	rjmp	.+4      	; 0x296 <DIO_set_pin_dir+0xb8>
 292:	44 0f       	add	r20, r20
 294:	55 1f       	adc	r21, r21
 296:	6a 95       	dec	r22
 298:	e2 f7       	brpl	.-8      	; 0x292 <DIO_set_pin_dir+0xb4>
 29a:	ba 01       	movw	r22, r20
 29c:	60 95       	com	r22
 29e:	62 23       	and	r22, r18
 2a0:	64 bb       	out	0x14, r22	; 20
 2a2:	08 95       	ret
    }
    break;

    case 'D':                    // @Port 'D'.
    case 'd':                    // @Port 'd'. 
    if (1==direction)            // '1' is for 'O/P'.
 2a4:	41 30       	cpi	r20, 0x01	; 1
 2a6:	69 f4       	brne	.+26     	; 0x2c2 <DIO_set_pin_dir+0xe4>
    {
      SET_BIT(DDRD, pin);        // Set the pin 'PIN' in port 'D' as 'O/P'. 
 2a8:	21 b3       	in	r18, 0x11	; 17
 2aa:	81 e0       	ldi	r24, 0x01	; 1
 2ac:	90 e0       	ldi	r25, 0x00	; 0
 2ae:	ac 01       	movw	r20, r24
 2b0:	02 c0       	rjmp	.+4      	; 0x2b6 <DIO_set_pin_dir+0xd8>
 2b2:	44 0f       	add	r20, r20
 2b4:	55 1f       	adc	r21, r21
 2b6:	6a 95       	dec	r22
 2b8:	e2 f7       	brpl	.-8      	; 0x2b2 <DIO_set_pin_dir+0xd4>
 2ba:	ba 01       	movw	r22, r20
 2bc:	62 2b       	or	r22, r18
 2be:	61 bb       	out	0x11, r22	; 17
 2c0:	08 95       	ret
    }
    else
    {
      CLR_BIT(DDRD, pin);        // Set the pin 'PIN' in port 'D' as 'I/P'.
 2c2:	21 b3       	in	r18, 0x11	; 17
 2c4:	81 e0       	ldi	r24, 0x01	; 1
 2c6:	90 e0       	ldi	r25, 0x00	; 0
 2c8:	ac 01       	movw	r20, r24
 2ca:	02 c0       	rjmp	.+4      	; 0x2d0 <DIO_set_pin_dir+0xf2>
 2cc:	44 0f       	add	r20, r20
 2ce:	55 1f       	adc	r21, r21
 2d0:	6a 95       	dec	r22
 2d2:	e2 f7       	brpl	.-8      	; 0x2cc <DIO_set_pin_dir+0xee>
 2d4:	ba 01       	movw	r22, r20
 2d6:	60 95       	com	r22
 2d8:	62 23       	and	r22, r18
 2da:	61 bb       	out	0x11, r22	; 17
 2dc:	08 95       	ret

000002de <DIO_write_pin>:
//..................................................................................


void DIO_write_pin(unsigned char port, unsigned char pin, unsigned char value)  //Set the 'O/P' pin as 'HIGH' or 'LOW'
{
  switch (port)
 2de:	90 e0       	ldi	r25, 0x00	; 0
 2e0:	fc 01       	movw	r30, r24
 2e2:	e1 54       	subi	r30, 0x41	; 65
 2e4:	f1 09       	sbc	r31, r1
 2e6:	e4 32       	cpi	r30, 0x24	; 36
 2e8:	f1 05       	cpc	r31, r1
 2ea:	08 f0       	brcs	.+2      	; 0x2ee <DIO_write_pin+0x10>
 2ec:	77 c0       	rjmp	.+238    	; 0x3dc <DIO_write_pin+0xfe>
 2ee:	e2 5b       	subi	r30, 0xB2	; 178
 2f0:	ff 4f       	sbci	r31, 0xFF	; 255
 2f2:	0c 94 a9 02 	jmp	0x552	; 0x552 <__tablejump2__>
  {
    case 'A':                  // @Port 'A'.
    case 'a':                  // @Port 'a'.
    if (1==value)             
 2f6:	41 30       	cpi	r20, 0x01	; 1
 2f8:	69 f4       	brne	.+26     	; 0x314 <DIO_write_pin+0x36>
    {
      SET_BIT(PORTA, pin);     // Set pin 'PIN' in port 'A' as 'HIGH'.
 2fa:	2b b3       	in	r18, 0x1b	; 27
 2fc:	81 e0       	ldi	r24, 0x01	; 1
 2fe:	90 e0       	ldi	r25, 0x00	; 0
 300:	ac 01       	movw	r20, r24
 302:	02 c0       	rjmp	.+4      	; 0x308 <DIO_write_pin+0x2a>
 304:	44 0f       	add	r20, r20
 306:	55 1f       	adc	r21, r21
 308:	6a 95       	dec	r22
 30a:	e2 f7       	brpl	.-8      	; 0x304 <DIO_write_pin+0x26>
 30c:	ba 01       	movw	r22, r20
 30e:	62 2b       	or	r22, r18
 310:	6b bb       	out	0x1b, r22	; 27
 312:	08 95       	ret
    }
    else
    {
      CLR_BIT(PORTA, pin);     // Set pin 'PIN' in port 'A' as 'LOW'.
 314:	2b b3       	in	r18, 0x1b	; 27
 316:	81 e0       	ldi	r24, 0x01	; 1
 318:	90 e0       	ldi	r25, 0x00	; 0
 31a:	ac 01       	movw	r20, r24
 31c:	02 c0       	rjmp	.+4      	; 0x322 <DIO_write_pin+0x44>
 31e:	44 0f       	add	r20, r20
 320:	55 1f       	adc	r21, r21
 322:	6a 95       	dec	r22
 324:	e2 f7       	brpl	.-8      	; 0x31e <DIO_write_pin+0x40>
 326:	ba 01       	movw	r22, r20
 328:	60 95       	com	r22
 32a:	62 23       	and	r22, r18
 32c:	6b bb       	out	0x1b, r22	; 27
 32e:	08 95       	ret
    }
    break;
  
    case 'B':                  // @Port 'B'.
    case 'b':                  // @Port 'b'.
    if (1==value)             
 330:	41 30       	cpi	r20, 0x01	; 1
 332:	69 f4       	brne	.+26     	; 0x34e <DIO_write_pin+0x70>
    {
      SET_BIT(PORTB, pin);    // Set pin 'PIN' in port 'B' as 'HIGH'.
 334:	28 b3       	in	r18, 0x18	; 24
 336:	81 e0       	ldi	r24, 0x01	; 1
 338:	90 e0       	ldi	r25, 0x00	; 0
 33a:	ac 01       	movw	r20, r24
 33c:	02 c0       	rjmp	.+4      	; 0x342 <DIO_write_pin+0x64>
 33e:	44 0f       	add	r20, r20
 340:	55 1f       	adc	r21, r21
 342:	6a 95       	dec	r22
 344:	e2 f7       	brpl	.-8      	; 0x33e <DIO_write_pin+0x60>
 346:	ba 01       	movw	r22, r20
 348:	62 2b       	or	r22, r18
 34a:	68 bb       	out	0x18, r22	; 24
 34c:	08 95       	ret
    }
    else
    {
      CLR_BIT(PORTB, pin);    // Set pin 'PIN' in port 'B' as 'LOW'.
 34e:	28 b3       	in	r18, 0x18	; 24
 350:	81 e0       	ldi	r24, 0x01	; 1
 352:	90 e0       	ldi	r25, 0x00	; 0
 354:	ac 01       	movw	r20, r24
 356:	02 c0       	rjmp	.+4      	; 0x35c <DIO_write_pin+0x7e>
 358:	44 0f       	add	r20, r20
 35a:	55 1f       	adc	r21, r21
 35c:	6a 95       	dec	r22
 35e:	e2 f7       	brpl	.-8      	; 0x358 <DIO_write_pin+0x7a>
 360:	ba 01       	movw	r22, r20
 362:	60 95       	com	r22
 364:	62 23       	and	r22, r18
 366:	68 bb       	out	0x18, r22	; 24
 368:	08 95       	ret
    }
    break;

    case 'C':                  // @Port 'C'.
    case 'c':                  // @Port 'c'.
    if (1==value)             
 36a:	41 30       	cpi	r20, 0x01	; 1
 36c:	69 f4       	brne	.+26     	; 0x388 <DIO_write_pin+0xaa>
    {
      SET_BIT(PORTC, pin);    // Set pin 'PIN' in port 'C' as 'HIGH'.
 36e:	25 b3       	in	r18, 0x15	; 21
 370:	81 e0       	ldi	r24, 0x01	; 1
 372:	90 e0       	ldi	r25, 0x00	; 0
 374:	ac 01       	movw	r20, r24
 376:	02 c0       	rjmp	.+4      	; 0x37c <DIO_write_pin+0x9e>
 378:	44 0f       	add	r20, r20
 37a:	55 1f       	adc	r21, r21
 37c:	6a 95       	dec	r22
 37e:	e2 f7       	brpl	.-8      	; 0x378 <DIO_write_pin+0x9a>
 380:	ba 01       	movw	r22, r20
 382:	62 2b       	or	r22, r18
 384:	65 bb       	out	0x15, r22	; 21
 386:	08 95       	ret
    }
    else
    {
      CLR_BIT(PORTC, pin);    // Set pin 'PIN' in port 'C' as 'LOW'.
 388:	25 b3       	in	r18, 0x15	; 21
 38a:	81 e0       	ldi	r24, 0x01	; 1
 38c:	90 e0       	ldi	r25, 0x00	; 0
 38e:	ac 01       	movw	r20, r24
 390:	02 c0       	rjmp	.+4      	; 0x396 <DIO_write_pin+0xb8>
 392:	44 0f       	add	r20, r20
 394:	55 1f       	adc	r21, r21
 396:	6a 95       	dec	r22
 398:	e2 f7       	brpl	.-8      	; 0x392 <DIO_write_pin+0xb4>
 39a:	ba 01       	movw	r22, r20
 39c:	60 95       	com	r22
 39e:	62 23       	and	r22, r18
 3a0:	65 bb       	out	0x15, r22	; 21
 3a2:	08 95       	ret
    }
    break;
  
    case 'D':                // @Port 'D'.
    case 'd':                // @Port 'd'.
    if (1==value)             
 3a4:	41 30       	cpi	r20, 0x01	; 1
 3a6:	69 f4       	brne	.+26     	; 0x3c2 <DIO_write_pin+0xe4>
    {
      SET_BIT(PORTD, pin);   // Set pin 'PIN' in port 'D' as 'HIGH'.
 3a8:	22 b3       	in	r18, 0x12	; 18
 3aa:	81 e0       	ldi	r24, 0x01	; 1
 3ac:	90 e0       	ldi	r25, 0x00	; 0
 3ae:	ac 01       	movw	r20, r24
 3b0:	02 c0       	rjmp	.+4      	; 0x3b6 <DIO_write_pin+0xd8>
 3b2:	44 0f       	add	r20, r20
 3b4:	55 1f       	adc	r21, r21
 3b6:	6a 95       	dec	r22
 3b8:	e2 f7       	brpl	.-8      	; 0x3b2 <DIO_write_pin+0xd4>
 3ba:	ba 01       	movw	r22, r20
 3bc:	62 2b       	or	r22, r18
 3be:	62 bb       	out	0x12, r22	; 18
 3c0:	08 95       	ret
    }
    else
    {
      CLR_BIT(PORTD, pin);   // Set pin 'PIN' in port 'D' as 'LOW'.
 3c2:	22 b3       	in	r18, 0x12	; 18
 3c4:	81 e0       	ldi	r24, 0x01	; 1
 3c6:	90 e0       	ldi	r25, 0x00	; 0
 3c8:	ac 01       	movw	r20, r24
 3ca:	02 c0       	rjmp	.+4      	; 0x3d0 <DIO_write_pin+0xf2>
 3cc:	44 0f       	add	r20, r20
 3ce:	55 1f       	adc	r21, r21
 3d0:	6a 95       	dec	r22
 3d2:	e2 f7       	brpl	.-8      	; 0x3cc <DIO_write_pin+0xee>
 3d4:	ba 01       	movw	r22, r20
 3d6:	60 95       	com	r22
 3d8:	62 23       	and	r22, r18
 3da:	62 bb       	out	0x12, r22	; 18
 3dc:	08 95       	ret

000003de <DIO_read_pin>:
}

//..................................................................................

unsigned char DIO_read_pin(unsigned char port, unsigned char pin)  //Read the value from 'I/P' pin
{
 3de:	96 2f       	mov	r25, r22
  unsigned char value;
  
  switch (port)
 3e0:	48 2f       	mov	r20, r24
 3e2:	50 e0       	ldi	r21, 0x00	; 0
 3e4:	fa 01       	movw	r30, r20
 3e6:	e1 54       	subi	r30, 0x41	; 65
 3e8:	f1 09       	sbc	r31, r1
 3ea:	e4 32       	cpi	r30, 0x24	; 36
 3ec:	f1 05       	cpc	r31, r1
 3ee:	08 f0       	brcs	.+2      	; 0x3f2 <DIO_read_pin+0x14>
 3f0:	53 c0       	rjmp	.+166    	; 0x498 <DIO_read_pin+0xba>
 3f2:	ee 58       	subi	r30, 0x8E	; 142
 3f4:	ff 4f       	sbci	r31, 0xFF	; 255
 3f6:	0c 94 a9 02 	jmp	0x552	; 0x552 <__tablejump2__>
  {
    case 'A':                      // @Port 'A'.
    case 'a':                      // @Port 'a'.
    value = READ_BIT(PINA, pin);   // Read the value of pin 'pin', assigned to 'value'.
 3fa:	29 b3       	in	r18, 0x19	; 25
 3fc:	41 e0       	ldi	r20, 0x01	; 1
 3fe:	50 e0       	ldi	r21, 0x00	; 0
 400:	09 2e       	mov	r0, r25
 402:	02 c0       	rjmp	.+4      	; 0x408 <DIO_read_pin+0x2a>
 404:	44 0f       	add	r20, r20
 406:	55 1f       	adc	r21, r21
 408:	0a 94       	dec	r0
 40a:	e2 f7       	brpl	.-8      	; 0x404 <DIO_read_pin+0x26>
 40c:	30 e0       	ldi	r19, 0x00	; 0
 40e:	24 23       	and	r18, r20
 410:	35 23       	and	r19, r21
 412:	a9 01       	movw	r20, r18
 414:	02 c0       	rjmp	.+4      	; 0x41a <DIO_read_pin+0x3c>
 416:	55 95       	asr	r21
 418:	47 95       	ror	r20
 41a:	9a 95       	dec	r25
 41c:	e2 f7       	brpl	.-8      	; 0x416 <DIO_read_pin+0x38>
 41e:	24 2f       	mov	r18, r20
    break;
 420:	3b c0       	rjmp	.+118    	; 0x498 <DIO_read_pin+0xba>

    case 'B':                      // @Port 'B'.
    case 'b':                      // @Port 'b'.
    value = READ_BIT(PINB, pin);   // Read the value of pin 'pin', assigned to 'value'.
 422:	26 b3       	in	r18, 0x16	; 22
 424:	41 e0       	ldi	r20, 0x01	; 1
 426:	50 e0       	ldi	r21, 0x00	; 0
 428:	09 2e       	mov	r0, r25
 42a:	02 c0       	rjmp	.+4      	; 0x430 <DIO_read_pin+0x52>
 42c:	44 0f       	add	r20, r20
 42e:	55 1f       	adc	r21, r21
 430:	0a 94       	dec	r0
 432:	e2 f7       	brpl	.-8      	; 0x42c <DIO_read_pin+0x4e>
 434:	30 e0       	ldi	r19, 0x00	; 0
 436:	24 23       	and	r18, r20
 438:	35 23       	and	r19, r21
 43a:	a9 01       	movw	r20, r18
 43c:	02 c0       	rjmp	.+4      	; 0x442 <DIO_read_pin+0x64>
 43e:	55 95       	asr	r21
 440:	47 95       	ror	r20
 442:	9a 95       	dec	r25
 444:	e2 f7       	brpl	.-8      	; 0x43e <DIO_read_pin+0x60>
 446:	24 2f       	mov	r18, r20
    break;
 448:	27 c0       	rjmp	.+78     	; 0x498 <DIO_read_pin+0xba>

    case 'C':                      // @Port 'C'.
    case 'c':                      // @Port 'c'.
    value = READ_BIT(PINC, pin);   // Read the value of pin 'pin', assigned to 'value'.
 44a:	23 b3       	in	r18, 0x13	; 19
 44c:	41 e0       	ldi	r20, 0x01	; 1
 44e:	50 e0       	ldi	r21, 0x00	; 0
 450:	09 2e       	mov	r0, r25
 452:	02 c0       	rjmp	.+4      	; 0x458 <DIO_read_pin+0x7a>
 454:	44 0f       	add	r20, r20
 456:	55 1f       	adc	r21, r21
 458:	0a 94       	dec	r0
 45a:	e2 f7       	brpl	.-8      	; 0x454 <DIO_read_pin+0x76>
 45c:	30 e0       	ldi	r19, 0x00	; 0
 45e:	24 23       	and	r18, r20
 460:	35 23       	and	r19, r21
 462:	a9 01       	movw	r20, r18
 464:	02 c0       	rjmp	.+4      	; 0x46a <DIO_read_pin+0x8c>
 466:	55 95       	asr	r21
 468:	47 95       	ror	r20
 46a:	9a 95       	dec	r25
 46c:	e2 f7       	brpl	.-8      	; 0x466 <DIO_read_pin+0x88>
 46e:	24 2f       	mov	r18, r20
    break;
 470:	13 c0       	rjmp	.+38     	; 0x498 <DIO_read_pin+0xba>

    case 'D':                      // @Port 'D'.
    case 'd':                      // @Port 'd'.
    value = READ_BIT(PIND, pin);   // Read the value of pin 'pin', assigned to 'value'.
 472:	20 b3       	in	r18, 0x10	; 16
 474:	41 e0       	ldi	r20, 0x01	; 1
 476:	50 e0       	ldi	r21, 0x00	; 0
 478:	09 2e       	mov	r0, r25
 47a:	02 c0       	rjmp	.+4      	; 0x480 <DIO_read_pin+0xa2>
 47c:	44 0f       	add	r20, r20
 47e:	55 1f       	adc	r21, r21
 480:	0a 94       	dec	r0
 482:	e2 f7       	brpl	.-8      	; 0x47c <DIO_read_pin+0x9e>
 484:	30 e0       	ldi	r19, 0x00	; 0
 486:	24 23       	and	r18, r20
 488:	35 23       	and	r19, r21
 48a:	a9 01       	movw	r20, r18
 48c:	02 c0       	rjmp	.+4      	; 0x492 <DIO_read_pin+0xb4>
 48e:	55 95       	asr	r21
 490:	47 95       	ror	r20
 492:	9a 95       	dec	r25
 494:	e2 f7       	brpl	.-8      	; 0x48e <DIO_read_pin+0xb0>
 496:	24 2f       	mov	r18, r20

    default:                       // If nothing from the above, Break.
      break;
  }
  return value;
}
 498:	82 2f       	mov	r24, r18
 49a:	08 95       	ret

0000049c <DIO_connect_pullup>:

//..................................................................................

void DIO_connect_pullup (unsigned char port, unsigned char pin, unsigned char pullup)  //Set the pin Microcontroller's internal 'PULL-UP' connection 'ON'(@pullup=1) or 'OFF'(@pullup=0)
{
  switch(port)
 49c:	90 e0       	ldi	r25, 0x00	; 0
 49e:	fc 01       	movw	r30, r24
 4a0:	e1 54       	subi	r30, 0x41	; 65
 4a2:	f1 09       	sbc	r31, r1
 4a4:	e4 32       	cpi	r30, 0x24	; 36
 4a6:	f1 05       	cpc	r31, r1
 4a8:	08 f0       	brcs	.+2      	; 0x4ac <DIO_connect_pullup+0x10>
 4aa:	3f c0       	rjmp	.+126    	; 0x52a <DIO_connect_pullup+0x8e>
 4ac:	ea 56       	subi	r30, 0x6A	; 106
 4ae:	ff 4f       	sbci	r31, 0xFF	; 255
 4b0:	0c 94 a9 02 	jmp	0x552	; 0x552 <__tablejump2__>
  {
    case 'A':
    case 'a':
    if (1 == pullup)
 4b4:	41 30       	cpi	r20, 0x01	; 1
 4b6:	c9 f5       	brne	.+114    	; 0x52a <DIO_connect_pullup+0x8e>
    {
      SET_BIT(PORTA, pin);
 4b8:	4b b3       	in	r20, 0x1b	; 27
 4ba:	21 e0       	ldi	r18, 0x01	; 1
 4bc:	30 e0       	ldi	r19, 0x00	; 0
 4be:	c9 01       	movw	r24, r18
 4c0:	06 2e       	mov	r0, r22
 4c2:	02 c0       	rjmp	.+4      	; 0x4c8 <DIO_connect_pullup+0x2c>
 4c4:	88 0f       	add	r24, r24
 4c6:	99 1f       	adc	r25, r25
 4c8:	0a 94       	dec	r0
 4ca:	e2 f7       	brpl	.-8      	; 0x4c4 <DIO_connect_pullup+0x28>
 4cc:	84 2b       	or	r24, r20
 4ce:	8b bb       	out	0x1b, r24	; 27
 4d0:	02 c0       	rjmp	.+4      	; 0x4d6 <DIO_connect_pullup+0x3a>
    }
    
    case 'B':
    case 'b':
    if (1 == pullup)
 4d2:	41 30       	cpi	r20, 0x01	; 1
 4d4:	51 f5       	brne	.+84     	; 0x52a <DIO_connect_pullup+0x8e>
    {
      SET_BIT(PORTB, pin);
 4d6:	48 b3       	in	r20, 0x18	; 24
 4d8:	21 e0       	ldi	r18, 0x01	; 1
 4da:	30 e0       	ldi	r19, 0x00	; 0
 4dc:	c9 01       	movw	r24, r18
 4de:	06 2e       	mov	r0, r22
 4e0:	02 c0       	rjmp	.+4      	; 0x4e6 <DIO_connect_pullup+0x4a>
 4e2:	88 0f       	add	r24, r24
 4e4:	99 1f       	adc	r25, r25
 4e6:	0a 94       	dec	r0
 4e8:	e2 f7       	brpl	.-8      	; 0x4e2 <DIO_connect_pullup+0x46>
 4ea:	84 2b       	or	r24, r20
 4ec:	88 bb       	out	0x18, r24	; 24
 4ee:	02 c0       	rjmp	.+4      	; 0x4f4 <DIO_connect_pullup+0x58>
    }

    case 'C':
    case 'c':
    if (1 == pullup)
 4f0:	41 30       	cpi	r20, 0x01	; 1
 4f2:	d9 f4       	brne	.+54     	; 0x52a <DIO_connect_pullup+0x8e>
    {
      SET_BIT(PORTC, pin);
 4f4:	45 b3       	in	r20, 0x15	; 21
 4f6:	21 e0       	ldi	r18, 0x01	; 1
 4f8:	30 e0       	ldi	r19, 0x00	; 0
 4fa:	c9 01       	movw	r24, r18
 4fc:	06 2e       	mov	r0, r22
 4fe:	02 c0       	rjmp	.+4      	; 0x504 <DIO_connect_pullup+0x68>
 500:	88 0f       	add	r24, r24
 502:	99 1f       	adc	r25, r25
 504:	0a 94       	dec	r0
 506:	e2 f7       	brpl	.-8      	; 0x500 <DIO_connect_pullup+0x64>
 508:	84 2b       	or	r24, r20
 50a:	85 bb       	out	0x15, r24	; 21
 50c:	02 c0       	rjmp	.+4      	; 0x512 <DIO_connect_pullup+0x76>
    }

    case 'D':
    case 'd':
    if (1 == pullup)
 50e:	41 30       	cpi	r20, 0x01	; 1
 510:	61 f4       	brne	.+24     	; 0x52a <DIO_connect_pullup+0x8e>
    {
      SET_BIT(PORTD, pin);
 512:	22 b3       	in	r18, 0x12	; 18
 514:	81 e0       	ldi	r24, 0x01	; 1
 516:	90 e0       	ldi	r25, 0x00	; 0
 518:	ac 01       	movw	r20, r24
 51a:	02 c0       	rjmp	.+4      	; 0x520 <DIO_connect_pullup+0x84>
 51c:	44 0f       	add	r20, r20
 51e:	55 1f       	adc	r21, r21
 520:	6a 95       	dec	r22
 522:	e2 f7       	brpl	.-8      	; 0x51c <DIO_connect_pullup+0x80>
 524:	ba 01       	movw	r22, r20
 526:	62 2b       	or	r22, r18
 528:	62 bb       	out	0x12, r22	; 18
 52a:	08 95       	ret

0000052c <LED_init>:

#include "DIO.h"

void LED_init(unsigned char port, unsigned char pin)
{
  DIO_set_pin_dir(port, pin, 1);        //Initialize the 'pin' to the 'LED'
 52c:	41 e0       	ldi	r20, 0x01	; 1
 52e:	0e 94 ef 00 	call	0x1de	; 0x1de <DIO_set_pin_dir>
 532:	08 95       	ret

00000534 <LED_on>:
}

void LED_on(unsigned char port, unsigned char pin)
{
  DIO_write_pin(port, pin, 1);         //Turn 'ON' the 'LED' on the 'pin' of 'port' 
 534:	41 e0       	ldi	r20, 0x01	; 1
 536:	0e 94 6f 01 	call	0x2de	; 0x2de <DIO_write_pin>
 53a:	08 95       	ret

0000053c <LED_off>:
}

void LED_off(unsigned char port, unsigned char pin)
{
  DIO_write_pin(port, pin, 0);         //Turn 'OFF' the 'LED' on the 'pin' of 'port' 
 53c:	40 e0       	ldi	r20, 0x00	; 0
 53e:	0e 94 6f 01 	call	0x2de	; 0x2de <DIO_write_pin>
 542:	08 95       	ret

00000544 <BUTTON_init>:
#include <util/delay.h>


void BUTTON_init(unsigned char port, unsigned char pin)    //Initialize 'I/P' on 'pin' of 'port'
{
  DIO_set_pin_dir (port, pin, 0);
 544:	40 e0       	ldi	r20, 0x00	; 0
 546:	0e 94 ef 00 	call	0x1de	; 0x1de <DIO_set_pin_dir>
 54a:	08 95       	ret

0000054c <BUTTON_read>:


unsigned char BUTTON_read(unsigned char port, unsigned char pin)  //Read the 'I/P' value of the Push Button
{
  unsigned char value = 0;
  value = DIO_read_pin (port, pin);
 54c:	0e 94 ef 01 	call	0x3de	; 0x3de <DIO_read_pin>
	  }
  }  
  */
  
  return value;
 550:	08 95       	ret

00000552 <__tablejump2__>:
 552:	ee 0f       	add	r30, r30
 554:	ff 1f       	adc	r31, r31

00000556 <__tablejump__>:
 556:	05 90       	lpm	r0, Z+
 558:	f4 91       	lpm	r31, Z
 55a:	e0 2d       	mov	r30, r0
 55c:	09 94       	ijmp

0000055e <_exit>:
 55e:	f8 94       	cli

00000560 <__stop_program>:
 560:	ff cf       	rjmp	.-2      	; 0x560 <__stop_program>
