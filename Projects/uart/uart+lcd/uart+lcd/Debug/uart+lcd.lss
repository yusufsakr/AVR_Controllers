
uart+lcd.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000012e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  00000182  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000058  00000000  00000000  000001b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000298  00000000  00000000  0000020a  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000001db  00000000  00000000  000004a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   0000022f  00000000  00000000  0000067d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000084  00000000  00000000  000008ac  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000001d2  00000000  00000000  00000930  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000000ad  00000000  00000000  00000b02  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000038  00000000  00000000  00000baf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 95 00 	jmp	0x12a	; 0x12a <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include <util/delay.h>

int main(void)
{
	//LCD_init();
	UART_init(9600);
  6c:	60 e8       	ldi	r22, 0x80	; 128
  6e:	75 e2       	ldi	r23, 0x25	; 37
  70:	80 e0       	ldi	r24, 0x00	; 0
  72:	90 e0       	ldi	r25, 0x00	; 0
  74:	0e 94 49 00 	call	0x92	; 0x92 <UART_init>
	
    while(1)
    {
        //x = UART_receive();
		UART_send_char ('A');
  78:	81 e4       	ldi	r24, 0x41	; 65
  7a:	0e 94 6f 00 	call	0xde	; 0xde <UART_send_char>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  7e:	2f ef       	ldi	r18, 0xFF	; 255
  80:	89 e6       	ldi	r24, 0x69	; 105
  82:	98 e1       	ldi	r25, 0x18	; 24
  84:	21 50       	subi	r18, 0x01	; 1
  86:	80 40       	sbci	r24, 0x00	; 0
  88:	90 40       	sbci	r25, 0x00	; 0
  8a:	e1 f7       	brne	.-8      	; 0x84 <main+0x18>
  8c:	00 c0       	rjmp	.+0      	; 0x8e <main+0x22>
  8e:	00 00       	nop
  90:	f3 cf       	rjmp	.-26     	; 0x78 <main+0xc>

00000092 <UART_init>:

void UART_init (unsigned long baud)
{
	//Choose the baud rate that will be used by sender and receiver.
	unsigned short UBRR;                 //Initializing UBRR variable.
	UBRR = (F_CPU / (16*baud))-1;        //Calculating the UBRR value.
  92:	dc 01       	movw	r26, r24
  94:	cb 01       	movw	r24, r22
  96:	88 0f       	add	r24, r24
  98:	99 1f       	adc	r25, r25
  9a:	aa 1f       	adc	r26, r26
  9c:	bb 1f       	adc	r27, r27
  9e:	88 0f       	add	r24, r24
  a0:	99 1f       	adc	r25, r25
  a2:	aa 1f       	adc	r26, r26
  a4:	bb 1f       	adc	r27, r27
  a6:	9c 01       	movw	r18, r24
  a8:	ad 01       	movw	r20, r26
  aa:	22 0f       	add	r18, r18
  ac:	33 1f       	adc	r19, r19
  ae:	44 1f       	adc	r20, r20
  b0:	55 1f       	adc	r21, r21
  b2:	22 0f       	add	r18, r18
  b4:	33 1f       	adc	r19, r19
  b6:	44 1f       	adc	r20, r20
  b8:	55 1f       	adc	r21, r21
  ba:	60 e0       	ldi	r22, 0x00	; 0
  bc:	72 e1       	ldi	r23, 0x12	; 18
  be:	8a e7       	ldi	r24, 0x7A	; 122
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	0e 94 73 00 	call	0xe6	; 0xe6 <__udivmodsi4>
  c6:	21 50       	subi	r18, 0x01	; 1
  c8:	31 09       	sbc	r19, r1
	UBRRH = (unsigned char)(UBRR>>8);    //Write the higher bits to UBRRH.
  ca:	30 bd       	out	0x20, r19	; 32
	UBRRL = (unsigned char)UBRR;         //Write the lowest bits to UBRRL.
  cc:	29 b9       	out	0x09, r18	; 9
	
	//Enable USART Sender & Receiver.
	SET_BIT (UCSRB, TXEN);               //Enable the Transmitting TX pin.
  ce:	53 9a       	sbi	0x0a, 3	; 10
	SET_BIT (UCSRB, RXEN);               //Enable the Receiving RX pin.
  d0:	54 9a       	sbi	0x0a, 4	; 10
	UPM(0-1):  @00=Disabled | @10=Even Parity | @11=Odd Parity.
	USBS:      @0=1-bit stop | @1=2-bit stop
	UCSZ(0-2): @000=5-bit word ... @111=9-bit word
	UCPOL:     @0=O/P rising edge | @1= O/P falling edge.
	*/
	UCSRC = (1<<URSEL)|(synchronization<<UMSEL)|(parity_1<<UPM1)|(parity_0<<UPM0)|(stop_bit<<USBS)|(size_0<<UCSZ0)|(size_1<<UCSZ1)|(polarity<<UCPOL);
  d2:	86 e8       	ldi	r24, 0x86	; 134
  d4:	80 bd       	out	0x20, r24	; 32
	UCSRB |=  (size_2<<UCSZ2);
  d6:	8a b1       	in	r24, 0x0a	; 10
  d8:	8a b9       	out	0x0a, r24	; 10
	
	//Choosing double speed mode ON/OFF
	#if defined double_on
	SET_BIT (UCSRA, U2X);
	#elif defined double_off
	CLR_BIT (UCSRA, U2X);
  da:	59 98       	cbi	0x0b, 1	; 11
  dc:	08 95       	ret

000000de <UART_send_char>:
//.......................................................

void UART_send_char (char data)
{
	//Wait for UDR transmit buffer to be empty.
	while (0 == READ_BIT(UCSRA, UDRE));
  de:	5d 9b       	sbis	0x0b, 5	; 11
  e0:	fe cf       	rjmp	.-4      	; 0xde <UART_send_char>
	
	//Write 'data' to UDR transmit buffer.
	UDR = data;
  e2:	8c b9       	out	0x0c, r24	; 12
  e4:	08 95       	ret

000000e6 <__udivmodsi4>:
  e6:	a1 e2       	ldi	r26, 0x21	; 33
  e8:	1a 2e       	mov	r1, r26
  ea:	aa 1b       	sub	r26, r26
  ec:	bb 1b       	sub	r27, r27
  ee:	fd 01       	movw	r30, r26
  f0:	0d c0       	rjmp	.+26     	; 0x10c <__udivmodsi4_ep>

000000f2 <__udivmodsi4_loop>:
  f2:	aa 1f       	adc	r26, r26
  f4:	bb 1f       	adc	r27, r27
  f6:	ee 1f       	adc	r30, r30
  f8:	ff 1f       	adc	r31, r31
  fa:	a2 17       	cp	r26, r18
  fc:	b3 07       	cpc	r27, r19
  fe:	e4 07       	cpc	r30, r20
 100:	f5 07       	cpc	r31, r21
 102:	20 f0       	brcs	.+8      	; 0x10c <__udivmodsi4_ep>
 104:	a2 1b       	sub	r26, r18
 106:	b3 0b       	sbc	r27, r19
 108:	e4 0b       	sbc	r30, r20
 10a:	f5 0b       	sbc	r31, r21

0000010c <__udivmodsi4_ep>:
 10c:	66 1f       	adc	r22, r22
 10e:	77 1f       	adc	r23, r23
 110:	88 1f       	adc	r24, r24
 112:	99 1f       	adc	r25, r25
 114:	1a 94       	dec	r1
 116:	69 f7       	brne	.-38     	; 0xf2 <__udivmodsi4_loop>
 118:	60 95       	com	r22
 11a:	70 95       	com	r23
 11c:	80 95       	com	r24
 11e:	90 95       	com	r25
 120:	9b 01       	movw	r18, r22
 122:	ac 01       	movw	r20, r24
 124:	bd 01       	movw	r22, r26
 126:	cf 01       	movw	r24, r30
 128:	08 95       	ret

0000012a <_exit>:
 12a:	f8 94       	cli

0000012c <__stop_program>:
 12c:	ff cf       	rjmp	.-2      	; 0x12c <__stop_program>
