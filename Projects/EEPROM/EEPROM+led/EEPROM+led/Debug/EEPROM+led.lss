
EEPROM+led.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004aa  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  000004fe  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000168  00000000  00000000  0000052e  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000bc1  00000000  00000000  00000696  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000506  00000000  00000000  00001257  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000635  00000000  00000000  0000175d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  000002d0  00000000  00000000  00001d94  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000350  00000000  00000000  00002064  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000117f  00000000  00000000  000023b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000108  00000000  00000000  00003533  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
   4:	0c 94 9d 01 	jmp	0x33a	; 0x33a <__vector_1>
   8:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
   c:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  10:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  14:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  18:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  1c:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  20:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  24:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  28:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  2c:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  30:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  34:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  38:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  3c:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  40:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  44:	0c 94 c8 01 	jmp	0x390	; 0x390 <__vector_17>
  48:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  4c:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  50:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  54:	8a 00       	.word	0x008a	; ????
  56:	a7 00       	.word	0x00a7	; ????
  58:	c4 00       	.word	0x00c4	; ????
  5a:	e1 00       	.word	0x00e1	; ????
  5c:	fd 00       	.word	0x00fd	; ????
  5e:	fd 00       	.word	0x00fd	; ????
  60:	fd 00       	.word	0x00fd	; ????
  62:	fd 00       	.word	0x00fd	; ????
  64:	fd 00       	.word	0x00fd	; ????
  66:	fd 00       	.word	0x00fd	; ????
  68:	fd 00       	.word	0x00fd	; ????
  6a:	fd 00       	.word	0x00fd	; ????
  6c:	fd 00       	.word	0x00fd	; ????
  6e:	fd 00       	.word	0x00fd	; ????
  70:	fd 00       	.word	0x00fd	; ????
  72:	fd 00       	.word	0x00fd	; ????
  74:	fd 00       	.word	0x00fd	; ????
  76:	fd 00       	.word	0x00fd	; ????
  78:	fd 00       	.word	0x00fd	; ????
  7a:	fd 00       	.word	0x00fd	; ????
  7c:	fd 00       	.word	0x00fd	; ????
  7e:	fd 00       	.word	0x00fd	; ????
  80:	fd 00       	.word	0x00fd	; ????
  82:	fd 00       	.word	0x00fd	; ????
  84:	fd 00       	.word	0x00fd	; ????
  86:	fd 00       	.word	0x00fd	; ????
  88:	fd 00       	.word	0x00fd	; ????
  8a:	fd 00       	.word	0x00fd	; ????
  8c:	fd 00       	.word	0x00fd	; ????
  8e:	fd 00       	.word	0x00fd	; ????
  90:	fd 00       	.word	0x00fd	; ????
  92:	fd 00       	.word	0x00fd	; ????
  94:	8a 00       	.word	0x008a	; ????
  96:	a7 00       	.word	0x00a7	; ????
  98:	c4 00       	.word	0x00c4	; ????
  9a:	e1 00       	.word	0x00e1	; ????
  9c:	0a 01       	movw	r0, r20
  9e:	27 01       	movw	r4, r14
  a0:	44 01       	movw	r8, r8
  a2:	61 01       	movw	r12, r2
  a4:	7d 01       	movw	r14, r26
  a6:	7d 01       	movw	r14, r26
  a8:	7d 01       	movw	r14, r26
  aa:	7d 01       	movw	r14, r26
  ac:	7d 01       	movw	r14, r26
  ae:	7d 01       	movw	r14, r26
  b0:	7d 01       	movw	r14, r26
  b2:	7d 01       	movw	r14, r26
  b4:	7d 01       	movw	r14, r26
  b6:	7d 01       	movw	r14, r26
  b8:	7d 01       	movw	r14, r26
  ba:	7d 01       	movw	r14, r26
  bc:	7d 01       	movw	r14, r26
  be:	7d 01       	movw	r14, r26
  c0:	7d 01       	movw	r14, r26
  c2:	7d 01       	movw	r14, r26
  c4:	7d 01       	movw	r14, r26
  c6:	7d 01       	movw	r14, r26
  c8:	7d 01       	movw	r14, r26
  ca:	7d 01       	movw	r14, r26
  cc:	7d 01       	movw	r14, r26
  ce:	7d 01       	movw	r14, r26
  d0:	7d 01       	movw	r14, r26
  d2:	7d 01       	movw	r14, r26
  d4:	7d 01       	movw	r14, r26
  d6:	7d 01       	movw	r14, r26
  d8:	7d 01       	movw	r14, r26
  da:	7d 01       	movw	r14, r26
  dc:	0a 01       	movw	r0, r20
  de:	27 01       	movw	r4, r14
  e0:	44 01       	movw	r8, r8
  e2:	61 01       	movw	r12, r2

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf e5       	ldi	r28, 0x5F	; 95
  ea:	d8 e0       	ldi	r29, 0x08	; 8
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	0e 94 7e 01 	call	0x2fc	; 0x2fc <main>
  f4:	0c 94 53 02 	jmp	0x4a6	; 0x4a6 <_exit>

000000f8 <__bad_interrupt>:
  f8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000fc <DIO_set_pin_dir>:
#include <avr/io.h> 
#include "my_macros.h"      //My standard  bit macros implementation.

void DIO_set_pin_dir(unsigned char port, unsigned char pin, unsigned char direction)    //Function to set a specific pin direction 'I/P'(@direction=0) or 'O/P'(@direction=1).
{
  switch (port)
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	fc 01       	movw	r30, r24
 100:	e1 54       	subi	r30, 0x41	; 65
 102:	f1 09       	sbc	r31, r1
 104:	e4 32       	cpi	r30, 0x24	; 36
 106:	f1 05       	cpc	r31, r1
 108:	08 f0       	brcs	.+2      	; 0x10c <DIO_set_pin_dir+0x10>
 10a:	77 c0       	rjmp	.+238    	; 0x1fa <DIO_set_pin_dir+0xfe>
 10c:	e6 5d       	subi	r30, 0xD6	; 214
 10e:	ff 4f       	sbci	r31, 0xFF	; 255
 110:	0c 94 4d 02 	jmp	0x49a	; 0x49a <__tablejump2__>
  {
    case 'A':                     // @Port 'A'.
    case 'a':                     // @Port 'a'.
    if (1== direction)            // '1' is for 'O/P'.
 114:	41 30       	cpi	r20, 0x01	; 1
 116:	69 f4       	brne	.+26     	; 0x132 <DIO_set_pin_dir+0x36>
    {
      SET_BIT(DDRA, pin);         // Set the pin 'PIN' in port 'A' as 'O/P'.
 118:	2a b3       	in	r18, 0x1a	; 26
 11a:	81 e0       	ldi	r24, 0x01	; 1
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	ac 01       	movw	r20, r24
 120:	02 c0       	rjmp	.+4      	; 0x126 <DIO_set_pin_dir+0x2a>
 122:	44 0f       	add	r20, r20
 124:	55 1f       	adc	r21, r21
 126:	6a 95       	dec	r22
 128:	e2 f7       	brpl	.-8      	; 0x122 <DIO_set_pin_dir+0x26>
 12a:	ba 01       	movw	r22, r20
 12c:	62 2b       	or	r22, r18
 12e:	6a bb       	out	0x1a, r22	; 26
 130:	08 95       	ret
    }
    else
    {
      CLR_BIT(DDRA, pin);        // Set the pin 'PIN' in port 'A' as 'I/P'.
 132:	2a b3       	in	r18, 0x1a	; 26
 134:	81 e0       	ldi	r24, 0x01	; 1
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	ac 01       	movw	r20, r24
 13a:	02 c0       	rjmp	.+4      	; 0x140 <DIO_set_pin_dir+0x44>
 13c:	44 0f       	add	r20, r20
 13e:	55 1f       	adc	r21, r21
 140:	6a 95       	dec	r22
 142:	e2 f7       	brpl	.-8      	; 0x13c <DIO_set_pin_dir+0x40>
 144:	ba 01       	movw	r22, r20
 146:	60 95       	com	r22
 148:	62 23       	and	r22, r18
 14a:	6a bb       	out	0x1a, r22	; 26
 14c:	08 95       	ret
    } 
    break;

    case 'B':                    // @Port 'B'.
    case 'b':                    // @Port 'b'.
    if (1==direction)            // '1' is for 'O/P'.
 14e:	41 30       	cpi	r20, 0x01	; 1
 150:	69 f4       	brne	.+26     	; 0x16c <DIO_set_pin_dir+0x70>
    {
      SET_BIT(DDRB, pin);        // Set the pin 'PIN' in port 'B' as 'O/P'.
 152:	27 b3       	in	r18, 0x17	; 23
 154:	81 e0       	ldi	r24, 0x01	; 1
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	ac 01       	movw	r20, r24
 15a:	02 c0       	rjmp	.+4      	; 0x160 <DIO_set_pin_dir+0x64>
 15c:	44 0f       	add	r20, r20
 15e:	55 1f       	adc	r21, r21
 160:	6a 95       	dec	r22
 162:	e2 f7       	brpl	.-8      	; 0x15c <DIO_set_pin_dir+0x60>
 164:	ba 01       	movw	r22, r20
 166:	62 2b       	or	r22, r18
 168:	67 bb       	out	0x17, r22	; 23
 16a:	08 95       	ret
    }
    else
    {
      CLR_BIT(DDRB, pin);        // Set the pin 'PIN' in port 'B' as 'I/P'.
 16c:	27 b3       	in	r18, 0x17	; 23
 16e:	81 e0       	ldi	r24, 0x01	; 1
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	ac 01       	movw	r20, r24
 174:	02 c0       	rjmp	.+4      	; 0x17a <DIO_set_pin_dir+0x7e>
 176:	44 0f       	add	r20, r20
 178:	55 1f       	adc	r21, r21
 17a:	6a 95       	dec	r22
 17c:	e2 f7       	brpl	.-8      	; 0x176 <DIO_set_pin_dir+0x7a>
 17e:	ba 01       	movw	r22, r20
 180:	60 95       	com	r22
 182:	62 23       	and	r22, r18
 184:	67 bb       	out	0x17, r22	; 23
 186:	08 95       	ret
    }
    break;

    case 'C':                    // @Port 'C'.
    case 'c':                    // @Port 'c'. 
    if (1==direction)            // '1' is for 'O/P'.
 188:	41 30       	cpi	r20, 0x01	; 1
 18a:	69 f4       	brne	.+26     	; 0x1a6 <DIO_set_pin_dir+0xaa>
    {
      SET_BIT(DDRC, pin);        // Set the pin 'PIN' in port 'C' as 'O/P'. 
 18c:	24 b3       	in	r18, 0x14	; 20
 18e:	81 e0       	ldi	r24, 0x01	; 1
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	ac 01       	movw	r20, r24
 194:	02 c0       	rjmp	.+4      	; 0x19a <DIO_set_pin_dir+0x9e>
 196:	44 0f       	add	r20, r20
 198:	55 1f       	adc	r21, r21
 19a:	6a 95       	dec	r22
 19c:	e2 f7       	brpl	.-8      	; 0x196 <DIO_set_pin_dir+0x9a>
 19e:	ba 01       	movw	r22, r20
 1a0:	62 2b       	or	r22, r18
 1a2:	64 bb       	out	0x14, r22	; 20
 1a4:	08 95       	ret
    }
    else
    {
      CLR_BIT(DDRC, pin);        // Set the pin 'PIN' in port 'C' as 'I/P'. 
 1a6:	24 b3       	in	r18, 0x14	; 20
 1a8:	81 e0       	ldi	r24, 0x01	; 1
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	ac 01       	movw	r20, r24
 1ae:	02 c0       	rjmp	.+4      	; 0x1b4 <DIO_set_pin_dir+0xb8>
 1b0:	44 0f       	add	r20, r20
 1b2:	55 1f       	adc	r21, r21
 1b4:	6a 95       	dec	r22
 1b6:	e2 f7       	brpl	.-8      	; 0x1b0 <DIO_set_pin_dir+0xb4>
 1b8:	ba 01       	movw	r22, r20
 1ba:	60 95       	com	r22
 1bc:	62 23       	and	r22, r18
 1be:	64 bb       	out	0x14, r22	; 20
 1c0:	08 95       	ret
    }
    break;

    case 'D':                    // @Port 'D'.
    case 'd':                    // @Port 'd'. 
    if (1==direction)            // '1' is for 'O/P'.
 1c2:	41 30       	cpi	r20, 0x01	; 1
 1c4:	69 f4       	brne	.+26     	; 0x1e0 <DIO_set_pin_dir+0xe4>
    {
      SET_BIT(DDRD, pin);        // Set the pin 'PIN' in port 'D' as 'O/P'. 
 1c6:	21 b3       	in	r18, 0x11	; 17
 1c8:	81 e0       	ldi	r24, 0x01	; 1
 1ca:	90 e0       	ldi	r25, 0x00	; 0
 1cc:	ac 01       	movw	r20, r24
 1ce:	02 c0       	rjmp	.+4      	; 0x1d4 <DIO_set_pin_dir+0xd8>
 1d0:	44 0f       	add	r20, r20
 1d2:	55 1f       	adc	r21, r21
 1d4:	6a 95       	dec	r22
 1d6:	e2 f7       	brpl	.-8      	; 0x1d0 <DIO_set_pin_dir+0xd4>
 1d8:	ba 01       	movw	r22, r20
 1da:	62 2b       	or	r22, r18
 1dc:	61 bb       	out	0x11, r22	; 17
 1de:	08 95       	ret
    }
    else
    {
      CLR_BIT(DDRD, pin);        // Set the pin 'PIN' in port 'D' as 'I/P'.
 1e0:	21 b3       	in	r18, 0x11	; 17
 1e2:	81 e0       	ldi	r24, 0x01	; 1
 1e4:	90 e0       	ldi	r25, 0x00	; 0
 1e6:	ac 01       	movw	r20, r24
 1e8:	02 c0       	rjmp	.+4      	; 0x1ee <DIO_set_pin_dir+0xf2>
 1ea:	44 0f       	add	r20, r20
 1ec:	55 1f       	adc	r21, r21
 1ee:	6a 95       	dec	r22
 1f0:	e2 f7       	brpl	.-8      	; 0x1ea <DIO_set_pin_dir+0xee>
 1f2:	ba 01       	movw	r22, r20
 1f4:	60 95       	com	r22
 1f6:	62 23       	and	r22, r18
 1f8:	61 bb       	out	0x11, r22	; 17
 1fa:	08 95       	ret

000001fc <DIO_write_pin>:
//..................................................................................


void DIO_write_pin(unsigned char port, unsigned char pin, unsigned char value)  //Set the 'O/P' pin as 'HIGH' or 'LOW'
{
  switch (port)
 1fc:	90 e0       	ldi	r25, 0x00	; 0
 1fe:	fc 01       	movw	r30, r24
 200:	e1 54       	subi	r30, 0x41	; 65
 202:	f1 09       	sbc	r31, r1
 204:	e4 32       	cpi	r30, 0x24	; 36
 206:	f1 05       	cpc	r31, r1
 208:	08 f0       	brcs	.+2      	; 0x20c <DIO_write_pin+0x10>
 20a:	77 c0       	rjmp	.+238    	; 0x2fa <DIO_write_pin+0xfe>
 20c:	e2 5b       	subi	r30, 0xB2	; 178
 20e:	ff 4f       	sbci	r31, 0xFF	; 255
 210:	0c 94 4d 02 	jmp	0x49a	; 0x49a <__tablejump2__>
  {
    case 'A':                  // @Port 'A'.
    case 'a':                  // @Port 'a'.
    if (1==value)             
 214:	41 30       	cpi	r20, 0x01	; 1
 216:	69 f4       	brne	.+26     	; 0x232 <DIO_write_pin+0x36>
    {
      SET_BIT(PORTA, pin);     // Set pin 'PIN' in port 'A' as 'HIGH'.
 218:	2b b3       	in	r18, 0x1b	; 27
 21a:	81 e0       	ldi	r24, 0x01	; 1
 21c:	90 e0       	ldi	r25, 0x00	; 0
 21e:	ac 01       	movw	r20, r24
 220:	02 c0       	rjmp	.+4      	; 0x226 <DIO_write_pin+0x2a>
 222:	44 0f       	add	r20, r20
 224:	55 1f       	adc	r21, r21
 226:	6a 95       	dec	r22
 228:	e2 f7       	brpl	.-8      	; 0x222 <DIO_write_pin+0x26>
 22a:	ba 01       	movw	r22, r20
 22c:	62 2b       	or	r22, r18
 22e:	6b bb       	out	0x1b, r22	; 27
 230:	08 95       	ret
    }
    else
    {
      CLR_BIT(PORTA, pin);     // Set pin 'PIN' in port 'A' as 'LOW'.
 232:	2b b3       	in	r18, 0x1b	; 27
 234:	81 e0       	ldi	r24, 0x01	; 1
 236:	90 e0       	ldi	r25, 0x00	; 0
 238:	ac 01       	movw	r20, r24
 23a:	02 c0       	rjmp	.+4      	; 0x240 <DIO_write_pin+0x44>
 23c:	44 0f       	add	r20, r20
 23e:	55 1f       	adc	r21, r21
 240:	6a 95       	dec	r22
 242:	e2 f7       	brpl	.-8      	; 0x23c <DIO_write_pin+0x40>
 244:	ba 01       	movw	r22, r20
 246:	60 95       	com	r22
 248:	62 23       	and	r22, r18
 24a:	6b bb       	out	0x1b, r22	; 27
 24c:	08 95       	ret
    }
    break;
  
    case 'B':                  // @Port 'B'.
    case 'b':                  // @Port 'b'.
    if (1==value)             
 24e:	41 30       	cpi	r20, 0x01	; 1
 250:	69 f4       	brne	.+26     	; 0x26c <DIO_write_pin+0x70>
    {
      SET_BIT(PORTB, pin);    // Set pin 'PIN' in port 'B' as 'HIGH'.
 252:	28 b3       	in	r18, 0x18	; 24
 254:	81 e0       	ldi	r24, 0x01	; 1
 256:	90 e0       	ldi	r25, 0x00	; 0
 258:	ac 01       	movw	r20, r24
 25a:	02 c0       	rjmp	.+4      	; 0x260 <DIO_write_pin+0x64>
 25c:	44 0f       	add	r20, r20
 25e:	55 1f       	adc	r21, r21
 260:	6a 95       	dec	r22
 262:	e2 f7       	brpl	.-8      	; 0x25c <DIO_write_pin+0x60>
 264:	ba 01       	movw	r22, r20
 266:	62 2b       	or	r22, r18
 268:	68 bb       	out	0x18, r22	; 24
 26a:	08 95       	ret
    }
    else
    {
      CLR_BIT(PORTB, pin);    // Set pin 'PIN' in port 'B' as 'LOW'.
 26c:	28 b3       	in	r18, 0x18	; 24
 26e:	81 e0       	ldi	r24, 0x01	; 1
 270:	90 e0       	ldi	r25, 0x00	; 0
 272:	ac 01       	movw	r20, r24
 274:	02 c0       	rjmp	.+4      	; 0x27a <DIO_write_pin+0x7e>
 276:	44 0f       	add	r20, r20
 278:	55 1f       	adc	r21, r21
 27a:	6a 95       	dec	r22
 27c:	e2 f7       	brpl	.-8      	; 0x276 <DIO_write_pin+0x7a>
 27e:	ba 01       	movw	r22, r20
 280:	60 95       	com	r22
 282:	62 23       	and	r22, r18
 284:	68 bb       	out	0x18, r22	; 24
 286:	08 95       	ret
    }
    break;

    case 'C':                  // @Port 'C'.
    case 'c':                  // @Port 'c'.
    if (1==value)             
 288:	41 30       	cpi	r20, 0x01	; 1
 28a:	69 f4       	brne	.+26     	; 0x2a6 <DIO_write_pin+0xaa>
    {
      SET_BIT(PORTC, pin);    // Set pin 'PIN' in port 'C' as 'HIGH'.
 28c:	25 b3       	in	r18, 0x15	; 21
 28e:	81 e0       	ldi	r24, 0x01	; 1
 290:	90 e0       	ldi	r25, 0x00	; 0
 292:	ac 01       	movw	r20, r24
 294:	02 c0       	rjmp	.+4      	; 0x29a <DIO_write_pin+0x9e>
 296:	44 0f       	add	r20, r20
 298:	55 1f       	adc	r21, r21
 29a:	6a 95       	dec	r22
 29c:	e2 f7       	brpl	.-8      	; 0x296 <DIO_write_pin+0x9a>
 29e:	ba 01       	movw	r22, r20
 2a0:	62 2b       	or	r22, r18
 2a2:	65 bb       	out	0x15, r22	; 21
 2a4:	08 95       	ret
    }
    else
    {
      CLR_BIT(PORTC, pin);    // Set pin 'PIN' in port 'C' as 'LOW'.
 2a6:	25 b3       	in	r18, 0x15	; 21
 2a8:	81 e0       	ldi	r24, 0x01	; 1
 2aa:	90 e0       	ldi	r25, 0x00	; 0
 2ac:	ac 01       	movw	r20, r24
 2ae:	02 c0       	rjmp	.+4      	; 0x2b4 <DIO_write_pin+0xb8>
 2b0:	44 0f       	add	r20, r20
 2b2:	55 1f       	adc	r21, r21
 2b4:	6a 95       	dec	r22
 2b6:	e2 f7       	brpl	.-8      	; 0x2b0 <DIO_write_pin+0xb4>
 2b8:	ba 01       	movw	r22, r20
 2ba:	60 95       	com	r22
 2bc:	62 23       	and	r22, r18
 2be:	65 bb       	out	0x15, r22	; 21
 2c0:	08 95       	ret
    }
    break;
  
    case 'D':                // @Port 'D'.
    case 'd':                // @Port 'd'.
    if (1==value)             
 2c2:	41 30       	cpi	r20, 0x01	; 1
 2c4:	69 f4       	brne	.+26     	; 0x2e0 <DIO_write_pin+0xe4>
    {
      SET_BIT(PORTD, pin);   // Set pin 'PIN' in port 'D' as 'HIGH'.
 2c6:	22 b3       	in	r18, 0x12	; 18
 2c8:	81 e0       	ldi	r24, 0x01	; 1
 2ca:	90 e0       	ldi	r25, 0x00	; 0
 2cc:	ac 01       	movw	r20, r24
 2ce:	02 c0       	rjmp	.+4      	; 0x2d4 <DIO_write_pin+0xd8>
 2d0:	44 0f       	add	r20, r20
 2d2:	55 1f       	adc	r21, r21
 2d4:	6a 95       	dec	r22
 2d6:	e2 f7       	brpl	.-8      	; 0x2d0 <DIO_write_pin+0xd4>
 2d8:	ba 01       	movw	r22, r20
 2da:	62 2b       	or	r22, r18
 2dc:	62 bb       	out	0x12, r22	; 18
 2de:	08 95       	ret
    }
    else
    {
      CLR_BIT(PORTD, pin);   // Set pin 'PIN' in port 'D' as 'LOW'.
 2e0:	22 b3       	in	r18, 0x12	; 18
 2e2:	81 e0       	ldi	r24, 0x01	; 1
 2e4:	90 e0       	ldi	r25, 0x00	; 0
 2e6:	ac 01       	movw	r20, r24
 2e8:	02 c0       	rjmp	.+4      	; 0x2ee <DIO_write_pin+0xf2>
 2ea:	44 0f       	add	r20, r20
 2ec:	55 1f       	adc	r21, r21
 2ee:	6a 95       	dec	r22
 2f0:	e2 f7       	brpl	.-8      	; 0x2ea <DIO_write_pin+0xee>
 2f2:	ba 01       	movw	r22, r20
 2f4:	60 95       	com	r22
 2f6:	62 23       	and	r22, r18
 2f8:	62 bb       	out	0x12, r22	; 18
 2fa:	08 95       	ret

000002fc <main>:
#define addr  0x0030
#define data  0x0050

int main(void)
{
	LED_init(led_port, led_pin);
 2fc:	60 e0       	ldi	r22, 0x00	; 0
 2fe:	83 e4       	ldi	r24, 0x43	; 67
 300:	0e 94 3d 02 	call	0x47a	; 0x47a <LED_init>
	LED_init(led2_port, led2_pin);
 304:	60 e0       	ldi	r22, 0x00	; 0
 306:	84 e4       	ldi	r24, 0x44	; 68
 308:	0e 94 3d 02 	call	0x47a	; 0x47a <LED_init>
	BUTTON_init(btn_port, btn_pin);
 30c:	62 e0       	ldi	r22, 0x02	; 2
 30e:	84 e4       	ldi	r24, 0x44	; 68
 310:	0e 94 49 02 	call	0x492	; 0x492 <BUTTON_init>
	
	interr_int0(3);
 314:	83 e0       	ldi	r24, 0x03	; 3
 316:	0e 94 10 02 	call	0x420	; 0x420 <interr_int0>
	
	EEPROM_sei();
 31a:	0e 94 0b 02 	call	0x416	; 0x416 <EEPROM_sei>
	EEPROM_write(addr, data);
 31e:	60 e5       	ldi	r22, 0x50	; 80
 320:	80 e3       	ldi	r24, 0x30	; 48
 322:	90 e0       	ldi	r25, 0x00	; 0
 324:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <EEPROM_write>
	
    while(1)
    {
        LED_off(led_port, led_pin);
 328:	60 e0       	ldi	r22, 0x00	; 0
 32a:	83 e4       	ldi	r24, 0x43	; 67
 32c:	0e 94 45 02 	call	0x48a	; 0x48a <LED_off>
		LED_off(led2_port, led2_pin);
 330:	60 e0       	ldi	r22, 0x00	; 0
 332:	84 e4       	ldi	r24, 0x44	; 68
 334:	0e 94 45 02 	call	0x48a	; 0x48a <LED_off>
 338:	f7 cf       	rjmp	.-18     	; 0x328 <main+0x2c>

0000033a <__vector_1>:
    }
}

ISR (INT0_vect)
{
 33a:	1f 92       	push	r1
 33c:	0f 92       	push	r0
 33e:	0f b6       	in	r0, 0x3f	; 63
 340:	0f 92       	push	r0
 342:	11 24       	eor	r1, r1
 344:	2f 93       	push	r18
 346:	3f 93       	push	r19
 348:	4f 93       	push	r20
 34a:	5f 93       	push	r21
 34c:	6f 93       	push	r22
 34e:	7f 93       	push	r23
 350:	8f 93       	push	r24
 352:	9f 93       	push	r25
 354:	af 93       	push	r26
 356:	bf 93       	push	r27
 358:	ef 93       	push	r30
 35a:	ff 93       	push	r31
	LED_on(led2_port, led2_pin);
 35c:	60 e0       	ldi	r22, 0x00	; 0
 35e:	84 e4       	ldi	r24, 0x44	; 68
 360:	0e 94 41 02 	call	0x482	; 0x482 <LED_on>
	EEPROM_write(addr, data);
 364:	60 e5       	ldi	r22, 0x50	; 80
 366:	80 e3       	ldi	r24, 0x30	; 48
 368:	90 e0       	ldi	r25, 0x00	; 0
 36a:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <EEPROM_write>
}
 36e:	ff 91       	pop	r31
 370:	ef 91       	pop	r30
 372:	bf 91       	pop	r27
 374:	af 91       	pop	r26
 376:	9f 91       	pop	r25
 378:	8f 91       	pop	r24
 37a:	7f 91       	pop	r23
 37c:	6f 91       	pop	r22
 37e:	5f 91       	pop	r21
 380:	4f 91       	pop	r20
 382:	3f 91       	pop	r19
 384:	2f 91       	pop	r18
 386:	0f 90       	pop	r0
 388:	0f be       	out	0x3f, r0	; 63
 38a:	0f 90       	pop	r0
 38c:	1f 90       	pop	r1
 38e:	18 95       	reti

00000390 <__vector_17>:

ISR (EE_RDY_vect)
{
 390:	1f 92       	push	r1
 392:	0f 92       	push	r0
 394:	0f b6       	in	r0, 0x3f	; 63
 396:	0f 92       	push	r0
 398:	11 24       	eor	r1, r1
 39a:	2f 93       	push	r18
 39c:	3f 93       	push	r19
 39e:	4f 93       	push	r20
 3a0:	5f 93       	push	r21
 3a2:	6f 93       	push	r22
 3a4:	7f 93       	push	r23
 3a6:	8f 93       	push	r24
 3a8:	9f 93       	push	r25
 3aa:	af 93       	push	r26
 3ac:	bf 93       	push	r27
 3ae:	ef 93       	push	r30
 3b0:	ff 93       	push	r31
	LED_on(led_port, led_pin);
 3b2:	60 e0       	ldi	r22, 0x00	; 0
 3b4:	83 e4       	ldi	r24, 0x43	; 67
 3b6:	0e 94 41 02 	call	0x482	; 0x482 <LED_on>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3ba:	2f ef       	ldi	r18, 0xFF	; 255
 3bc:	83 ed       	ldi	r24, 0xD3	; 211
 3be:	90 e3       	ldi	r25, 0x30	; 48
 3c0:	21 50       	subi	r18, 0x01	; 1
 3c2:	80 40       	sbci	r24, 0x00	; 0
 3c4:	90 40       	sbci	r25, 0x00	; 0
 3c6:	e1 f7       	brne	.-8      	; 0x3c0 <__vector_17+0x30>
 3c8:	00 c0       	rjmp	.+0      	; 0x3ca <__vector_17+0x3a>
 3ca:	00 00       	nop
	_delay_ms(2000);
	EEPROM_cli();
 3cc:	0e 94 0e 02 	call	0x41c	; 0x41c <EEPROM_cli>
 3d0:	ff 91       	pop	r31
 3d2:	ef 91       	pop	r30
 3d4:	bf 91       	pop	r27
 3d6:	af 91       	pop	r26
 3d8:	9f 91       	pop	r25
 3da:	8f 91       	pop	r24
 3dc:	7f 91       	pop	r23
 3de:	6f 91       	pop	r22
 3e0:	5f 91       	pop	r21
 3e2:	4f 91       	pop	r20
 3e4:	3f 91       	pop	r19
 3e6:	2f 91       	pop	r18
 3e8:	0f 90       	pop	r0
 3ea:	0f be       	out	0x3f, r0	; 63
 3ec:	0f 90       	pop	r0
 3ee:	1f 90       	pop	r1
 3f0:	18 95       	reti

000003f2 <EEPROM_write>:


void EEPROM_write(unsigned short address, unsigned char data)
{
    unsigned char I = 0;
    EEARL = (char)address;        //Put the Low nibble 'ADDRESS' on 'EEARL' REG. 
 3f2:	8e bb       	out	0x1e, r24	; 30
    EEARH = (char)(address>>8);   //Put the high nibble 'ADDRESS' on 'EEARH' REG.
 3f4:	9f bb       	out	0x1f, r25	; 31

    EEDR = data;                  //Write  'DATA'(10-bit) on 'EEARL' & 'EEARH' REGs.   
 3f6:	6d bb       	out	0x1d, r22	; 29

    if (1 == READ_BIT(SREG, 7))
 3f8:	0f b6       	in	r0, 0x3f	; 63
 3fa:	07 fe       	sbrs	r0, 7
 3fc:	03 c0       	rjmp	.+6      	; 0x404 <EEPROM_write+0x12>
    {
	    I = 1;
	    cli();
 3fe:	f8 94       	cli

    EEDR = data;                  //Write  'DATA'(10-bit) on 'EEARL' & 'EEARH' REGs.   

    if (1 == READ_BIT(SREG, 7))
    {
	    I = 1;
 400:	81 e0       	ldi	r24, 0x01	; 1
 402:	01 c0       	rjmp	.+2      	; 0x406 <EEPROM_write+0x14>



void EEPROM_write(unsigned short address, unsigned char data)
{
    unsigned char I = 0;
 404:	80 e0       	ldi	r24, 0x00	; 0
    {
	    I = 1;
	    cli();
    }

    SET_BIT(EECR, EEMWE);         //Enable the 'MASTER WRITE ENABLE' bit in 'CONTROL REG'.
 406:	e2 9a       	sbi	0x1c, 2	; 28
    SET_BIT(EECR, EEWE);          //Enable the 'WRITE ENABLE' bit in 'CONTROL REG'.
 408:	e1 9a       	sbi	0x1c, 1	; 28

    while(1 == (READ_BIT(EECR, EEWE)));   //To make shure that the data has been written Successfully.
 40a:	e1 99       	sbic	0x1c, 1	; 28
 40c:	fe cf       	rjmp	.-4      	; 0x40a <EEPROM_write+0x18>

    if(1 == I)
 40e:	81 30       	cpi	r24, 0x01	; 1
 410:	09 f4       	brne	.+2      	; 0x414 <EEPROM_write+0x22>
    {
	    sei();
 412:	78 94       	sei
 414:	08 95       	ret

00000416 <EEPROM_sei>:
}


void EEPROM_sei (void)
{
	sei();
 416:	78 94       	sei
	SET_BIT (EECR, EERIE);    //Enable EEPROM Read Interrupt
 418:	e3 9a       	sbi	0x1c, 3	; 28
 41a:	08 95       	ret

0000041c <EEPROM_cli>:
}

void EEPROM_cli (void)
{
	CLR_BIT (EECR, EERIE);    //Disable EEPROM Read Interrupt
 41c:	e3 98       	cbi	0x1c, 3	; 28
 41e:	08 95       	ret

00000420 <interr_int0>:
 
 
 //.............................................................................
 
 void interr_int0 (unsigned char sense)  //Enable external interrupt for pin 'PD2'
 { 
 420:	cf 93       	push	r28
 422:	c8 2f       	mov	r28, r24
	 sei();                           //Enable Global Interrupt bit.
 424:	78 94       	sei
	 SET_BIT (GICR, INT0);            //Enable INT0 pin Interrupt
 426:	8b b7       	in	r24, 0x3b	; 59
 428:	80 64       	ori	r24, 0x40	; 64
 42a:	8b bf       	out	0x3b, r24	; 59
	 DIO_set_pin_dir('D', 2, 0);      //Set INT0 pin as I/P
 42c:	40 e0       	ldi	r20, 0x00	; 0
 42e:	62 e0       	ldi	r22, 0x02	; 2
 430:	84 e4       	ldi	r24, 0x44	; 68
 432:	0e 94 7e 00 	call	0xfc	; 0xfc <DIO_set_pin_dir>
	 
	 switch (sense)
 436:	c1 30       	cpi	r28, 0x01	; 1
 438:	61 f0       	breq	.+24     	; 0x452 <interr_int0+0x32>
 43a:	28 f0       	brcs	.+10     	; 0x446 <interr_int0+0x26>
 43c:	c2 30       	cpi	r28, 0x02	; 2
 43e:	79 f0       	breq	.+30     	; 0x45e <interr_int0+0x3e>
 440:	c3 30       	cpi	r28, 0x03	; 3
 442:	99 f0       	breq	.+38     	; 0x46a <interr_int0+0x4a>
 444:	18 c0       	rjmp	.+48     	; 0x476 <interr_int0+0x56>
	 {
		 case 0:                //Low level sensing
		 CLR_BIT (MCUCR, 0);    //ISC00
 446:	85 b7       	in	r24, 0x35	; 53
 448:	8e 7f       	andi	r24, 0xFE	; 254
 44a:	85 bf       	out	0x35, r24	; 53
		 CLR_BIT (MCUCR, 1);    //ISC01
 44c:	85 b7       	in	r24, 0x35	; 53
 44e:	8d 7f       	andi	r24, 0xFD	; 253
 450:	85 bf       	out	0x35, r24	; 53
		 
		 case 1:                //Any logical change sensing
		 SET_BIT (MCUCR, 0);    //ISC00
 452:	85 b7       	in	r24, 0x35	; 53
 454:	81 60       	ori	r24, 0x01	; 1
 456:	85 bf       	out	0x35, r24	; 53
		 CLR_BIT (MCUCR, 1);    //ISC01
 458:	85 b7       	in	r24, 0x35	; 53
 45a:	8d 7f       	andi	r24, 0xFD	; 253
 45c:	85 bf       	out	0x35, r24	; 53
		 
		 case 2:                //Falling Edge sensing
		 CLR_BIT (MCUCR, 0);    //ISC00
 45e:	85 b7       	in	r24, 0x35	; 53
 460:	8e 7f       	andi	r24, 0xFE	; 254
 462:	85 bf       	out	0x35, r24	; 53
		 SET_BIT (MCUCR, 1);    //ISC01
 464:	85 b7       	in	r24, 0x35	; 53
 466:	82 60       	ori	r24, 0x02	; 2
 468:	85 bf       	out	0x35, r24	; 53
		 
		 case 3:                //Rising Edge change
		 SET_BIT (MCUCR, 0);    //ISC00
 46a:	85 b7       	in	r24, 0x35	; 53
 46c:	81 60       	ori	r24, 0x01	; 1
 46e:	85 bf       	out	0x35, r24	; 53
		 SET_BIT (MCUCR, 1);    //ISC01
 470:	85 b7       	in	r24, 0x35	; 53
 472:	82 60       	ori	r24, 0x02	; 2
 474:	85 bf       	out	0x35, r24	; 53
	 }
 }
 476:	cf 91       	pop	r28
 478:	08 95       	ret

0000047a <LED_init>:

#include "DIO.h"

void LED_init(unsigned char port, unsigned char pin)
{
  DIO_set_pin_dir(port, pin, 1);        //Initialize the 'pin' to the 'LED'
 47a:	41 e0       	ldi	r20, 0x01	; 1
 47c:	0e 94 7e 00 	call	0xfc	; 0xfc <DIO_set_pin_dir>
 480:	08 95       	ret

00000482 <LED_on>:
}

void LED_on(unsigned char port, unsigned char pin)
{
  DIO_write_pin(port, pin, 1);         //Turn 'ON' the 'LED' on the 'pin' of 'port' 
 482:	41 e0       	ldi	r20, 0x01	; 1
 484:	0e 94 fe 00 	call	0x1fc	; 0x1fc <DIO_write_pin>
 488:	08 95       	ret

0000048a <LED_off>:
}

void LED_off(unsigned char port, unsigned char pin)
{
  DIO_write_pin(port, pin, 0);         //Turn 'OFF' the 'LED' on the 'pin' of 'port' 
 48a:	40 e0       	ldi	r20, 0x00	; 0
 48c:	0e 94 fe 00 	call	0x1fc	; 0x1fc <DIO_write_pin>
 490:	08 95       	ret

00000492 <BUTTON_init>:
#include <util/delay.h>


void BUTTON_init(unsigned char port, unsigned char pin)    //Initialize 'I/P' on 'pin' of 'port'
{
  DIO_set_pin_dir (port, pin, 0);
 492:	40 e0       	ldi	r20, 0x00	; 0
 494:	0e 94 7e 00 	call	0xfc	; 0xfc <DIO_set_pin_dir>
 498:	08 95       	ret

0000049a <__tablejump2__>:
 49a:	ee 0f       	add	r30, r30
 49c:	ff 1f       	adc	r31, r31

0000049e <__tablejump__>:
 49e:	05 90       	lpm	r0, Z+
 4a0:	f4 91       	lpm	r31, Z
 4a2:	e0 2d       	mov	r30, r0
 4a4:	09 94       	ijmp

000004a6 <_exit>:
 4a6:	f8 94       	cli

000004a8 <__stop_program>:
 4a8:	ff cf       	rjmp	.-2      	; 0x4a8 <__stop_program>
