
Timer_fast_PWM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002b0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  00000304  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 000000f8  00000000  00000000  00000334  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000007e4  00000000  00000000  0000042c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000002ab  00000000  00000000  00000c10  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000471  00000000  00000000  00000ebb  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  0000021c  00000000  00000000  0000132c  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000361  00000000  00000000  00001548  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000129f  00000000  00000000  000018a9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 000000c8  00000000  00000000  00002b48  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__ctors_end>
   4:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
   8:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
   c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  10:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  14:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  18:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  1c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  20:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  24:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  28:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  2c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  30:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  34:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  38:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  3c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  40:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  44:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  48:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  4c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  50:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  54:	66 00       	.word	0x0066	; ????
  56:	85 00       	.word	0x0085	; ????
  58:	a4 00       	.word	0x00a4	; ????
  5a:	c3 00       	.word	0x00c3	; ????
  5c:	e1 00       	.word	0x00e1	; ????
  5e:	e1 00       	.word	0x00e1	; ????
  60:	e1 00       	.word	0x00e1	; ????
  62:	e1 00       	.word	0x00e1	; ????
  64:	e1 00       	.word	0x00e1	; ????
  66:	e1 00       	.word	0x00e1	; ????
  68:	e1 00       	.word	0x00e1	; ????
  6a:	e1 00       	.word	0x00e1	; ????
  6c:	e1 00       	.word	0x00e1	; ????
  6e:	e1 00       	.word	0x00e1	; ????
  70:	e1 00       	.word	0x00e1	; ????
  72:	e1 00       	.word	0x00e1	; ????
  74:	e1 00       	.word	0x00e1	; ????
  76:	e1 00       	.word	0x00e1	; ????
  78:	e1 00       	.word	0x00e1	; ????
  7a:	e1 00       	.word	0x00e1	; ????
  7c:	e1 00       	.word	0x00e1	; ????
  7e:	e1 00       	.word	0x00e1	; ????
  80:	e1 00       	.word	0x00e1	; ????
  82:	e1 00       	.word	0x00e1	; ????
  84:	e1 00       	.word	0x00e1	; ????
  86:	e1 00       	.word	0x00e1	; ????
  88:	e1 00       	.word	0x00e1	; ????
  8a:	e1 00       	.word	0x00e1	; ????
  8c:	e1 00       	.word	0x00e1	; ????
  8e:	e1 00       	.word	0x00e1	; ????
  90:	e1 00       	.word	0x00e1	; ????
  92:	e1 00       	.word	0x00e1	; ????
  94:	66 00       	.word	0x0066	; ????
  96:	85 00       	.word	0x0085	; ????
  98:	a4 00       	.word	0x00a4	; ????
  9a:	c3 00       	.word	0x00c3	; ????

0000009c <__ctors_end>:
  9c:	11 24       	eor	r1, r1
  9e:	1f be       	out	0x3f, r1	; 63
  a0:	cf e5       	ldi	r28, 0x5F	; 95
  a2:	d8 e0       	ldi	r29, 0x08	; 8
  a4:	de bf       	out	0x3e, r29	; 62
  a6:	cd bf       	out	0x3d, r28	; 61
  a8:	0e 94 49 01 	call	0x292	; 0x292 <main>
  ac:	0c 94 56 01 	jmp	0x2ac	; 0x2ac <_exit>

000000b0 <__bad_interrupt>:
  b0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b4 <DIO_set_pin_dir>:
    case 'c':                  // @Port 'c'.
    if (1 == value)             
    {
      SET_BIT(PORTC, pin);    // Set pin 'PIN' in port 'C' as 'HIGH'.
    }
    else if (0 == value)
  b4:	90 e0       	ldi	r25, 0x00	; 0
    {
      CLR_BIT(PORTC, pin);    // Set pin 'PIN' in port 'C' as 'LOW'.
  b6:	fc 01       	movw	r30, r24
  b8:	e1 54       	subi	r30, 0x41	; 65
  ba:	f1 09       	sbc	r31, r1
  bc:	e4 32       	cpi	r30, 0x24	; 36
  be:	f1 05       	cpc	r31, r1
  c0:	08 f0       	brcs	.+2      	; 0xc4 <DIO_set_pin_dir+0x10>
  c2:	7f c0       	rjmp	.+254    	; 0x1c2 <DIO_set_pin_dir+0x10e>
  c4:	e6 5d       	subi	r30, 0xD6	; 214
  c6:	ff 4f       	sbci	r31, 0xFF	; 255
  c8:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__tablejump2__>
  cc:	41 30       	cpi	r20, 0x01	; 1
  ce:	69 f4       	brne	.+26     	; 0xea <DIO_set_pin_dir+0x36>
  d0:	2a b3       	in	r18, 0x1a	; 26
    }
    break;
  
    case 'D':                // @Port 'D'.
    case 'd':                // @Port 'd'.
    if (1 == value)             
  d2:	81 e0       	ldi	r24, 0x01	; 1
  d4:	90 e0       	ldi	r25, 0x00	; 0
    {
      SET_BIT(PORTD, pin);   // Set pin 'PIN' in port 'D' as 'HIGH'.
  d6:	ac 01       	movw	r20, r24
  d8:	02 c0       	rjmp	.+4      	; 0xde <DIO_set_pin_dir+0x2a>
  da:	44 0f       	add	r20, r20
  dc:	55 1f       	adc	r21, r21
  de:	6a 95       	dec	r22
  e0:	e2 f7       	brpl	.-8      	; 0xda <DIO_set_pin_dir+0x26>
  e2:	ba 01       	movw	r22, r20
  e4:	62 2b       	or	r22, r18
  e6:	6a bb       	out	0x1a, r22	; 26
  e8:	08 95       	ret
  ea:	41 11       	cpse	r20, r1
  ec:	6a c0       	rjmp	.+212    	; 0x1c2 <DIO_set_pin_dir+0x10e>
  ee:	2a b3       	in	r18, 0x1a	; 26
    }
    else if (0 == value)
  f0:	81 e0       	ldi	r24, 0x01	; 1
  f2:	90 e0       	ldi	r25, 0x00	; 0
    {
      CLR_BIT(PORTD, pin);   // Set pin 'PIN' in port 'D' as 'LOW'.
  f4:	ac 01       	movw	r20, r24
  f6:	02 c0       	rjmp	.+4      	; 0xfc <DIO_set_pin_dir+0x48>
  f8:	44 0f       	add	r20, r20
  fa:	55 1f       	adc	r21, r21
  fc:	6a 95       	dec	r22
  fe:	e2 f7       	brpl	.-8      	; 0xf8 <DIO_set_pin_dir+0x44>
 100:	ba 01       	movw	r22, r20
 102:	60 95       	com	r22
 104:	62 23       	and	r22, r18
 106:	6a bb       	out	0x1a, r22	; 26
 108:	08 95       	ret
 10a:	41 30       	cpi	r20, 0x01	; 1
 10c:	69 f4       	brne	.+26     	; 0x128 <DIO_set_pin_dir+0x74>
 10e:	27 b3       	in	r18, 0x17	; 23

    case 'B':                    // @Port 'B'.
    case 'b':                    // @Port 'b'.
    if (1==direction)            // '1' is for 'O/P'.
    {
      SET_BIT(DDRB, pin);        // Set the pin 'PIN' in port 'B' as 'O/P'.
 110:	81 e0       	ldi	r24, 0x01	; 1
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	ac 01       	movw	r20, r24
 116:	02 c0       	rjmp	.+4      	; 0x11c <DIO_set_pin_dir+0x68>
 118:	44 0f       	add	r20, r20
 11a:	55 1f       	adc	r21, r21
 11c:	6a 95       	dec	r22
 11e:	e2 f7       	brpl	.-8      	; 0x118 <DIO_set_pin_dir+0x64>
 120:	ba 01       	movw	r22, r20
 122:	62 2b       	or	r22, r18
 124:	67 bb       	out	0x17, r22	; 23
 126:	08 95       	ret
    }
    else if (0 == direction)
 128:	41 11       	cpse	r20, r1
 12a:	4b c0       	rjmp	.+150    	; 0x1c2 <DIO_set_pin_dir+0x10e>
    {
      CLR_BIT(DDRB, pin);        // Set the pin 'PIN' in port 'B' as 'I/P'.
 12c:	27 b3       	in	r18, 0x17	; 23
 12e:	81 e0       	ldi	r24, 0x01	; 1
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	ac 01       	movw	r20, r24
 134:	02 c0       	rjmp	.+4      	; 0x13a <DIO_set_pin_dir+0x86>
 136:	44 0f       	add	r20, r20
 138:	55 1f       	adc	r21, r21
 13a:	6a 95       	dec	r22
 13c:	e2 f7       	brpl	.-8      	; 0x136 <DIO_set_pin_dir+0x82>
 13e:	ba 01       	movw	r22, r20
 140:	60 95       	com	r22
 142:	62 23       	and	r22, r18
 144:	67 bb       	out	0x17, r22	; 23
 146:	08 95       	ret
    }
    break;

    case 'C':                    // @Port 'C'.
    case 'c':                    // @Port 'c'. 
    if (1==direction)            // '1' is for 'O/P'.
 148:	41 30       	cpi	r20, 0x01	; 1
 14a:	69 f4       	brne	.+26     	; 0x166 <DIO_set_pin_dir+0xb2>
    {
      SET_BIT(DDRC, pin);        // Set the pin 'PIN' in port 'C' as 'O/P'. 
 14c:	24 b3       	in	r18, 0x14	; 20
 14e:	81 e0       	ldi	r24, 0x01	; 1
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	ac 01       	movw	r20, r24
 154:	02 c0       	rjmp	.+4      	; 0x15a <DIO_set_pin_dir+0xa6>
 156:	44 0f       	add	r20, r20
 158:	55 1f       	adc	r21, r21
 15a:	6a 95       	dec	r22
 15c:	e2 f7       	brpl	.-8      	; 0x156 <DIO_set_pin_dir+0xa2>
 15e:	ba 01       	movw	r22, r20
 160:	62 2b       	or	r22, r18
 162:	64 bb       	out	0x14, r22	; 20
 164:	08 95       	ret
    }
    else if (0 == direction)
 166:	41 11       	cpse	r20, r1
 168:	2c c0       	rjmp	.+88     	; 0x1c2 <DIO_set_pin_dir+0x10e>
    {
      CLR_BIT(DDRC, pin);        // Set the pin 'PIN' in port 'C' as 'I/P'. 
 16a:	24 b3       	in	r18, 0x14	; 20
 16c:	81 e0       	ldi	r24, 0x01	; 1
 16e:	90 e0       	ldi	r25, 0x00	; 0
 170:	ac 01       	movw	r20, r24
 172:	02 c0       	rjmp	.+4      	; 0x178 <DIO_set_pin_dir+0xc4>
 174:	44 0f       	add	r20, r20
 176:	55 1f       	adc	r21, r21
 178:	6a 95       	dec	r22
 17a:	e2 f7       	brpl	.-8      	; 0x174 <DIO_set_pin_dir+0xc0>
 17c:	ba 01       	movw	r22, r20
 17e:	60 95       	com	r22
 180:	62 23       	and	r22, r18
 182:	64 bb       	out	0x14, r22	; 20
 184:	08 95       	ret
    }
    break;

    case 'D':                    // @Port 'D'.
    case 'd':                    // @Port 'd'. 
    if (1==direction)            // '1' is for 'I/P'.
 186:	41 30       	cpi	r20, 0x01	; 1
 188:	69 f4       	brne	.+26     	; 0x1a4 <DIO_set_pin_dir+0xf0>
    {
      SET_BIT(DDRD, pin);        // Set the pin 'PIN' in port 'D' as 'I/P'. 
 18a:	21 b3       	in	r18, 0x11	; 17
 18c:	81 e0       	ldi	r24, 0x01	; 1
 18e:	90 e0       	ldi	r25, 0x00	; 0
 190:	ac 01       	movw	r20, r24
 192:	02 c0       	rjmp	.+4      	; 0x198 <DIO_set_pin_dir+0xe4>
 194:	44 0f       	add	r20, r20
 196:	55 1f       	adc	r21, r21
 198:	6a 95       	dec	r22
 19a:	e2 f7       	brpl	.-8      	; 0x194 <DIO_set_pin_dir+0xe0>
 19c:	ba 01       	movw	r22, r20
 19e:	62 2b       	or	r22, r18
 1a0:	61 bb       	out	0x11, r22	; 17
 1a2:	08 95       	ret
    }
    else if (0 == direction)
 1a4:	41 11       	cpse	r20, r1
 1a6:	0d c0       	rjmp	.+26     	; 0x1c2 <DIO_set_pin_dir+0x10e>
    {
      CLR_BIT(DDRD, pin);        // Set the pin 'PIN' in port 'D' as 'O/P'.
 1a8:	21 b3       	in	r18, 0x11	; 17
 1aa:	81 e0       	ldi	r24, 0x01	; 1
 1ac:	90 e0       	ldi	r25, 0x00	; 0
 1ae:	ac 01       	movw	r20, r24
 1b0:	02 c0       	rjmp	.+4      	; 0x1b6 <DIO_set_pin_dir+0x102>
 1b2:	44 0f       	add	r20, r20
 1b4:	55 1f       	adc	r21, r21
 1b6:	6a 95       	dec	r22
 1b8:	e2 f7       	brpl	.-8      	; 0x1b2 <DIO_set_pin_dir+0xfe>
 1ba:	ba 01       	movw	r22, r20
 1bc:	60 95       	com	r22
 1be:	62 23       	and	r22, r18
 1c0:	61 bb       	out	0x11, r22	; 17
 1c2:	08 95       	ret

000001c4 <Timer0_fastPWM>:
}

//...............................................................

void Timer0_fastPWM (unsigned char OCR0_val, unsigned short prescalar, unsigned char inverting)   //Inverting @ "inverting" = 1.
{
 1c4:	0f 93       	push	r16
 1c6:	1f 93       	push	r17
 1c8:	cf 93       	push	r28
 1ca:	df 93       	push	r29
 1cc:	08 2f       	mov	r16, r24
 1ce:	eb 01       	movw	r28, r22
 1d0:	14 2f       	mov	r17, r20
	DIO_set_pin_dir('B', 3, 1);     //Set OC0 as O/P pin
 1d2:	41 e0       	ldi	r20, 0x01	; 1
 1d4:	63 e0       	ldi	r22, 0x03	; 3
 1d6:	82 e4       	ldi	r24, 0x42	; 66
 1d8:	0e 94 5a 00 	call	0xb4	; 0xb4 <DIO_set_pin_dir>
	
    //Set Control bits to "Fast PWM" mode.
	SET_BIT(TCCR0, WGM00);
 1dc:	83 b7       	in	r24, 0x33	; 51
 1de:	80 64       	ori	r24, 0x40	; 64
 1e0:	83 bf       	out	0x33, r24	; 51
    SET_BIT(TCCR0, WGM01);
 1e2:	83 b7       	in	r24, 0x33	; 51
 1e4:	88 60       	ori	r24, 0x08	; 8
 1e6:	83 bf       	out	0x33, r24	; 51
	
	//Load value in [OCR0]
	OCR0 = OCR0_val;               
 1e8:	0c bf       	out	0x3c, r16	; 60
	
	//Select the Timer Clock PRESCALAR.
	switch (prescalar)
 1ea:	c0 34       	cpi	r28, 0x40	; 64
 1ec:	d1 05       	cpc	r29, r1
 1ee:	01 f1       	breq	.+64     	; 0x230 <Timer0_fastPWM+0x6c>
 1f0:	28 f4       	brcc	.+10     	; 0x1fc <Timer0_fastPWM+0x38>
 1f2:	20 97       	sbiw	r28, 0x00	; 0
 1f4:	59 f0       	breq	.+22     	; 0x20c <Timer0_fastPWM+0x48>
 1f6:	28 97       	sbiw	r28, 0x08	; 8
 1f8:	91 f0       	breq	.+36     	; 0x21e <Timer0_fastPWM+0x5a>
 1fa:	35 c0       	rjmp	.+106    	; 0x266 <Timer0_fastPWM+0xa2>
 1fc:	c1 15       	cp	r28, r1
 1fe:	81 e0       	ldi	r24, 0x01	; 1
 200:	d8 07       	cpc	r29, r24
 202:	f9 f0       	breq	.+62     	; 0x242 <Timer0_fastPWM+0x7e>
 204:	c1 15       	cp	r28, r1
 206:	d4 40       	sbci	r29, 0x04	; 4
 208:	29 f1       	breq	.+74     	; 0x254 <Timer0_fastPWM+0x90>
 20a:	2d c0       	rjmp	.+90     	; 0x266 <Timer0_fastPWM+0xa2>
	{
		case 0 :                   //No Prescaler
		CLR_BIT(TCCR0, CS00);
 20c:	83 b7       	in	r24, 0x33	; 51
 20e:	8e 7f       	andi	r24, 0xFE	; 254
 210:	83 bf       	out	0x33, r24	; 51
		CLR_BIT(TCCR0, CS01);
 212:	83 b7       	in	r24, 0x33	; 51
 214:	8d 7f       	andi	r24, 0xFD	; 253
 216:	83 bf       	out	0x33, r24	; 51
		SET_BIT(TCCR0, CS02);
 218:	83 b7       	in	r24, 0x33	; 51
 21a:	84 60       	ori	r24, 0x04	; 4
 21c:	83 bf       	out	0x33, r24	; 51
		
		case 8 :                   //Prescaler = 8
		CLR_BIT(TCCR0, CS00);  
 21e:	83 b7       	in	r24, 0x33	; 51
 220:	8e 7f       	andi	r24, 0xFE	; 254
 222:	83 bf       	out	0x33, r24	; 51
		SET_BIT(TCCR0, CS01);
 224:	83 b7       	in	r24, 0x33	; 51
 226:	82 60       	ori	r24, 0x02	; 2
 228:	83 bf       	out	0x33, r24	; 51
		CLR_BIT(TCCR0, CS02);
 22a:	83 b7       	in	r24, 0x33	; 51
 22c:	8b 7f       	andi	r24, 0xFB	; 251
 22e:	83 bf       	out	0x33, r24	; 51
		
		case 64 :                  //Prescaler = 64
		SET_BIT(TCCR0, CS00);
 230:	83 b7       	in	r24, 0x33	; 51
 232:	81 60       	ori	r24, 0x01	; 1
 234:	83 bf       	out	0x33, r24	; 51
		SET_BIT(TCCR0, CS01);
 236:	83 b7       	in	r24, 0x33	; 51
 238:	82 60       	ori	r24, 0x02	; 2
 23a:	83 bf       	out	0x33, r24	; 51
		CLR_BIT(TCCR0, CS02);
 23c:	83 b7       	in	r24, 0x33	; 51
 23e:	8b 7f       	andi	r24, 0xFB	; 251
 240:	83 bf       	out	0x33, r24	; 51
		
		case 256 :                 //Prescaler = 256
		CLR_BIT(TCCR0, CS00);
 242:	83 b7       	in	r24, 0x33	; 51
 244:	8e 7f       	andi	r24, 0xFE	; 254
 246:	83 bf       	out	0x33, r24	; 51
		CLR_BIT(TCCR0, CS01);
 248:	83 b7       	in	r24, 0x33	; 51
 24a:	8d 7f       	andi	r24, 0xFD	; 253
 24c:	83 bf       	out	0x33, r24	; 51
		SET_BIT(TCCR0, CS02);
 24e:	83 b7       	in	r24, 0x33	; 51
 250:	84 60       	ori	r24, 0x04	; 4
 252:	83 bf       	out	0x33, r24	; 51
		
		case 1024 :                //Prescaler = 1024
		SET_BIT(TCCR0, CS00);
 254:	83 b7       	in	r24, 0x33	; 51
 256:	81 60       	ori	r24, 0x01	; 1
 258:	83 bf       	out	0x33, r24	; 51
		CLR_BIT(TCCR0, CS01);
 25a:	83 b7       	in	r24, 0x33	; 51
 25c:	8d 7f       	andi	r24, 0xFD	; 253
 25e:	83 bf       	out	0x33, r24	; 51
		SET_BIT(TCCR0, CS02);
 260:	83 b7       	in	r24, 0x33	; 51
 262:	84 60       	ori	r24, 0x04	; 4
 264:	83 bf       	out	0x33, r24	; 51
	}
	
	

     switch (inverting)
 266:	11 23       	and	r17, r17
 268:	19 f0       	breq	.+6      	; 0x270 <Timer0_fastPWM+0xac>
 26a:	11 30       	cpi	r17, 0x01	; 1
 26c:	39 f0       	breq	.+14     	; 0x27c <Timer0_fastPWM+0xb8>
 26e:	0c c0       	rjmp	.+24     	; 0x288 <Timer0_fastPWM+0xc4>
 	{
 		case 0 :                   //Clear OC0 on compare match, set OC0 at Bottom, Non-Inverting mode.
 		CLR_BIT(TCCR0, COM00);
 270:	83 b7       	in	r24, 0x33	; 51
 272:	8f 7e       	andi	r24, 0xEF	; 239
 274:	83 bf       	out	0x33, r24	; 51
		SET_BIT(TCCR0, COM01);
 276:	83 b7       	in	r24, 0x33	; 51
 278:	80 62       	ori	r24, 0x20	; 32
 27a:	83 bf       	out	0x33, r24	; 51
 		
 		case 1 :                   //Set OC0 on compare match, clear OC0 at Bottom, Inverting mode.
 		SET_BIT(TCCR0,COM00);
 27c:	83 b7       	in	r24, 0x33	; 51
 27e:	80 61       	ori	r24, 0x10	; 16
 280:	83 bf       	out	0x33, r24	; 51
        SET_BIT(TCCR0,COM01);
 282:	83 b7       	in	r24, 0x33	; 51
 284:	80 62       	ori	r24, 0x20	; 32
 286:	83 bf       	out	0x33, r24	; 51
 	}
}
 288:	df 91       	pop	r29
 28a:	cf 91       	pop	r28
 28c:	1f 91       	pop	r17
 28e:	0f 91       	pop	r16
 290:	08 95       	ret

00000292 <main>:


int main(void)
{
	unsigned short pwm_volt = 1;
	Timer0_fastPWM (64, 1024, 1);
 292:	41 e0       	ldi	r20, 0x01	; 1
 294:	60 e0       	ldi	r22, 0x00	; 0
 296:	74 e0       	ldi	r23, 0x04	; 4
 298:	80 e4       	ldi	r24, 0x40	; 64
 29a:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <Timer0_fastPWM>
 29e:	ff cf       	rjmp	.-2      	; 0x29e <main+0xc>

000002a0 <__tablejump2__>:
 2a0:	ee 0f       	add	r30, r30
 2a2:	ff 1f       	adc	r31, r31

000002a4 <__tablejump__>:
 2a4:	05 90       	lpm	r0, Z+
 2a6:	f4 91       	lpm	r31, Z
 2a8:	e0 2d       	mov	r30, r0
 2aa:	09 94       	ijmp

000002ac <_exit>:
 2ac:	f8 94       	cli

000002ae <__stop_program>:
 2ae:	ff cf       	rjmp	.-2      	; 0x2ae <__stop_program>
