
Timer_phasecorrect_pwm.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002a0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  000002f4  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 000000f0  00000000  00000000  00000324  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   0000076b  00000000  00000000  00000414  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000275  00000000  00000000  00000b7f  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   0000043e  00000000  00000000  00000df4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  000001ec  00000000  00000000  00001234  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000003a1  00000000  00000000  00001420  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00001119  00000000  00000000  000017c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 000000c0  00000000  00000000  000028da  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__ctors_end>
   4:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
   8:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
   c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  10:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  14:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  18:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  1c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  20:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  24:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  28:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  2c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  30:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  34:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  38:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  3c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  40:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  44:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  48:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  4c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  50:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  54:	66 00       	.word	0x0066	; ????
  56:	83 00       	.word	0x0083	; ????
  58:	a0 00       	.word	0x00a0	; ????
  5a:	bd 00       	.word	0x00bd	; ????
  5c:	d9 00       	.word	0x00d9	; ????
  5e:	d9 00       	.word	0x00d9	; ????
  60:	d9 00       	.word	0x00d9	; ????
  62:	d9 00       	.word	0x00d9	; ????
  64:	d9 00       	.word	0x00d9	; ????
  66:	d9 00       	.word	0x00d9	; ????
  68:	d9 00       	.word	0x00d9	; ????
  6a:	d9 00       	.word	0x00d9	; ????
  6c:	d9 00       	.word	0x00d9	; ????
  6e:	d9 00       	.word	0x00d9	; ????
  70:	d9 00       	.word	0x00d9	; ????
  72:	d9 00       	.word	0x00d9	; ????
  74:	d9 00       	.word	0x00d9	; ????
  76:	d9 00       	.word	0x00d9	; ????
  78:	d9 00       	.word	0x00d9	; ????
  7a:	d9 00       	.word	0x00d9	; ????
  7c:	d9 00       	.word	0x00d9	; ????
  7e:	d9 00       	.word	0x00d9	; ????
  80:	d9 00       	.word	0x00d9	; ????
  82:	d9 00       	.word	0x00d9	; ????
  84:	d9 00       	.word	0x00d9	; ????
  86:	d9 00       	.word	0x00d9	; ????
  88:	d9 00       	.word	0x00d9	; ????
  8a:	d9 00       	.word	0x00d9	; ????
  8c:	d9 00       	.word	0x00d9	; ????
  8e:	d9 00       	.word	0x00d9	; ????
  90:	d9 00       	.word	0x00d9	; ????
  92:	d9 00       	.word	0x00d9	; ????
  94:	66 00       	.word	0x0066	; ????
  96:	83 00       	.word	0x0083	; ????
  98:	a0 00       	.word	0x00a0	; ????
  9a:	bd 00       	.word	0x00bd	; ????

0000009c <__ctors_end>:
  9c:	11 24       	eor	r1, r1
  9e:	1f be       	out	0x3f, r1	; 63
  a0:	cf e5       	ldi	r28, 0x5F	; 95
  a2:	d8 e0       	ldi	r29, 0x08	; 8
  a4:	de bf       	out	0x3e, r29	; 62
  a6:	cd bf       	out	0x3d, r28	; 61
  a8:	0e 94 41 01 	call	0x282	; 0x282 <main>
  ac:	0c 94 4e 01 	jmp	0x29c	; 0x29c <_exit>

000000b0 <__bad_interrupt>:
  b0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b4 <DIO_set_pin_dir>:
    {
      SET_BIT(PORTC, pin);    // Set pin 'PIN' in port 'C' as 'HIGH'.
    }
    else
    {
      CLR_BIT(PORTC, pin);    // Set pin 'PIN' in port 'C' as 'LOW'.
  b4:	90 e0       	ldi	r25, 0x00	; 0
  b6:	fc 01       	movw	r30, r24
  b8:	e1 54       	subi	r30, 0x41	; 65
  ba:	f1 09       	sbc	r31, r1
  bc:	e4 32       	cpi	r30, 0x24	; 36
  be:	f1 05       	cpc	r31, r1
  c0:	08 f0       	brcs	.+2      	; 0xc4 <DIO_set_pin_dir+0x10>
  c2:	77 c0       	rjmp	.+238    	; 0x1b2 <DIO_set_pin_dir+0xfe>
  c4:	e6 5d       	subi	r30, 0xD6	; 214
    }
    break;
  
    case 'D':                // @Port 'D'.
    case 'd':                // @Port 'd'.
    if (1==value)             
  c6:	ff 4f       	sbci	r31, 0xFF	; 255
  c8:	0c 94 48 01 	jmp	0x290	; 0x290 <__tablejump2__>
    {
      SET_BIT(PORTD, pin);   // Set pin 'PIN' in port 'D' as 'HIGH'.
  cc:	41 30       	cpi	r20, 0x01	; 1
  ce:	69 f4       	brne	.+26     	; 0xea <DIO_set_pin_dir+0x36>
  d0:	2a b3       	in	r18, 0x1a	; 26
  d2:	81 e0       	ldi	r24, 0x01	; 1
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	ac 01       	movw	r20, r24
  d8:	02 c0       	rjmp	.+4      	; 0xde <DIO_set_pin_dir+0x2a>
  da:	44 0f       	add	r20, r20
  dc:	55 1f       	adc	r21, r21
  de:	6a 95       	dec	r22
  e0:	e2 f7       	brpl	.-8      	; 0xda <DIO_set_pin_dir+0x26>
  e2:	ba 01       	movw	r22, r20
    }
    else
    {
      CLR_BIT(PORTD, pin);   // Set pin 'PIN' in port 'D' as 'LOW'.
  e4:	62 2b       	or	r22, r18
  e6:	6a bb       	out	0x1a, r22	; 26
  e8:	08 95       	ret
  ea:	2a b3       	in	r18, 0x1a	; 26
  ec:	81 e0       	ldi	r24, 0x01	; 1
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	ac 01       	movw	r20, r24
  f2:	02 c0       	rjmp	.+4      	; 0xf8 <DIO_set_pin_dir+0x44>
  f4:	44 0f       	add	r20, r20
  f6:	55 1f       	adc	r21, r21
  f8:	6a 95       	dec	r22
  fa:	e2 f7       	brpl	.-8      	; 0xf4 <DIO_set_pin_dir+0x40>
  fc:	ba 01       	movw	r22, r20
  fe:	60 95       	com	r22
    {
      SET_BIT(DDRA, pin);         // Set the pin 'PIN' in port 'A' as 'O/P'.
    }
    else
    {
      CLR_BIT(DDRA, pin);        // Set the pin 'PIN' in port 'A' as 'I/P'.
 100:	62 23       	and	r22, r18
 102:	6a bb       	out	0x1a, r22	; 26
 104:	08 95       	ret
    } 
    break;

    case 'B':                    // @Port 'B'.
    case 'b':                    // @Port 'b'.
    if (1==direction)            // '1' is for 'O/P'.
 106:	41 30       	cpi	r20, 0x01	; 1
 108:	69 f4       	brne	.+26     	; 0x124 <DIO_set_pin_dir+0x70>
    {
      SET_BIT(DDRB, pin);        // Set the pin 'PIN' in port 'B' as 'O/P'.
 10a:	27 b3       	in	r18, 0x17	; 23
 10c:	81 e0       	ldi	r24, 0x01	; 1
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	ac 01       	movw	r20, r24
 112:	02 c0       	rjmp	.+4      	; 0x118 <DIO_set_pin_dir+0x64>
 114:	44 0f       	add	r20, r20
 116:	55 1f       	adc	r21, r21
 118:	6a 95       	dec	r22
 11a:	e2 f7       	brpl	.-8      	; 0x114 <DIO_set_pin_dir+0x60>
 11c:	ba 01       	movw	r22, r20
 11e:	62 2b       	or	r22, r18
 120:	67 bb       	out	0x17, r22	; 23
 122:	08 95       	ret
    }
    else
    {
      CLR_BIT(DDRB, pin);        // Set the pin 'PIN' in port 'B' as 'I/P'.
 124:	27 b3       	in	r18, 0x17	; 23
 126:	81 e0       	ldi	r24, 0x01	; 1
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	ac 01       	movw	r20, r24
 12c:	02 c0       	rjmp	.+4      	; 0x132 <DIO_set_pin_dir+0x7e>
 12e:	44 0f       	add	r20, r20
 130:	55 1f       	adc	r21, r21
 132:	6a 95       	dec	r22
 134:	e2 f7       	brpl	.-8      	; 0x12e <DIO_set_pin_dir+0x7a>
 136:	ba 01       	movw	r22, r20
 138:	60 95       	com	r22
 13a:	62 23       	and	r22, r18
 13c:	67 bb       	out	0x17, r22	; 23
 13e:	08 95       	ret
    }
    break;

    case 'C':                    // @Port 'C'.
    case 'c':                    // @Port 'c'. 
    if (1==direction)            // '1' is for 'O/P'.
 140:	41 30       	cpi	r20, 0x01	; 1
 142:	69 f4       	brne	.+26     	; 0x15e <DIO_set_pin_dir+0xaa>
    {
      SET_BIT(DDRC, pin);        // Set the pin 'PIN' in port 'C' as 'O/P'. 
 144:	24 b3       	in	r18, 0x14	; 20
 146:	81 e0       	ldi	r24, 0x01	; 1
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	ac 01       	movw	r20, r24
 14c:	02 c0       	rjmp	.+4      	; 0x152 <DIO_set_pin_dir+0x9e>
 14e:	44 0f       	add	r20, r20
 150:	55 1f       	adc	r21, r21
 152:	6a 95       	dec	r22
 154:	e2 f7       	brpl	.-8      	; 0x14e <DIO_set_pin_dir+0x9a>
 156:	ba 01       	movw	r22, r20
 158:	62 2b       	or	r22, r18
 15a:	64 bb       	out	0x14, r22	; 20
 15c:	08 95       	ret
    }
    else
    {
      CLR_BIT(DDRC, pin);        // Set the pin 'PIN' in port 'C' as 'I/P'. 
 15e:	24 b3       	in	r18, 0x14	; 20
 160:	81 e0       	ldi	r24, 0x01	; 1
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	ac 01       	movw	r20, r24
 166:	02 c0       	rjmp	.+4      	; 0x16c <DIO_set_pin_dir+0xb8>
 168:	44 0f       	add	r20, r20
 16a:	55 1f       	adc	r21, r21
 16c:	6a 95       	dec	r22
 16e:	e2 f7       	brpl	.-8      	; 0x168 <DIO_set_pin_dir+0xb4>
 170:	ba 01       	movw	r22, r20
 172:	60 95       	com	r22
 174:	62 23       	and	r22, r18
 176:	64 bb       	out	0x14, r22	; 20
 178:	08 95       	ret
    }
    break;

    case 'D':                    // @Port 'D'.
    case 'd':                    // @Port 'd'. 
    if (1==direction)            // '1' is for 'I/P'.
 17a:	41 30       	cpi	r20, 0x01	; 1
 17c:	69 f4       	brne	.+26     	; 0x198 <DIO_set_pin_dir+0xe4>
    {
      SET_BIT(DDRD, pin);        // Set the pin 'PIN' in port 'D' as 'I/P'. 
 17e:	21 b3       	in	r18, 0x11	; 17
 180:	81 e0       	ldi	r24, 0x01	; 1
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	ac 01       	movw	r20, r24
 186:	02 c0       	rjmp	.+4      	; 0x18c <DIO_set_pin_dir+0xd8>
 188:	44 0f       	add	r20, r20
 18a:	55 1f       	adc	r21, r21
 18c:	6a 95       	dec	r22
 18e:	e2 f7       	brpl	.-8      	; 0x188 <DIO_set_pin_dir+0xd4>
 190:	ba 01       	movw	r22, r20
 192:	62 2b       	or	r22, r18
 194:	61 bb       	out	0x11, r22	; 17
 196:	08 95       	ret
    }
    else
    {
      CLR_BIT(DDRD, pin);        // Set the pin 'PIN' in port 'D' as 'O/P'.
 198:	21 b3       	in	r18, 0x11	; 17
 19a:	81 e0       	ldi	r24, 0x01	; 1
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	ac 01       	movw	r20, r24
 1a0:	02 c0       	rjmp	.+4      	; 0x1a6 <DIO_set_pin_dir+0xf2>
 1a2:	44 0f       	add	r20, r20
 1a4:	55 1f       	adc	r21, r21
 1a6:	6a 95       	dec	r22
 1a8:	e2 f7       	brpl	.-8      	; 0x1a2 <DIO_set_pin_dir+0xee>
 1aa:	ba 01       	movw	r22, r20
 1ac:	60 95       	com	r22
 1ae:	62 23       	and	r22, r18
 1b0:	61 bb       	out	0x11, r22	; 17
 1b2:	08 95       	ret

000001b4 <Timer_wave_phasecorrectPWM_OC0>:
}

//...............................................................

void Timer_wave_phasecorrectPWM_OC0 (unsigned char OCR0_val, unsigned short prescalar, unsigned char clr_upcounting)
{
 1b4:	0f 93       	push	r16
 1b6:	1f 93       	push	r17
 1b8:	cf 93       	push	r28
 1ba:	df 93       	push	r29
 1bc:	08 2f       	mov	r16, r24
 1be:	eb 01       	movw	r28, r22
 1c0:	14 2f       	mov	r17, r20
	DIO_set_pin_dir('B', 3, 1);     //Set OC0 as O/P pin
 1c2:	41 e0       	ldi	r20, 0x01	; 1
 1c4:	63 e0       	ldi	r22, 0x03	; 3
 1c6:	82 e4       	ldi	r24, 0x42	; 66
 1c8:	0e 94 5a 00 	call	0xb4	; 0xb4 <DIO_set_pin_dir>
	
	//Set Control bits to "Fast PWM" mode.
	SET_BIT(TCCR0, WGM00);
 1cc:	83 b7       	in	r24, 0x33	; 51
 1ce:	80 64       	ori	r24, 0x40	; 64
 1d0:	83 bf       	out	0x33, r24	; 51
	CLR_BIT(TCCR0, WGM01);
 1d2:	83 b7       	in	r24, 0x33	; 51
 1d4:	87 7f       	andi	r24, 0xF7	; 247
 1d6:	83 bf       	out	0x33, r24	; 51
	
	OCR0 = OCR0_val;               //Load value in [OCR0]
 1d8:	0c bf       	out	0x3c, r16	; 60
	
	//Select the Timer Clock PRESCALAR.
	switch (prescalar)
 1da:	c0 34       	cpi	r28, 0x40	; 64
 1dc:	d1 05       	cpc	r29, r1
 1de:	01 f1       	breq	.+64     	; 0x220 <Timer_wave_phasecorrectPWM_OC0+0x6c>
 1e0:	28 f4       	brcc	.+10     	; 0x1ec <Timer_wave_phasecorrectPWM_OC0+0x38>
 1e2:	20 97       	sbiw	r28, 0x00	; 0
 1e4:	59 f0       	breq	.+22     	; 0x1fc <Timer_wave_phasecorrectPWM_OC0+0x48>
 1e6:	28 97       	sbiw	r28, 0x08	; 8
 1e8:	91 f0       	breq	.+36     	; 0x20e <Timer_wave_phasecorrectPWM_OC0+0x5a>
 1ea:	35 c0       	rjmp	.+106    	; 0x256 <Timer_wave_phasecorrectPWM_OC0+0xa2>
 1ec:	c1 15       	cp	r28, r1
 1ee:	81 e0       	ldi	r24, 0x01	; 1
 1f0:	d8 07       	cpc	r29, r24
 1f2:	f9 f0       	breq	.+62     	; 0x232 <Timer_wave_phasecorrectPWM_OC0+0x7e>
 1f4:	c1 15       	cp	r28, r1
 1f6:	d4 40       	sbci	r29, 0x04	; 4
 1f8:	29 f1       	breq	.+74     	; 0x244 <Timer_wave_phasecorrectPWM_OC0+0x90>
 1fa:	2d c0       	rjmp	.+90     	; 0x256 <Timer_wave_phasecorrectPWM_OC0+0xa2>
	{
		case 0 :                   //No Prescaler
		CLR_BIT(TCCR0, CS00);
 1fc:	83 b7       	in	r24, 0x33	; 51
 1fe:	8e 7f       	andi	r24, 0xFE	; 254
 200:	83 bf       	out	0x33, r24	; 51
		CLR_BIT(TCCR0, CS01);
 202:	83 b7       	in	r24, 0x33	; 51
 204:	8d 7f       	andi	r24, 0xFD	; 253
 206:	83 bf       	out	0x33, r24	; 51
		SET_BIT(TCCR0, CS02);
 208:	83 b7       	in	r24, 0x33	; 51
 20a:	84 60       	ori	r24, 0x04	; 4
 20c:	83 bf       	out	0x33, r24	; 51
		
		case 8 :                   //Prescaler = 8
		CLR_BIT(TCCR0, CS00);
 20e:	83 b7       	in	r24, 0x33	; 51
 210:	8e 7f       	andi	r24, 0xFE	; 254
 212:	83 bf       	out	0x33, r24	; 51
		SET_BIT(TCCR0, CS01);
 214:	83 b7       	in	r24, 0x33	; 51
 216:	82 60       	ori	r24, 0x02	; 2
 218:	83 bf       	out	0x33, r24	; 51
		CLR_BIT(TCCR0, CS02);
 21a:	83 b7       	in	r24, 0x33	; 51
 21c:	8b 7f       	andi	r24, 0xFB	; 251
 21e:	83 bf       	out	0x33, r24	; 51
		
		case 64 :                  //Prescaler = 64
		SET_BIT(TCCR0, CS00);
 220:	83 b7       	in	r24, 0x33	; 51
 222:	81 60       	ori	r24, 0x01	; 1
 224:	83 bf       	out	0x33, r24	; 51
		SET_BIT(TCCR0, CS01);
 226:	83 b7       	in	r24, 0x33	; 51
 228:	82 60       	ori	r24, 0x02	; 2
 22a:	83 bf       	out	0x33, r24	; 51
		CLR_BIT(TCCR0, CS02);
 22c:	83 b7       	in	r24, 0x33	; 51
 22e:	8b 7f       	andi	r24, 0xFB	; 251
 230:	83 bf       	out	0x33, r24	; 51
		
		case 256 :                 //Prescaler = 256
		CLR_BIT(TCCR0, CS00);
 232:	83 b7       	in	r24, 0x33	; 51
 234:	8e 7f       	andi	r24, 0xFE	; 254
 236:	83 bf       	out	0x33, r24	; 51
		CLR_BIT(TCCR0, CS01);
 238:	83 b7       	in	r24, 0x33	; 51
 23a:	8d 7f       	andi	r24, 0xFD	; 253
 23c:	83 bf       	out	0x33, r24	; 51
		SET_BIT(TCCR0, CS00);
 23e:	83 b7       	in	r24, 0x33	; 51
 240:	81 60       	ori	r24, 0x01	; 1
 242:	83 bf       	out	0x33, r24	; 51
		
		case 1024 :                //Prescaler = 1024
		SET_BIT(TCCR0, CS00);
 244:	83 b7       	in	r24, 0x33	; 51
 246:	81 60       	ori	r24, 0x01	; 1
 248:	83 bf       	out	0x33, r24	; 51
		CLR_BIT(TCCR0, CS01);
 24a:	83 b7       	in	r24, 0x33	; 51
 24c:	8d 7f       	andi	r24, 0xFD	; 253
 24e:	83 bf       	out	0x33, r24	; 51
		SET_BIT(TCCR0, CS02);
 250:	83 b7       	in	r24, 0x33	; 51
 252:	84 60       	ori	r24, 0x04	; 4
 254:	83 bf       	out	0x33, r24	; 51
	}
	
	switch (clr_upcounting)
 256:	11 23       	and	r17, r17
 258:	19 f0       	breq	.+6      	; 0x260 <Timer_wave_phasecorrectPWM_OC0+0xac>
 25a:	11 30       	cpi	r17, 0x01	; 1
 25c:	39 f0       	breq	.+14     	; 0x26c <Timer_wave_phasecorrectPWM_OC0+0xb8>
 25e:	0c c0       	rjmp	.+24     	; 0x278 <Timer_wave_phasecorrectPWM_OC0+0xc4>
	{
		case 0 :                   //Clear OC0 on compare match when up-counting.
		SET_BIT(TCCR0, COM00);
 260:	83 b7       	in	r24, 0x33	; 51
 262:	80 61       	ori	r24, 0x10	; 16
 264:	83 bf       	out	0x33, r24	; 51
		SET_BIT(TCCR0, COM01);
 266:	83 b7       	in	r24, 0x33	; 51
 268:	80 62       	ori	r24, 0x20	; 32
 26a:	83 bf       	out	0x33, r24	; 51
		
		case 1 :                   //Set OC0 on compare match when up-counting.
		CLR_BIT(TCCR0,COM00);
 26c:	83 b7       	in	r24, 0x33	; 51
 26e:	8f 7e       	andi	r24, 0xEF	; 239
 270:	83 bf       	out	0x33, r24	; 51
		SET_BIT(TCCR0,COM01);
 272:	83 b7       	in	r24, 0x33	; 51
 274:	80 62       	ori	r24, 0x20	; 32
 276:	83 bf       	out	0x33, r24	; 51
	}
}
 278:	df 91       	pop	r29
 27a:	cf 91       	pop	r28
 27c:	1f 91       	pop	r17
 27e:	0f 91       	pop	r16
 280:	08 95       	ret

00000282 <main>:
#include "Timer.h"

int main(void)
{
	
	Timer_wave_phasecorrectPWM_OC0 (64, 1024, 0);
 282:	40 e0       	ldi	r20, 0x00	; 0
 284:	60 e0       	ldi	r22, 0x00	; 0
 286:	74 e0       	ldi	r23, 0x04	; 4
 288:	80 e4       	ldi	r24, 0x40	; 64
 28a:	0e 94 da 00 	call	0x1b4	; 0x1b4 <Timer_wave_phasecorrectPWM_OC0>
 28e:	ff cf       	rjmp	.-2      	; 0x28e <main+0xc>

00000290 <__tablejump2__>:
 290:	ee 0f       	add	r30, r30
 292:	ff 1f       	adc	r31, r31

00000294 <__tablejump__>:
 294:	05 90       	lpm	r0, Z+
 296:	f4 91       	lpm	r31, Z
 298:	e0 2d       	mov	r30, r0
 29a:	09 94       	ijmp

0000029c <_exit>:
 29c:	f8 94       	cli

0000029e <__stop_program>:
 29e:	ff cf       	rjmp	.-2      	; 0x29e <__stop_program>
