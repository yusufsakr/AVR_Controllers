
Timer_CTC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003fc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000004  00800060  00800060  00000470  2**0
                  ALLOC
  2 .comment      00000030  00000000  00000000  00000470  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000110  00000000  00000000  000004a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000008be  00000000  00000000  000005b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000335  00000000  00000000  00000e6e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000042f  00000000  00000000  000011a3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000001d4  00000000  00000000  000015d4  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000326  00000000  00000000  000017a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000f85  00000000  00000000  00001ace  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000000d0  00000000  00000000  00002a53  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
   4:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
   8:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
   c:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  10:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  14:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  18:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  1c:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  20:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  24:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  28:	0c 94 d5 01 	jmp	0x3aa	; 0x3aa <__vector_10>
  2c:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  30:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  34:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  38:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  3c:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  40:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  44:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  48:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  4c:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  50:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  54:	92 00       	.word	0x0092	; ????
  56:	b1 00       	.word	0x00b1	; ????
  58:	d0 00       	.word	0x00d0	; ????
  5a:	ef 00       	.word	0x00ef	; ????
  5c:	0d 01       	movw	r0, r26
  5e:	0d 01       	movw	r0, r26
  60:	0d 01       	movw	r0, r26
  62:	0d 01       	movw	r0, r26
  64:	0d 01       	movw	r0, r26
  66:	0d 01       	movw	r0, r26
  68:	0d 01       	movw	r0, r26
  6a:	0d 01       	movw	r0, r26
  6c:	0d 01       	movw	r0, r26
  6e:	0d 01       	movw	r0, r26
  70:	0d 01       	movw	r0, r26
  72:	0d 01       	movw	r0, r26
  74:	0d 01       	movw	r0, r26
  76:	0d 01       	movw	r0, r26
  78:	0d 01       	movw	r0, r26
  7a:	0d 01       	movw	r0, r26
  7c:	0d 01       	movw	r0, r26
  7e:	0d 01       	movw	r0, r26
  80:	0d 01       	movw	r0, r26
  82:	0d 01       	movw	r0, r26
  84:	0d 01       	movw	r0, r26
  86:	0d 01       	movw	r0, r26
  88:	0d 01       	movw	r0, r26
  8a:	0d 01       	movw	r0, r26
  8c:	0d 01       	movw	r0, r26
  8e:	0d 01       	movw	r0, r26
  90:	0d 01       	movw	r0, r26
  92:	0d 01       	movw	r0, r26
  94:	92 00       	.word	0x0092	; ????
  96:	b1 00       	.word	0x00b1	; ????
  98:	d0 00       	.word	0x00d0	; ????
  9a:	ef 00       	.word	0x00ef	; ????
  9c:	19 01       	movw	r2, r18
  9e:	26 01       	movw	r4, r12
  a0:	33 01       	movw	r6, r6
  a2:	40 01       	movw	r8, r0
  a4:	4c 01       	movw	r8, r24
  a6:	4c 01       	movw	r8, r24
  a8:	4c 01       	movw	r8, r24
  aa:	4c 01       	movw	r8, r24
  ac:	4c 01       	movw	r8, r24
  ae:	4c 01       	movw	r8, r24
  b0:	4c 01       	movw	r8, r24
  b2:	4c 01       	movw	r8, r24
  b4:	4c 01       	movw	r8, r24
  b6:	4c 01       	movw	r8, r24
  b8:	4c 01       	movw	r8, r24
  ba:	4c 01       	movw	r8, r24
  bc:	4c 01       	movw	r8, r24
  be:	4c 01       	movw	r8, r24
  c0:	4c 01       	movw	r8, r24
  c2:	4c 01       	movw	r8, r24
  c4:	4c 01       	movw	r8, r24
  c6:	4c 01       	movw	r8, r24
  c8:	4c 01       	movw	r8, r24
  ca:	4c 01       	movw	r8, r24
  cc:	4c 01       	movw	r8, r24
  ce:	4c 01       	movw	r8, r24
  d0:	4c 01       	movw	r8, r24
  d2:	4c 01       	movw	r8, r24
  d4:	4c 01       	movw	r8, r24
  d6:	4c 01       	movw	r8, r24
  d8:	4c 01       	movw	r8, r24
  da:	4c 01       	movw	r8, r24
  dc:	19 01       	movw	r2, r18
  de:	26 01       	movw	r4, r12
  e0:	33 01       	movw	r6, r6
  e2:	40 01       	movw	r8, r0

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf e5       	ldi	r28, 0x5F	; 95
  ea:	d8 e0       	ldi	r29, 0x08	; 8
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61

000000f0 <__do_clear_bss>:
  f0:	20 e0       	ldi	r18, 0x00	; 0
  f2:	a0 e6       	ldi	r26, 0x60	; 96
  f4:	b0 e0       	ldi	r27, 0x00	; 0
  f6:	01 c0       	rjmp	.+2      	; 0xfa <.do_clear_bss_start>

000000f8 <.do_clear_bss_loop>:
  f8:	1d 92       	st	X+, r1

000000fa <.do_clear_bss_start>:
  fa:	a4 36       	cpi	r26, 0x64	; 100
  fc:	b2 07       	cpc	r27, r18
  fe:	e1 f7       	brne	.-8      	; 0xf8 <.do_clear_bss_loop>
 100:	0e 94 a0 01 	call	0x340	; 0x340 <main>
 104:	0c 94 fc 01 	jmp	0x3f8	; 0x3f8 <_exit>

00000108 <__bad_interrupt>:
 108:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000010c <DIO_set_pin_dir>:
    {
      SET_BIT(PORTD, pin);   // Set pin 'PIN' in port 'D' as 'HIGH'.
    }
    else if (0 == value)
    {
      CLR_BIT(PORTD, pin);   // Set pin 'PIN' in port 'D' as 'LOW'.
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	fc 01       	movw	r30, r24
#include <avr/io.h> 
#include "my_macros.h"      //My standard  bit macros implementation.

void DIO_set_pin_dir(unsigned char port, unsigned char pin, unsigned char direction)    //Function to set a specific pin direction 'I/P'(@direction=0) or 'O/P'(@direction=1).
{
  switch (port)
 110:	e1 54       	subi	r30, 0x41	; 65
 112:	f1 09       	sbc	r31, r1
 114:	e4 32       	cpi	r30, 0x24	; 36
 116:	f1 05       	cpc	r31, r1
 118:	08 f0       	brcs	.+2      	; 0x11c <DIO_set_pin_dir+0x10>
 11a:	7f c0       	rjmp	.+254    	; 0x21a <DIO_set_pin_dir+0x10e>
 11c:	e6 5d       	subi	r30, 0xD6	; 214
 11e:	ff 4f       	sbci	r31, 0xFF	; 255
 120:	0c 94 f6 01 	jmp	0x3ec	; 0x3ec <__tablejump2__>
  {
    case 'A':                     // @Port 'A'.
    case 'a':                     // @Port 'a'.
    if (1 == direction)            // '1' is for 'O/P'.
 124:	41 30       	cpi	r20, 0x01	; 1
 126:	69 f4       	brne	.+26     	; 0x142 <DIO_set_pin_dir+0x36>
    {
      SET_BIT(DDRA, pin);         // Set the pin 'PIN' in port 'A' as 'O/P'.
 128:	2a b3       	in	r18, 0x1a	; 26
 12a:	81 e0       	ldi	r24, 0x01	; 1
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	ac 01       	movw	r20, r24
 130:	02 c0       	rjmp	.+4      	; 0x136 <DIO_set_pin_dir+0x2a>
 132:	44 0f       	add	r20, r20
 134:	55 1f       	adc	r21, r21
 136:	6a 95       	dec	r22
 138:	e2 f7       	brpl	.-8      	; 0x132 <DIO_set_pin_dir+0x26>
 13a:	ba 01       	movw	r22, r20
 13c:	62 2b       	or	r22, r18
 13e:	6a bb       	out	0x1a, r22	; 26
 140:	08 95       	ret
    }
    else if (0 == direction)
 142:	41 11       	cpse	r20, r1
 144:	6a c0       	rjmp	.+212    	; 0x21a <DIO_set_pin_dir+0x10e>
    {
      CLR_BIT(DDRA, pin);        // Set the pin 'PIN' in port 'A' as 'I/P'.
 146:	2a b3       	in	r18, 0x1a	; 26
 148:	81 e0       	ldi	r24, 0x01	; 1
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	ac 01       	movw	r20, r24
 14e:	02 c0       	rjmp	.+4      	; 0x154 <DIO_set_pin_dir+0x48>
 150:	44 0f       	add	r20, r20
 152:	55 1f       	adc	r21, r21
 154:	6a 95       	dec	r22
 156:	e2 f7       	brpl	.-8      	; 0x150 <DIO_set_pin_dir+0x44>
 158:	ba 01       	movw	r22, r20
 15a:	60 95       	com	r22
 15c:	62 23       	and	r22, r18
 15e:	6a bb       	out	0x1a, r22	; 26
 160:	08 95       	ret
    } 
    break;

    case 'B':                    // @Port 'B'.
    case 'b':                    // @Port 'b'.
    if (1==direction)            // '1' is for 'O/P'.
 162:	41 30       	cpi	r20, 0x01	; 1
 164:	69 f4       	brne	.+26     	; 0x180 <DIO_set_pin_dir+0x74>
    {
      SET_BIT(DDRB, pin);        // Set the pin 'PIN' in port 'B' as 'O/P'.
 166:	27 b3       	in	r18, 0x17	; 23
 168:	81 e0       	ldi	r24, 0x01	; 1
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	ac 01       	movw	r20, r24
 16e:	02 c0       	rjmp	.+4      	; 0x174 <DIO_set_pin_dir+0x68>
 170:	44 0f       	add	r20, r20
 172:	55 1f       	adc	r21, r21
 174:	6a 95       	dec	r22
 176:	e2 f7       	brpl	.-8      	; 0x170 <DIO_set_pin_dir+0x64>
 178:	ba 01       	movw	r22, r20
 17a:	62 2b       	or	r22, r18
 17c:	67 bb       	out	0x17, r22	; 23
 17e:	08 95       	ret
    }
    else if (0 == direction)
 180:	41 11       	cpse	r20, r1
 182:	4b c0       	rjmp	.+150    	; 0x21a <DIO_set_pin_dir+0x10e>
    {
      CLR_BIT(DDRB, pin);        // Set the pin 'PIN' in port 'B' as 'I/P'.
 184:	27 b3       	in	r18, 0x17	; 23
 186:	81 e0       	ldi	r24, 0x01	; 1
 188:	90 e0       	ldi	r25, 0x00	; 0
 18a:	ac 01       	movw	r20, r24
 18c:	02 c0       	rjmp	.+4      	; 0x192 <DIO_set_pin_dir+0x86>
 18e:	44 0f       	add	r20, r20
 190:	55 1f       	adc	r21, r21
 192:	6a 95       	dec	r22
 194:	e2 f7       	brpl	.-8      	; 0x18e <DIO_set_pin_dir+0x82>
 196:	ba 01       	movw	r22, r20
 198:	60 95       	com	r22
 19a:	62 23       	and	r22, r18
 19c:	67 bb       	out	0x17, r22	; 23
 19e:	08 95       	ret
    }
    break;

    case 'C':                    // @Port 'C'.
    case 'c':                    // @Port 'c'. 
    if (1==direction)            // '1' is for 'O/P'.
 1a0:	41 30       	cpi	r20, 0x01	; 1
 1a2:	69 f4       	brne	.+26     	; 0x1be <DIO_set_pin_dir+0xb2>
    {
      SET_BIT(DDRC, pin);        // Set the pin 'PIN' in port 'C' as 'O/P'. 
 1a4:	24 b3       	in	r18, 0x14	; 20
 1a6:	81 e0       	ldi	r24, 0x01	; 1
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	ac 01       	movw	r20, r24
 1ac:	02 c0       	rjmp	.+4      	; 0x1b2 <DIO_set_pin_dir+0xa6>
 1ae:	44 0f       	add	r20, r20
 1b0:	55 1f       	adc	r21, r21
 1b2:	6a 95       	dec	r22
 1b4:	e2 f7       	brpl	.-8      	; 0x1ae <DIO_set_pin_dir+0xa2>
 1b6:	ba 01       	movw	r22, r20
 1b8:	62 2b       	or	r22, r18
 1ba:	64 bb       	out	0x14, r22	; 20
 1bc:	08 95       	ret
    }
    else if (0 == direction)
 1be:	41 11       	cpse	r20, r1
 1c0:	2c c0       	rjmp	.+88     	; 0x21a <DIO_set_pin_dir+0x10e>
    {
      CLR_BIT(DDRC, pin);        // Set the pin 'PIN' in port 'C' as 'I/P'. 
 1c2:	24 b3       	in	r18, 0x14	; 20
 1c4:	81 e0       	ldi	r24, 0x01	; 1
 1c6:	90 e0       	ldi	r25, 0x00	; 0
 1c8:	ac 01       	movw	r20, r24
 1ca:	02 c0       	rjmp	.+4      	; 0x1d0 <DIO_set_pin_dir+0xc4>
 1cc:	44 0f       	add	r20, r20
 1ce:	55 1f       	adc	r21, r21
 1d0:	6a 95       	dec	r22
 1d2:	e2 f7       	brpl	.-8      	; 0x1cc <DIO_set_pin_dir+0xc0>
 1d4:	ba 01       	movw	r22, r20
 1d6:	60 95       	com	r22
 1d8:	62 23       	and	r22, r18
 1da:	64 bb       	out	0x14, r22	; 20
 1dc:	08 95       	ret
    }
    break;

    case 'D':                    // @Port 'D'.
    case 'd':                    // @Port 'd'. 
    if (1==direction)            // '1' is for 'I/P'.
 1de:	41 30       	cpi	r20, 0x01	; 1
 1e0:	69 f4       	brne	.+26     	; 0x1fc <DIO_set_pin_dir+0xf0>
    {
      SET_BIT(DDRD, pin);        // Set the pin 'PIN' in port 'D' as 'I/P'. 
 1e2:	21 b3       	in	r18, 0x11	; 17
 1e4:	81 e0       	ldi	r24, 0x01	; 1
 1e6:	90 e0       	ldi	r25, 0x00	; 0
 1e8:	ac 01       	movw	r20, r24
 1ea:	02 c0       	rjmp	.+4      	; 0x1f0 <DIO_set_pin_dir+0xe4>
 1ec:	44 0f       	add	r20, r20
 1ee:	55 1f       	adc	r21, r21
 1f0:	6a 95       	dec	r22
 1f2:	e2 f7       	brpl	.-8      	; 0x1ec <DIO_set_pin_dir+0xe0>
 1f4:	ba 01       	movw	r22, r20
 1f6:	62 2b       	or	r22, r18
 1f8:	61 bb       	out	0x11, r22	; 17
 1fa:	08 95       	ret
    }
    else if (0 == direction)
 1fc:	41 11       	cpse	r20, r1
 1fe:	0d c0       	rjmp	.+26     	; 0x21a <DIO_set_pin_dir+0x10e>
    {
      CLR_BIT(DDRD, pin);        // Set the pin 'PIN' in port 'D' as 'O/P'.
 200:	21 b3       	in	r18, 0x11	; 17
 202:	81 e0       	ldi	r24, 0x01	; 1
 204:	90 e0       	ldi	r25, 0x00	; 0
 206:	ac 01       	movw	r20, r24
 208:	02 c0       	rjmp	.+4      	; 0x20e <DIO_set_pin_dir+0x102>
 20a:	44 0f       	add	r20, r20
 20c:	55 1f       	adc	r21, r21
 20e:	6a 95       	dec	r22
 210:	e2 f7       	brpl	.-8      	; 0x20a <DIO_set_pin_dir+0xfe>
 212:	ba 01       	movw	r22, r20
 214:	60 95       	com	r22
 216:	62 23       	and	r22, r18
 218:	61 bb       	out	0x11, r22	; 17
 21a:	08 95       	ret

0000021c <DIO_toogle>:

//..................................................................................

void DIO_toogle(unsigned char port, unsigned char pin)  //Toogle the 'O/P' pin value 'HIGH' or 'LOW'
{
  switch (port)
 21c:	90 e0       	ldi	r25, 0x00	; 0
 21e:	fc 01       	movw	r30, r24
 220:	e1 54       	subi	r30, 0x41	; 65
 222:	f1 09       	sbc	r31, r1
 224:	e4 32       	cpi	r30, 0x24	; 36
 226:	f1 05       	cpc	r31, r1
 228:	b8 f5       	brcc	.+110    	; 0x298 <DIO_toogle+0x7c>
 22a:	e2 5b       	subi	r30, 0xB2	; 178
 22c:	ff 4f       	sbci	r31, 0xFF	; 255
 22e:	0c 94 f6 01 	jmp	0x3ec	; 0x3ec <__tablejump2__>
  {
    case 'A':
    case 'a':
    TOG_BIT(PORTA, pin);    //Toggle the value of the given pin in port 'A'.
 232:	2b b3       	in	r18, 0x1b	; 27
 234:	81 e0       	ldi	r24, 0x01	; 1
 236:	90 e0       	ldi	r25, 0x00	; 0
 238:	ac 01       	movw	r20, r24
 23a:	02 c0       	rjmp	.+4      	; 0x240 <DIO_toogle+0x24>
 23c:	44 0f       	add	r20, r20
 23e:	55 1f       	adc	r21, r21
 240:	6a 95       	dec	r22
 242:	e2 f7       	brpl	.-8      	; 0x23c <DIO_toogle+0x20>
 244:	ba 01       	movw	r22, r20
 246:	62 27       	eor	r22, r18
 248:	6b bb       	out	0x1b, r22	; 27
    break;
 24a:	08 95       	ret

    case 'B':
    case 'b':
    TOG_BIT(PORTB, pin);    //Toggle the value of the given pin in port 'B'.
 24c:	28 b3       	in	r18, 0x18	; 24
 24e:	81 e0       	ldi	r24, 0x01	; 1
 250:	90 e0       	ldi	r25, 0x00	; 0
 252:	ac 01       	movw	r20, r24
 254:	02 c0       	rjmp	.+4      	; 0x25a <DIO_toogle+0x3e>
 256:	44 0f       	add	r20, r20
 258:	55 1f       	adc	r21, r21
 25a:	6a 95       	dec	r22
 25c:	e2 f7       	brpl	.-8      	; 0x256 <DIO_toogle+0x3a>
 25e:	ba 01       	movw	r22, r20
 260:	62 27       	eor	r22, r18
 262:	68 bb       	out	0x18, r22	; 24
    break;
 264:	08 95       	ret

    case 'C':
    case 'c':
    TOG_BIT(PORTC, pin);    //Toggle the value of the given pin in port 'C'.
 266:	25 b3       	in	r18, 0x15	; 21
 268:	81 e0       	ldi	r24, 0x01	; 1
 26a:	90 e0       	ldi	r25, 0x00	; 0
 26c:	ac 01       	movw	r20, r24
 26e:	02 c0       	rjmp	.+4      	; 0x274 <DIO_toogle+0x58>
 270:	44 0f       	add	r20, r20
 272:	55 1f       	adc	r21, r21
 274:	6a 95       	dec	r22
 276:	e2 f7       	brpl	.-8      	; 0x270 <DIO_toogle+0x54>
 278:	ba 01       	movw	r22, r20
 27a:	62 27       	eor	r22, r18
 27c:	65 bb       	out	0x15, r22	; 21
    break;
 27e:	08 95       	ret

    case 'D':
    case 'd':
    TOG_BIT(PORTD, pin);    //Toggle the value of the given pin in port 'D'.
 280:	22 b3       	in	r18, 0x12	; 18
 282:	81 e0       	ldi	r24, 0x01	; 1
 284:	90 e0       	ldi	r25, 0x00	; 0
 286:	ac 01       	movw	r20, r24
 288:	02 c0       	rjmp	.+4      	; 0x28e <DIO_toogle+0x72>
 28a:	44 0f       	add	r20, r20
 28c:	55 1f       	adc	r21, r21
 28e:	6a 95       	dec	r22
 290:	e2 f7       	brpl	.-8      	; 0x28a <DIO_toogle+0x6e>
 292:	ba 01       	movw	r22, r20
 294:	62 27       	eor	r22, r18
 296:	62 bb       	out	0x12, r22	; 18
 298:	08 95       	ret

0000029a <LED_init>:

#include "DIO.h"

void LED_init(unsigned char port, unsigned char pin)
{
  DIO_set_pin_dir(port, pin, 1);        //Initialize the 'pin' to the 'LED'
 29a:	41 e0       	ldi	r20, 0x01	; 1
 29c:	0e 94 86 00 	call	0x10c	; 0x10c <DIO_set_pin_dir>
 2a0:	08 95       	ret

000002a2 <LED_toggle>:
  DIO_write_pin(port, pin, 0);         //Turn 'OFF' the 'LED' on the 'pin' of 'port' 
}

void LED_toggle(unsigned char port, unsigned char pin)
{
  DIO_toogle(port, pin);              //Toggle the 'LED' on the 'pin' of 'port' 
 2a2:	0e 94 0e 01 	call	0x21c	; 0x21c <DIO_toogle>
 2a6:	08 95       	ret

000002a8 <Timer_CTC_init_interrupt>:
{
	/*
	 * CTC_time = OCR0_val * (N / freq_mcu)
	 */
	
	CLR_BIT(TCCR0, WGM00);          //Set CTC Mode
 2a8:	93 b7       	in	r25, 0x33	; 51
 2aa:	9f 7b       	andi	r25, 0xBF	; 191
 2ac:	93 bf       	out	0x33, r25	; 51
	SET_BIT(TCCR0, WGM01);     
 2ae:	93 b7       	in	r25, 0x33	; 51
 2b0:	98 60       	ori	r25, 0x08	; 8
 2b2:	93 bf       	out	0x33, r25	; 51
	
	//Select the Timer Clock PRESCALER.
	switch (prescalar)
 2b4:	60 34       	cpi	r22, 0x40	; 64
 2b6:	71 05       	cpc	r23, r1
 2b8:	11 f1       	breq	.+68     	; 0x2fe <Timer_CTC_init_interrupt+0x56>
 2ba:	38 f4       	brcc	.+14     	; 0x2ca <Timer_CTC_init_interrupt+0x22>
 2bc:	61 15       	cp	r22, r1
 2be:	71 05       	cpc	r23, r1
 2c0:	61 f0       	breq	.+24     	; 0x2da <Timer_CTC_init_interrupt+0x32>
 2c2:	68 30       	cpi	r22, 0x08	; 8
 2c4:	71 05       	cpc	r23, r1
 2c6:	91 f0       	breq	.+36     	; 0x2ec <Timer_CTC_init_interrupt+0x44>
 2c8:	35 c0       	rjmp	.+106    	; 0x334 <Timer_CTC_init_interrupt+0x8c>
 2ca:	61 15       	cp	r22, r1
 2cc:	91 e0       	ldi	r25, 0x01	; 1
 2ce:	79 07       	cpc	r23, r25
 2d0:	f9 f0       	breq	.+62     	; 0x310 <Timer_CTC_init_interrupt+0x68>
 2d2:	61 15       	cp	r22, r1
 2d4:	74 40       	sbci	r23, 0x04	; 4
 2d6:	29 f1       	breq	.+74     	; 0x322 <Timer_CTC_init_interrupt+0x7a>
 2d8:	2d c0       	rjmp	.+90     	; 0x334 <Timer_CTC_init_interrupt+0x8c>
	{
		case 0 :                  //No Prescaler
		CLR_BIT(TCCR0, CS00);
 2da:	93 b7       	in	r25, 0x33	; 51
 2dc:	9e 7f       	andi	r25, 0xFE	; 254
 2de:	93 bf       	out	0x33, r25	; 51
		CLR_BIT(TCCR0, CS01);
 2e0:	93 b7       	in	r25, 0x33	; 51
 2e2:	9d 7f       	andi	r25, 0xFD	; 253
 2e4:	93 bf       	out	0x33, r25	; 51
		SET_BIT(TCCR0, CS02);
 2e6:	93 b7       	in	r25, 0x33	; 51
 2e8:	94 60       	ori	r25, 0x04	; 4
 2ea:	93 bf       	out	0x33, r25	; 51
		
		case 8 :                 //Prescaler = 8
		CLR_BIT(TCCR0, CS00);
 2ec:	93 b7       	in	r25, 0x33	; 51
 2ee:	9e 7f       	andi	r25, 0xFE	; 254
 2f0:	93 bf       	out	0x33, r25	; 51
		SET_BIT(TCCR0, CS01);
 2f2:	93 b7       	in	r25, 0x33	; 51
 2f4:	92 60       	ori	r25, 0x02	; 2
 2f6:	93 bf       	out	0x33, r25	; 51
		CLR_BIT(TCCR0, CS02);
 2f8:	93 b7       	in	r25, 0x33	; 51
 2fa:	9b 7f       	andi	r25, 0xFB	; 251
 2fc:	93 bf       	out	0x33, r25	; 51
		
		case 64 :                //Prescaler = 64
		SET_BIT(TCCR0, CS00);
 2fe:	93 b7       	in	r25, 0x33	; 51
 300:	91 60       	ori	r25, 0x01	; 1
 302:	93 bf       	out	0x33, r25	; 51
		SET_BIT(TCCR0, CS01);
 304:	93 b7       	in	r25, 0x33	; 51
 306:	92 60       	ori	r25, 0x02	; 2
 308:	93 bf       	out	0x33, r25	; 51
		CLR_BIT(TCCR0, CS02);
 30a:	93 b7       	in	r25, 0x33	; 51
 30c:	9b 7f       	andi	r25, 0xFB	; 251
 30e:	93 bf       	out	0x33, r25	; 51
		
		case 256 :               //Prescaler = 256
		CLR_BIT(TCCR0, CS00);
 310:	93 b7       	in	r25, 0x33	; 51
 312:	9e 7f       	andi	r25, 0xFE	; 254
 314:	93 bf       	out	0x33, r25	; 51
		CLR_BIT(TCCR0, CS01);
 316:	93 b7       	in	r25, 0x33	; 51
 318:	9d 7f       	andi	r25, 0xFD	; 253
 31a:	93 bf       	out	0x33, r25	; 51
		SET_BIT(TCCR0, CS02);
 31c:	93 b7       	in	r25, 0x33	; 51
 31e:	94 60       	ori	r25, 0x04	; 4
 320:	93 bf       	out	0x33, r25	; 51
		
		case 1024 :              //Prescaler = 1024
		SET_BIT(TCCR0, CS00);
 322:	93 b7       	in	r25, 0x33	; 51
 324:	91 60       	ori	r25, 0x01	; 1
 326:	93 bf       	out	0x33, r25	; 51
		CLR_BIT(TCCR0, CS01);
 328:	93 b7       	in	r25, 0x33	; 51
 32a:	9d 7f       	andi	r25, 0xFD	; 253
 32c:	93 bf       	out	0x33, r25	; 51
		SET_BIT(TCCR0, CS02);
 32e:	93 b7       	in	r25, 0x33	; 51
 330:	94 60       	ori	r25, 0x04	; 4
 332:	93 bf       	out	0x33, r25	; 51
	}
	
	OCR0 = OCR0_val;           //Load value in [OCR0]
 334:	8c bf       	out	0x3c, r24	; 60
	  
	sei();                    //Enable Global interrupt.
 336:	78 94       	sei
	SET_BIT(TIMSK, OCIE0);    //Enable CTC interrupt.
 338:	89 b7       	in	r24, 0x39	; 57
 33a:	82 60       	ori	r24, 0x02	; 2
 33c:	89 bf       	out	0x39, r24	; 57
 33e:	08 95       	ret

00000340 <main>:
{
	/*
	 * CTC_time = OCR0_val * (N / freq_mcu)
	 * counter  = required_time / CTC_time  
	 */
	Timer_CTC_init_interrupt(78, 1024);  //CTC_time = OCR0_val * (N / freq_mcu)
 340:	60 e0       	ldi	r22, 0x00	; 0
 342:	74 e0       	ldi	r23, 0x04	; 4
 344:	8e e4       	ldi	r24, 0x4E	; 78
 346:	0e 94 54 01 	call	0x2a8	; 0x2a8 <Timer_CTC_init_interrupt>
	
	LED_init('A', 0);     //LED (1)
 34a:	60 e0       	ldi	r22, 0x00	; 0
 34c:	81 e4       	ldi	r24, 0x41	; 65
 34e:	0e 94 4d 01 	call	0x29a	; 0x29a <LED_init>
	LED_init('A', 1);     //LED (2)
 352:	61 e0       	ldi	r22, 0x01	; 1
 354:	81 e4       	ldi	r24, 0x41	; 65
 356:	0e 94 4d 01 	call	0x29a	; 0x29a <LED_init>
	LED_init('A', 2);     //LED (3)
 35a:	62 e0       	ldi	r22, 0x02	; 2
 35c:	81 e4       	ldi	r24, 0x41	; 65
 35e:	0e 94 4d 01 	call	0x29a	; 0x29a <LED_init>
	
    while(1)
    {
		if (counter_1 >= 100)
 362:	80 91 63 00 	lds	r24, 0x0063
 366:	84 36       	cpi	r24, 0x64	; 100
 368:	30 f0       	brcs	.+12     	; 0x376 <main+0x36>
		{
		    LED_toggle('A', 0);
 36a:	60 e0       	ldi	r22, 0x00	; 0
 36c:	81 e4       	ldi	r24, 0x41	; 65
 36e:	0e 94 51 01 	call	0x2a2	; 0x2a2 <LED_toggle>
		    counter_1 = 0;	
 372:	10 92 63 00 	sts	0x0063, r1
		}  
		
		if (counter_2 >= 200)
 376:	80 91 62 00 	lds	r24, 0x0062
 37a:	88 3c       	cpi	r24, 0xC8	; 200
 37c:	30 f0       	brcs	.+12     	; 0x38a <main+0x4a>
		{
			LED_toggle('A', 1);
 37e:	61 e0       	ldi	r22, 0x01	; 1
 380:	81 e4       	ldi	r24, 0x41	; 65
 382:	0e 94 51 01 	call	0x2a2	; 0x2a2 <LED_toggle>
			counter_2 = 0;
 386:	10 92 62 00 	sts	0x0062, r1
		}
		
		if (counter_3 >= 300)
 38a:	80 91 60 00 	lds	r24, 0x0060
 38e:	90 91 61 00 	lds	r25, 0x0061
 392:	8c 32       	cpi	r24, 0x2C	; 44
 394:	91 40       	sbci	r25, 0x01	; 1
 396:	28 f3       	brcs	.-54     	; 0x362 <main+0x22>
		{
			LED_toggle('A', 2);
 398:	62 e0       	ldi	r22, 0x02	; 2
 39a:	81 e4       	ldi	r24, 0x41	; 65
 39c:	0e 94 51 01 	call	0x2a2	; 0x2a2 <LED_toggle>
			counter_3 = 0;
 3a0:	10 92 61 00 	sts	0x0061, r1
 3a4:	10 92 60 00 	sts	0x0060, r1
 3a8:	dc cf       	rjmp	.-72     	; 0x362 <main+0x22>

000003aa <__vector_10>:
    }
}


ISR (TIMER0_COMP_vect)
{
 3aa:	1f 92       	push	r1
 3ac:	0f 92       	push	r0
 3ae:	0f b6       	in	r0, 0x3f	; 63
 3b0:	0f 92       	push	r0
 3b2:	11 24       	eor	r1, r1
 3b4:	8f 93       	push	r24
 3b6:	9f 93       	push	r25
	counter_1++;
 3b8:	80 91 63 00 	lds	r24, 0x0063
 3bc:	8f 5f       	subi	r24, 0xFF	; 255
 3be:	80 93 63 00 	sts	0x0063, r24
	counter_2++;
 3c2:	80 91 62 00 	lds	r24, 0x0062
 3c6:	8f 5f       	subi	r24, 0xFF	; 255
 3c8:	80 93 62 00 	sts	0x0062, r24
	counter_3++;
 3cc:	80 91 60 00 	lds	r24, 0x0060
 3d0:	90 91 61 00 	lds	r25, 0x0061
 3d4:	01 96       	adiw	r24, 0x01	; 1
 3d6:	90 93 61 00 	sts	0x0061, r25
 3da:	80 93 60 00 	sts	0x0060, r24
 3de:	9f 91       	pop	r25
 3e0:	8f 91       	pop	r24
 3e2:	0f 90       	pop	r0
 3e4:	0f be       	out	0x3f, r0	; 63
 3e6:	0f 90       	pop	r0
 3e8:	1f 90       	pop	r1
 3ea:	18 95       	reti

000003ec <__tablejump2__>:
 3ec:	ee 0f       	add	r30, r30
 3ee:	ff 1f       	adc	r31, r31

000003f0 <__tablejump__>:
 3f0:	05 90       	lpm	r0, Z+
 3f2:	f4 91       	lpm	r31, Z
 3f4:	e0 2d       	mov	r30, r0
 3f6:	09 94       	ijmp

000003f8 <_exit>:
 3f8:	f8 94       	cli

000003fa <__stop_program>:
 3fa:	ff cf       	rjmp	.-2      	; 0x3fa <__stop_program>
